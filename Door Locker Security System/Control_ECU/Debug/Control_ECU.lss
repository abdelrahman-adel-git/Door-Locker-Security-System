
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000158  00800060  000021cc  00002260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  008001b8  008001b8  000023b8  2**0
                  ALLOC
  3 .stab         00002688  00000000  00000000  000023b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003258  00000000  00000000  00004a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00007c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00007e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00007fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00009ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000b15a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c160  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000c300  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000c5be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cecc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__vector_9>
      28:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__vector_10>
      2c:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3e       	cpi	r26, 0xE0	; 224
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 79 06 	call	0xcf2	; 0xcf2 <main>
      8a:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 10 	jmp	0x2184	; 0x2184 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 10 	jmp	0x2184	; 0x2184 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 af 10 	jmp	0x215e	; 0x215e <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 57       	subi	r30, 0x78	; 120
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <Buzzer_init>:
 */

#include "Buzzer.h"

void Buzzer_init(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	67 e0       	ldi	r22, 0x07	; 7
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	67 e0       	ldi	r22, 0x07	; 7
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <GPIO_writePin>
}
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <Buzzer_on>:

void Buzzer_on(void)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	67 e0       	ldi	r22, 0x07	; 7
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <GPIO_writePin>
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <Buzzer_off>:

void Buzzer_off(void)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	67 e0       	ldi	r22, 0x07	; 7
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <GPIO_writePin>
}
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <main>:

/************************************************************************************************************/

/*========================================================================================================================*/
int main(void)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <main+0x6>
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62

	/*Initializations*/
	DcMotor_Init();
     cfc:	0e 94 a7 0c 	call	0x194e	; 0x194e <DcMotor_Init>
	Buzzer_init();
     d00:	0e 94 50 06 	call	0xca0	; 0xca0 <Buzzer_init>
	UART_init(&Uart_Configurations);
     d04:	8a e9       	ldi	r24, 0x9A	; 154
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <UART_init>
	TWI_init(&Twi_Configurations);
     d0c:	8f e9       	ldi	r24, 0x9F	; 159
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <TWI_init>

	SREG.Bits.I = 1; /*Enable Interrupts*/
     d14:	ef e5       	ldi	r30, 0x5F	; 95
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 68       	ori	r24, 0x80	; 128
     d1c:	80 83       	st	Z, r24

	/*here the Control_ECU keeps receiving the two entered passwords from the HMI_ECU and won't save the password in the
	 * EEPROM unless the HMI_ECU sends two matching passwords*/
	Receive_password_two_entries();
     d1e:	0e 94 88 07 	call	0xf10	; 0xf10 <Receive_password_two_entries>

	Save_password_to_EEPROM(password_2nd_entry_1st_byte_address); /*saving the password to the EEPROM*/
     d22:	80 91 92 01 	lds	r24, 0x0192
     d26:	90 91 93 01 	lds	r25, 0x0193
     d2a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Save_password_to_EEPROM>
	Read_password_from_EEPROM((uint8*) &Confirmed_password); /*reading the password from the EEPROM and
     d2e:	8b ed       	ldi	r24, 0xDB	; 219
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 78 08 	call	0x10f0	; 0x10f0 <Read_password_from_EEPROM>
	 *                                                          storing it in a variable*/

	/*Informing the HMI_ECU that the two passwords are matching so it can continue to the main options screen*/
	strcpy((char*) Passwords_matching_status_message, matched_message);
     d36:	20 91 96 01 	lds	r18, 0x0196
     d3a:	30 91 97 01 	lds	r19, 0x0197
     d3e:	8d ec       	ldi	r24, 0xCD	; 205
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	b9 01       	movw	r22, r18
     d44:	0e 94 dd 10 	call	0x21ba	; 0x21ba <strcpy>
	UART_sendString((const uint8*) Passwords_matching_status_message);
     d48:	8d ec       	ldi	r24, 0xCD	; 205
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0e 94 25 10 	call	0x204a	; 0x204a <UART_sendString>

	for (;;)
	{
		Chosen_option = Receive_the_chosen_option_from_HMI_ECU(); /*receive the chosen option*/
     d50:	0e 94 50 09 	call	0x12a0	; 0x12a0 <Receive_the_chosen_option_from_HMI_ECU>
     d54:	80 93 c8 01 	sts	0x01C8, r24
		switch (Chosen_option)
     d58:	80 91 c8 01 	lds	r24, 0x01C8
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	3a 83       	std	Y+2, r19	; 0x02
     d62:	29 83       	std	Y+1, r18	; 0x01
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	8b 32       	cpi	r24, 0x2B	; 43
     d6a:	91 05       	cpc	r25, r1
     d6c:	31 f0       	breq	.+12     	; 0xd7a <main+0x88>
     d6e:	29 81       	ldd	r18, Y+1	; 0x01
     d70:	3a 81       	ldd	r19, Y+2	; 0x02
     d72:	2d 32       	cpi	r18, 0x2D	; 45
     d74:	31 05       	cpc	r19, r1
     d76:	81 f1       	breq	.+96     	; 0xdd8 <main+0xe6>
     d78:	eb cf       	rjmp	.-42     	; 0xd50 <main+0x5e>
		{
		case '+':
			start_password_3_trials(); /*receive the password from the HMI_ECU for maximum 3 times*/
     d7a:	0e 94 1c 09 	call	0x1238	; 0x1238 <start_password_3_trials>
			if (Entered_password != Confirmed_password)
     d7e:	20 91 c0 01 	lds	r18, 0x01C0
     d82:	30 91 c1 01 	lds	r19, 0x01C1
     d86:	40 91 c2 01 	lds	r20, 0x01C2
     d8a:	50 91 c3 01 	lds	r21, 0x01C3
     d8e:	80 91 db 01 	lds	r24, 0x01DB
     d92:	90 91 dc 01 	lds	r25, 0x01DC
     d96:	a0 91 dd 01 	lds	r26, 0x01DD
     d9a:	b0 91 de 01 	lds	r27, 0x01DE
     d9e:	28 17       	cp	r18, r24
     da0:	39 07       	cpc	r19, r25
     da2:	4a 07       	cpc	r20, r26
     da4:	5b 07       	cpc	r21, r27
     da6:	59 f0       	breq	.+22     	; 0xdbe <main+0xcc>
			{
				/*turning on the buzzer for 1 minute*/
				Buzzer_on();
     da8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Buzzer_on>
				Timer1_setCallBack(Buzzer_Call_Back_Function);
     dac:	86 ea       	ldi	r24, 0xA6	; 166
     dae:	99 e0       	ldi	r25, 0x09	; 9
     db0:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <Timer1_setCallBack>
				Timer1_init(&Buzzer_Configurations);
     db4:	8d ea       	ldi	r24, 0xAD	; 173
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <Timer1_init>
     dbc:	c9 cf       	rjmp	.-110    	; 0xd50 <main+0x5e>
			}
			else
			{
				/*starts the unlocking and locking door operation*/
				DcMotor_Rotate(CW, 100);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	64 e6       	ldi	r22, 0x64	; 100
     dc2:	0e 94 c9 0c 	call	0x1992	; 0x1992 <DcMotor_Rotate>
				Timer1_setCallBack(Unlocking_Door_Call_Back_Function);
     dc6:	89 e5       	ldi	r24, 0x59	; 89
     dc8:	99 e0       	ldi	r25, 0x09	; 9
     dca:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <Timer1_setCallBack>
				Timer1_init(&LockingandUnlocking_Door_Configurations);
     dce:	81 ea       	ldi	r24, 0xA1	; 161
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <Timer1_init>
     dd6:	bc cf       	rjmp	.-136    	; 0xd50 <main+0x5e>
			}

			break;
		case '-':
			start_password_3_trials(); /*receive the password from the HMI_ECU for maximum 3 times*/
     dd8:	0e 94 1c 09 	call	0x1238	; 0x1238 <start_password_3_trials>
			if (Entered_password != Confirmed_password)
     ddc:	20 91 c0 01 	lds	r18, 0x01C0
     de0:	30 91 c1 01 	lds	r19, 0x01C1
     de4:	40 91 c2 01 	lds	r20, 0x01C2
     de8:	50 91 c3 01 	lds	r21, 0x01C3
     dec:	80 91 db 01 	lds	r24, 0x01DB
     df0:	90 91 dc 01 	lds	r25, 0x01DC
     df4:	a0 91 dd 01 	lds	r26, 0x01DD
     df8:	b0 91 de 01 	lds	r27, 0x01DE
     dfc:	28 17       	cp	r18, r24
     dfe:	39 07       	cpc	r19, r25
     e00:	4a 07       	cpc	r20, r26
     e02:	5b 07       	cpc	r21, r27
     e04:	59 f0       	breq	.+22     	; 0xe1c <main+0x12a>
			{
				/*turning on the buzzer for 1 minute*/
				Buzzer_on();
     e06:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Buzzer_on>
				Timer1_setCallBack(Buzzer_Call_Back_Function);
     e0a:	86 ea       	ldi	r24, 0xA6	; 166
     e0c:	99 e0       	ldi	r25, 0x09	; 9
     e0e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <Timer1_setCallBack>
				Timer1_init(&Buzzer_Configurations);
     e12:	8d ea       	ldi	r24, 0xAD	; 173
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <Timer1_init>
     e1a:	9a cf       	rjmp	.-204    	; 0xd50 <main+0x5e>
			}
			else
			{
				/*here the Control_ECU keeps receiving the new password two entries from the HMI_ECU and
				 * won't save the password in the EEPROM unless the HMI_ECU sends two matching passwords*/
				Receive_password_two_entries();
     e1c:	0e 94 88 07 	call	0xf10	; 0xf10 <Receive_password_two_entries>

				Save_password_to_EEPROM(password_2nd_entry_1st_byte_address); /*saving the new password to the EEPROM*/
     e20:	80 91 92 01 	lds	r24, 0x0192
     e24:	90 91 93 01 	lds	r25, 0x0193
     e28:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Save_password_to_EEPROM>
				Read_password_from_EEPROM((uint8*) &Confirmed_password); /*reading the new password from the EEPROM and
     e2c:	8b ed       	ldi	r24, 0xDB	; 219
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 78 08 	call	0x10f0	; 0x10f0 <Read_password_from_EEPROM>
				 *                                                         storing in a variable*/

				/*Informing the HMI_ECU that the new password two entries are matching
				 * so it can continue to the main options screen*/
				strcpy((char*) Passwords_matching_status_message, matched_message);
     e34:	20 91 96 01 	lds	r18, 0x0196
     e38:	30 91 97 01 	lds	r19, 0x0197
     e3c:	8d ec       	ldi	r24, 0xCD	; 205
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	b9 01       	movw	r22, r18
     e42:	0e 94 dd 10 	call	0x21ba	; 0x21ba <strcpy>
				UART_sendString((const uint8*) Passwords_matching_status_message);
     e46:	8d ec       	ldi	r24, 0xCD	; 205
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 25 10 	call	0x204a	; 0x204a <UART_sendString>
     e4e:	80 cf       	rjmp	.-256    	; 0xd50 <main+0x5e>

00000e50 <Receive_password_1st_entry_from_HMI_ECU>:
/*========================================================================================================================*/

/**********************************************FUNCTIONS_DEFINITIONS*******************************************************/

void Receive_password_1st_entry_from_HMI_ECU(uint8 *password_1st_entry_byte_ptr)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <Receive_password_1st_entry_from_HMI_ECU+0x6>
     e56:	0f 92       	push	r0
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	9b 83       	std	Y+3, r25	; 0x03
     e5e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0; i < 4; i++, password_1st_entry_byte_ptr++)
     e60:	19 82       	std	Y+1, r1	; 0x01
     e62:	0d c0       	rjmp	.+26     	; 0xe7e <Receive_password_1st_entry_from_HMI_ECU+0x2e>
	{
		(*password_1st_entry_byte_ptr) = UART_recieveByte();
     e64:	0e 94 15 10 	call	0x202a	; 0x202a <UART_recieveByte>
     e68:	ea 81       	ldd	r30, Y+2	; 0x02
     e6a:	fb 81       	ldd	r31, Y+3	; 0x03
     e6c:	80 83       	st	Z, r24
/**********************************************FUNCTIONS_DEFINITIONS*******************************************************/

void Receive_password_1st_entry_from_HMI_ECU(uint8 *password_1st_entry_byte_ptr)
{
	uint8 i;
	for (i = 0; i < 4; i++, password_1st_entry_byte_ptr++)
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	8f 5f       	subi	r24, 0xFF	; 255
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	9b 81       	ldd	r25, Y+3	; 0x03
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	9b 83       	std	Y+3, r25	; 0x03
     e7c:	8a 83       	std	Y+2, r24	; 0x02
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	84 30       	cpi	r24, 0x04	; 4
     e82:	80 f3       	brcs	.-32     	; 0xe64 <Receive_password_1st_entry_from_HMI_ECU+0x14>
	{
		(*password_1st_entry_byte_ptr) = UART_recieveByte();
	}
}
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <Receive_password_2nd_entry_from_HMI_ECU>:
void Receive_password_2nd_entry_from_HMI_ECU(uint8 *password_2nd_entry_byte_ptr)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	00 d0       	rcall	.+0      	; 0xe96 <Receive_password_2nd_entry_from_HMI_ECU+0x6>
     e96:	0f 92       	push	r0
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	9b 83       	std	Y+3, r25	; 0x03
     e9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0; i < 4; i++, password_2nd_entry_byte_ptr++)
     ea0:	19 82       	std	Y+1, r1	; 0x01
     ea2:	0d c0       	rjmp	.+26     	; 0xebe <Receive_password_2nd_entry_from_HMI_ECU+0x2e>
	{
		(*password_2nd_entry_byte_ptr) = UART_recieveByte();
     ea4:	0e 94 15 10 	call	0x202a	; 0x202a <UART_recieveByte>
     ea8:	ea 81       	ldd	r30, Y+2	; 0x02
     eaa:	fb 81       	ldd	r31, Y+3	; 0x03
     eac:	80 83       	st	Z, r24
	}
}
void Receive_password_2nd_entry_from_HMI_ECU(uint8 *password_2nd_entry_byte_ptr)
{
	uint8 i;
	for (i = 0; i < 4; i++, password_2nd_entry_byte_ptr++)
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	9b 81       	ldd	r25, Y+3	; 0x03
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	9b 83       	std	Y+3, r25	; 0x03
     ebc:	8a 83       	std	Y+2, r24	; 0x02
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	84 30       	cpi	r24, 0x04	; 4
     ec2:	80 f3       	brcs	.-32     	; 0xea4 <Receive_password_2nd_entry_from_HMI_ECU+0x14>
	{
		(*password_2nd_entry_byte_ptr) = UART_recieveByte();
	}
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <Receive_Entered_password_from_HMI_ECU>:

void Receive_Entered_password_from_HMI_ECU(uint8 *Entered_password_byte_ptr)
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <Receive_Entered_password_from_HMI_ECU+0x6>
     ed6:	0f 92       	push	r0
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	9b 83       	std	Y+3, r25	; 0x03
     ede:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0; i < 4; i++, Entered_password_byte_ptr++)
     ee0:	19 82       	std	Y+1, r1	; 0x01
     ee2:	0d c0       	rjmp	.+26     	; 0xefe <Receive_Entered_password_from_HMI_ECU+0x2e>
	{
		(*Entered_password_byte_ptr) = UART_recieveByte();
     ee4:	0e 94 15 10 	call	0x202a	; 0x202a <UART_recieveByte>
     ee8:	ea 81       	ldd	r30, Y+2	; 0x02
     eea:	fb 81       	ldd	r31, Y+3	; 0x03
     eec:	80 83       	st	Z, r24
}

void Receive_Entered_password_from_HMI_ECU(uint8 *Entered_password_byte_ptr)
{
	uint8 i;
	for (i = 0; i < 4; i++, Entered_password_byte_ptr++)
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	9b 83       	std	Y+3, r25	; 0x03
     efc:	8a 83       	std	Y+2, r24	; 0x02
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	84 30       	cpi	r24, 0x04	; 4
     f02:	80 f3       	brcs	.-32     	; 0xee4 <Receive_Entered_password_from_HMI_ECU+0x14>
	{
		(*Entered_password_byte_ptr) = UART_recieveByte();
	}
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <Receive_password_two_entries>:

void Receive_password_two_entries(void)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
	do
	{
		Receive_password_1st_entry_from_HMI_ECU(password_1st_entry_1st_byte_address);
     f18:	80 91 90 01 	lds	r24, 0x0190
     f1c:	90 91 91 01 	lds	r25, 0x0191
     f20:	0e 94 28 07 	call	0xe50	; 0xe50 <Receive_password_1st_entry_from_HMI_ECU>
		Receive_password_2nd_entry_from_HMI_ECU(password_2nd_entry_1st_byte_address);
     f24:	80 91 92 01 	lds	r24, 0x0192
     f28:	90 91 93 01 	lds	r25, 0x0193
     f2c:	0e 94 48 07 	call	0xe90	; 0xe90 <Receive_password_2nd_entry_from_HMI_ECU>
		if (password_1st_entry != password_2nd_entry)
     f30:	20 91 c9 01 	lds	r18, 0x01C9
     f34:	30 91 ca 01 	lds	r19, 0x01CA
     f38:	40 91 cb 01 	lds	r20, 0x01CB
     f3c:	50 91 cc 01 	lds	r21, 0x01CC
     f40:	80 91 c4 01 	lds	r24, 0x01C4
     f44:	90 91 c5 01 	lds	r25, 0x01C5
     f48:	a0 91 c6 01 	lds	r26, 0x01C6
     f4c:	b0 91 c7 01 	lds	r27, 0x01C7
     f50:	28 17       	cp	r18, r24
     f52:	39 07       	cpc	r19, r25
     f54:	4a 07       	cpc	r20, r26
     f56:	5b 07       	cpc	r21, r27
     f58:	69 f0       	breq	.+26     	; 0xf74 <Receive_password_two_entries+0x64>
		{
			strcpy((char*) Passwords_matching_status_message, not_matched_message);
     f5a:	20 91 98 01 	lds	r18, 0x0198
     f5e:	30 91 99 01 	lds	r19, 0x0199
     f62:	8d ec       	ldi	r24, 0xCD	; 205
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	b9 01       	movw	r22, r18
     f68:	0e 94 dd 10 	call	0x21ba	; 0x21ba <strcpy>
			UART_sendString((const uint8*) Passwords_matching_status_message);
     f6c:	8d ec       	ldi	r24, 0xCD	; 205
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	0e 94 25 10 	call	0x204a	; 0x204a <UART_sendString>
		}
	} while (password_1st_entry != password_2nd_entry);
     f74:	20 91 c9 01 	lds	r18, 0x01C9
     f78:	30 91 ca 01 	lds	r19, 0x01CA
     f7c:	40 91 cb 01 	lds	r20, 0x01CB
     f80:	50 91 cc 01 	lds	r21, 0x01CC
     f84:	80 91 c4 01 	lds	r24, 0x01C4
     f88:	90 91 c5 01 	lds	r25, 0x01C5
     f8c:	a0 91 c6 01 	lds	r26, 0x01C6
     f90:	b0 91 c7 01 	lds	r27, 0x01C7
     f94:	28 17       	cp	r18, r24
     f96:	39 07       	cpc	r19, r25
     f98:	4a 07       	cpc	r20, r26
     f9a:	5b 07       	cpc	r21, r27
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <Receive_password_two_entries+0x90>
     f9e:	bc cf       	rjmp	.-136    	; 0xf18 <Receive_password_two_entries+0x8>
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <Save_password_to_EEPROM>:

void Save_password_to_EEPROM(uint8 *password_2nd_entry_byte_ptr)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	61 97       	sbiw	r28, 0x11	; 17
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	99 8b       	std	Y+17, r25	; 0x11
     fbc:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i = 0; i < 4; i++, password_2nd_entry_byte_ptr++)
     fbe:	1f 86       	std	Y+15, r1	; 0x0f
     fc0:	8a c0       	rjmp	.+276    	; 0x10d6 <Save_password_to_EEPROM+0x130>
	{
		EEPROM_writeByte(password_address_in_EEPROM[i], *password_2nd_entry_byte_ptr);
     fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	fc 01       	movw	r30, r24
     fce:	e8 57       	subi	r30, 0x78	; 120
     fd0:	fe 4f       	sbci	r31, 0xFE	; 254
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	e8 89       	ldd	r30, Y+16	; 0x10
     fd8:	f9 89       	ldd	r31, Y+17	; 0x11
     fda:	20 81       	ld	r18, Z
     fdc:	62 2f       	mov	r22, r18
     fde:	0e 94 06 0c 	call	0x180c	; 0x180c <EEPROM_writeByte>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a0 e2       	ldi	r26, 0x20	; 32
     fe8:	b1 e4       	ldi	r27, 0x41	; 65
     fea:	8b 87       	std	Y+11, r24	; 0x0b
     fec:	9c 87       	std	Y+12, r25	; 0x0c
     fee:	ad 87       	std	Y+13, r26	; 0x0d
     ff0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	4a ef       	ldi	r20, 0xFA	; 250
    1000:	54 e4       	ldi	r21, 0x44	; 68
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	8f 83       	std	Y+7, r24	; 0x07
    100c:	98 87       	std	Y+8, r25	; 0x08
    100e:	a9 87       	std	Y+9, r26	; 0x09
    1010:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1026:	88 23       	and	r24, r24
    1028:	2c f4       	brge	.+10     	; 0x1034 <Save_password_to_EEPROM+0x8e>
		__ticks = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
    1032:	3f c0       	rjmp	.+126    	; 0x10b2 <Save_password_to_EEPROM+0x10c>
	else if (__tmp > 65535)
    1034:	6f 81       	ldd	r22, Y+7	; 0x07
    1036:	78 85       	ldd	r23, Y+8	; 0x08
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	3f ef       	ldi	r19, 0xFF	; 255
    1040:	4f e7       	ldi	r20, 0x7F	; 127
    1042:	57 e4       	ldi	r21, 0x47	; 71
    1044:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1048:	18 16       	cp	r1, r24
    104a:	4c f5       	brge	.+82     	; 0x109e <Save_password_to_EEPROM+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104c:	6b 85       	ldd	r22, Y+11	; 0x0b
    104e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1050:	8d 85       	ldd	r24, Y+13	; 0x0d
    1052:	9e 85       	ldd	r25, Y+14	; 0x0e
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e2       	ldi	r20, 0x20	; 32
    105a:	51 e4       	ldi	r21, 0x41	; 65
    105c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	0f c0       	rjmp	.+30     	; 0x1094 <Save_password_to_EEPROM+0xee>
    1076:	88 ec       	ldi	r24, 0xC8	; 200
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <Save_password_to_EEPROM+0xdc>
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	9e 83       	std	Y+6, r25	; 0x06
    1092:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	69 f7       	brne	.-38     	; 0x1076 <Save_password_to_EEPROM+0xd0>
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <Save_password_to_EEPROM+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109e:	6f 81       	ldd	r22, Y+7	; 0x07
    10a0:	78 85       	ldd	r23, Y+8	; 0x08
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	9e 83       	std	Y+6, r25	; 0x06
    10b0:	8d 83       	std	Y+5, r24	; 0x05
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <Save_password_to_EEPROM+0x118>
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 83       	std	Y+1, r24	; 0x01
}

void Save_password_to_EEPROM(uint8 *password_2nd_entry_byte_ptr)
{
	uint8 i;
	for (i = 0; i < 4; i++, password_2nd_entry_byte_ptr++)
    10c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
    10ca:	8f 87       	std	Y+15, r24	; 0x0f
    10cc:	88 89       	ldd	r24, Y+16	; 0x10
    10ce:	99 89       	ldd	r25, Y+17	; 0x11
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	99 8b       	std	Y+17, r25	; 0x11
    10d4:	88 8b       	std	Y+16, r24	; 0x10
    10d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d8:	84 30       	cpi	r24, 0x04	; 4
    10da:	08 f4       	brcc	.+2      	; 0x10de <Save_password_to_EEPROM+0x138>
    10dc:	72 cf       	rjmp	.-284    	; 0xfc2 <Save_password_to_EEPROM+0x1c>
	{
		EEPROM_writeByte(password_address_in_EEPROM[i], *password_2nd_entry_byte_ptr);
		_delay_ms(10);
	}
}
    10de:	61 96       	adiw	r28, 0x11	; 17
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <Read_password_from_EEPROM>:
void Read_password_from_EEPROM(uint8 *confirmed_password_ptr)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	61 97       	sbiw	r28, 0x11	; 17
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	99 8b       	std	Y+17, r25	; 0x11
    1106:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i = 0; i < 4; i++, confirmed_password_ptr++)
    1108:	1f 86       	std	Y+15, r1	; 0x0f
    110a:	89 c0       	rjmp	.+274    	; 0x121e <Read_password_from_EEPROM+0x12e>
	{
		EEPROM_readByte(password_address_in_EEPROM[i], confirmed_password_ptr);
    110c:	8f 85       	ldd	r24, Y+15	; 0x0f
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	fc 01       	movw	r30, r24
    1118:	e8 57       	subi	r30, 0x78	; 120
    111a:	fe 4f       	sbci	r31, 0xFE	; 254
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	28 89       	ldd	r18, Y+16	; 0x10
    1122:	39 89       	ldd	r19, Y+17	; 0x11
    1124:	b9 01       	movw	r22, r18
    1126:	0e 94 47 0c 	call	0x188e	; 0x188e <EEPROM_readByte>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a0 e2       	ldi	r26, 0x20	; 32
    1130:	b1 e4       	ldi	r27, 0x41	; 65
    1132:	8b 87       	std	Y+11, r24	; 0x0b
    1134:	9c 87       	std	Y+12, r25	; 0x0c
    1136:	ad 87       	std	Y+13, r26	; 0x0d
    1138:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113a:	6b 85       	ldd	r22, Y+11	; 0x0b
    113c:	7c 85       	ldd	r23, Y+12	; 0x0c
    113e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1140:	9e 85       	ldd	r25, Y+14	; 0x0e
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	4a ef       	ldi	r20, 0xFA	; 250
    1148:	54 e4       	ldi	r21, 0x44	; 68
    114a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	8f 83       	std	Y+7, r24	; 0x07
    1154:	98 87       	std	Y+8, r25	; 0x08
    1156:	a9 87       	std	Y+9, r26	; 0x09
    1158:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    115a:	6f 81       	ldd	r22, Y+7	; 0x07
    115c:	78 85       	ldd	r23, Y+8	; 0x08
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e8       	ldi	r20, 0x80	; 128
    1168:	5f e3       	ldi	r21, 0x3F	; 63
    116a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    116e:	88 23       	and	r24, r24
    1170:	2c f4       	brge	.+10     	; 0x117c <Read_password_from_EEPROM+0x8c>
		__ticks = 1;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	3f c0       	rjmp	.+126    	; 0x11fa <Read_password_from_EEPROM+0x10a>
	else if (__tmp > 65535)
    117c:	6f 81       	ldd	r22, Y+7	; 0x07
    117e:	78 85       	ldd	r23, Y+8	; 0x08
    1180:	89 85       	ldd	r24, Y+9	; 0x09
    1182:	9a 85       	ldd	r25, Y+10	; 0x0a
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	3f ef       	ldi	r19, 0xFF	; 255
    1188:	4f e7       	ldi	r20, 0x7F	; 127
    118a:	57 e4       	ldi	r21, 0x47	; 71
    118c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1190:	18 16       	cp	r1, r24
    1192:	4c f5       	brge	.+82     	; 0x11e6 <Read_password_from_EEPROM+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1194:	6b 85       	ldd	r22, Y+11	; 0x0b
    1196:	7c 85       	ldd	r23, Y+12	; 0x0c
    1198:	8d 85       	ldd	r24, Y+13	; 0x0d
    119a:	9e 85       	ldd	r25, Y+14	; 0x0e
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e2       	ldi	r20, 0x20	; 32
    11a2:	51 e4       	ldi	r21, 0x41	; 65
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	bc 01       	movw	r22, r24
    11ae:	cd 01       	movw	r24, r26
    11b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	9e 83       	std	Y+6, r25	; 0x06
    11ba:	8d 83       	std	Y+5, r24	; 0x05
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <Read_password_from_EEPROM+0xec>
    11be:	88 ec       	ldi	r24, 0xC8	; 200
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	9c 83       	std	Y+4, r25	; 0x04
    11c4:	8b 83       	std	Y+3, r24	; 0x03
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <Read_password_from_EEPROM+0xda>
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
    11d4:	9e 81       	ldd	r25, Y+6	; 0x06
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	9e 83       	std	Y+6, r25	; 0x06
    11da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	9e 81       	ldd	r25, Y+6	; 0x06
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	69 f7       	brne	.-38     	; 0x11be <Read_password_from_EEPROM+0xce>
    11e4:	14 c0       	rjmp	.+40     	; 0x120e <Read_password_from_EEPROM+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e6:	6f 81       	ldd	r22, Y+7	; 0x07
    11e8:	78 85       	ldd	r23, Y+8	; 0x08
    11ea:	89 85       	ldd	r24, Y+9	; 0x09
    11ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	f1 f7       	brne	.-4      	; 0x1206 <Read_password_from_EEPROM+0x116>
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
	}
}
void Read_password_from_EEPROM(uint8 *confirmed_password_ptr)
{
	uint8 i;
	for (i = 0; i < 4; i++, confirmed_password_ptr++)
    120e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1210:	8f 5f       	subi	r24, 0xFF	; 255
    1212:	8f 87       	std	Y+15, r24	; 0x0f
    1214:	88 89       	ldd	r24, Y+16	; 0x10
    1216:	99 89       	ldd	r25, Y+17	; 0x11
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	99 8b       	std	Y+17, r25	; 0x11
    121c:	88 8b       	std	Y+16, r24	; 0x10
    121e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1220:	84 30       	cpi	r24, 0x04	; 4
    1222:	08 f4       	brcc	.+2      	; 0x1226 <Read_password_from_EEPROM+0x136>
    1224:	73 cf       	rjmp	.-282    	; 0x110c <Read_password_from_EEPROM+0x1c>
	{
		EEPROM_readByte(password_address_in_EEPROM[i], confirmed_password_ptr);
		_delay_ms(10);
	}
}
    1226:	61 96       	adiw	r28, 0x11	; 17
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <start_password_3_trials>:

void start_password_3_trials(void)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	0f 92       	push	r0
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for (i = 0; i < 3; i++)
    1242:	19 82       	std	Y+1, r1	; 0x01
    1244:	26 c0       	rjmp	.+76     	; 0x1292 <start_password_3_trials+0x5a>
	{
		Receive_Entered_password_from_HMI_ECU(Entered_password_1st_byte_address);
    1246:	80 91 94 01 	lds	r24, 0x0194
    124a:	90 91 95 01 	lds	r25, 0x0195
    124e:	0e 94 68 07 	call	0xed0	; 0xed0 <Receive_Entered_password_from_HMI_ECU>
		if (Entered_password != Confirmed_password)
    1252:	20 91 c0 01 	lds	r18, 0x01C0
    1256:	30 91 c1 01 	lds	r19, 0x01C1
    125a:	40 91 c2 01 	lds	r20, 0x01C2
    125e:	50 91 c3 01 	lds	r21, 0x01C3
    1262:	80 91 db 01 	lds	r24, 0x01DB
    1266:	90 91 dc 01 	lds	r25, 0x01DC
    126a:	a0 91 dd 01 	lds	r26, 0x01DD
    126e:	b0 91 de 01 	lds	r27, 0x01DE
    1272:	28 17       	cp	r18, r24
    1274:	39 07       	cpc	r19, r25
    1276:	4a 07       	cpc	r20, r26
    1278:	5b 07       	cpc	r21, r27
    127a:	39 f0       	breq	.+14     	; 0x128a <start_password_3_trials+0x52>
			UART_sendByte(WRONG_PASSWORD);
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	0e 94 01 10 	call	0x2002	; 0x2002 <UART_sendByte>
}

void start_password_3_trials(void)
{
	uint8 i;
	for (i = 0; i < 3; i++)
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <start_password_3_trials+0x5a>
		Receive_Entered_password_from_HMI_ECU(Entered_password_1st_byte_address);
		if (Entered_password != Confirmed_password)
			UART_sendByte(WRONG_PASSWORD);
		else
		{
			UART_sendByte(CORRECT_PASSWORD);
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	0e 94 01 10 	call	0x2002	; 0x2002 <UART_sendByte>
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <start_password_3_trials+0x60>
}

void start_password_3_trials(void)
{
	uint8 i;
	for (i = 0; i < 3; i++)
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	b8 f2       	brcs	.-82     	; 0x1246 <start_password_3_trials+0xe>
		{
			UART_sendByte(CORRECT_PASSWORD);
			return;
		}
	}
}
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <Receive_the_chosen_option_from_HMI_ECU>:

uint8 Receive_the_chosen_option_from_HMI_ECU(void)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
	return UART_recieveByte();
    12a8:	0e 94 15 10 	call	0x202a	; 0x202a <UART_recieveByte>
}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <Unlocking_Door_Call_Back_Function>:

void Unlocking_Door_Call_Back_Function(void)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	g_Timer1_tick++;
    12ba:	80 91 b8 01 	lds	r24, 0x01B8
    12be:	8f 5f       	subi	r24, 0xFF	; 255
    12c0:	80 93 b8 01 	sts	0x01B8, r24
	if (g_Timer1_tick == 2)
    12c4:	80 91 b8 01 	lds	r24, 0x01B8
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	81 f4       	brne	.+32     	; 0x12ec <Unlocking_Door_Call_Back_Function+0x3a>
	{
		DcMotor_Rotate(STOP, 0);
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <DcMotor_Rotate>
		g_Timer1_tick = 0;
    12d4:	10 92 b8 01 	sts	0x01B8, r1
		Timer1_deInit();
    12d8:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <Timer1_deInit>
		Timer1_setCallBack(Hold_Door_Call_Back_Function);
    12dc:	89 e7       	ldi	r24, 0x79	; 121
    12de:	99 e0       	ldi	r25, 0x09	; 9
    12e0:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <Timer1_setCallBack>
		Timer1_init(&Holding_Door_Configurations);
    12e4:	87 ea       	ldi	r24, 0xA7	; 167
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <Timer1_init>
	}

}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <Hold_Door_Call_Back_Function>:

void Hold_Door_Call_Back_Function(void)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(ACW, 100);
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	64 e6       	ldi	r22, 0x64	; 100
    12fe:	0e 94 c9 0c 	call	0x1992	; 0x1992 <DcMotor_Rotate>
	Timer1_deInit();
    1302:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <Timer1_deInit>
	Timer1_setCallBack(Locking_Door_Call_Back_Function);
    1306:	8e e8       	ldi	r24, 0x8E	; 142
    1308:	99 e0       	ldi	r25, 0x09	; 9
    130a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <Timer1_setCallBack>
	Timer1_init(&LockingandUnlocking_Door_Configurations);
    130e:	81 ea       	ldi	r24, 0xA1	; 161
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <Timer1_init>
}
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <Locking_Door_Call_Back_Function>:

void Locking_Door_Call_Back_Function(void)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
	g_Timer1_tick++;
    1324:	80 91 b8 01 	lds	r24, 0x01B8
    1328:	8f 5f       	subi	r24, 0xFF	; 255
    132a:	80 93 b8 01 	sts	0x01B8, r24
	if (g_Timer1_tick == 2)
    132e:	80 91 b8 01 	lds	r24, 0x01B8
    1332:	82 30       	cpi	r24, 0x02	; 2
    1334:	41 f4       	brne	.+16     	; 0x1346 <Locking_Door_Call_Back_Function+0x2a>
	{
		DcMotor_Rotate(STOP, 0);
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	0e 94 c9 0c 	call	0x1992	; 0x1992 <DcMotor_Rotate>
		g_Timer1_tick = 0;
    133e:	10 92 b8 01 	sts	0x01B8, r1
		Timer1_deInit();
    1342:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <Timer1_deInit>
	}
}
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <Buzzer_Call_Back_Function>:

void Buzzer_Call_Back_Function(void)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
	g_Timer1_tick++;
    1354:	80 91 b8 01 	lds	r24, 0x01B8
    1358:	8f 5f       	subi	r24, 0xFF	; 255
    135a:	80 93 b8 01 	sts	0x01B8, r24
	if (g_Timer1_tick == 8)
    135e:	80 91 b8 01 	lds	r24, 0x01B8
    1362:	88 30       	cpi	r24, 0x08	; 8
    1364:	31 f4       	brne	.+12     	; 0x1372 <Buzzer_Call_Back_Function+0x26>
	{
		Buzzer_off();
    1366:	0e 94 6d 06 	call	0xcda	; 0xcda <Buzzer_off>
		g_Timer1_tick = 0;
    136a:	10 92 b8 01 	sts	0x01B8, r1
		Timer1_deInit();
    136e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <Timer1_deInit>
	}
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <__vector_11>:
/************************************************************************************************************/

/*******************************************Interrupt_Service_Routines***************************************/

ISR(TIMER0_OVF_vect)
{
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0_Call_Back_Ptr != NULL_PTR)
    13a2:	80 91 b9 01 	lds	r24, 0x01B9
    13a6:	90 91 ba 01 	lds	r25, 0x01BA
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	51 f0       	breq	.+20     	; 0x13c2 <__vector_11+0x4a>
	{
		(*g_Timer0_Call_Back_Ptr)(); /*Call the Call Back function in the application*/
    13ae:	e0 91 b9 01 	lds	r30, 0x01B9
    13b2:	f0 91 ba 01 	lds	r31, 0x01BA
    13b6:	09 95       	icall
		TCNT0.Byte = g_Timer0_OVF_reset_value; /*making the timer start counting from the specified initial value and not the zero*/
    13b8:	e2 e5       	ldi	r30, 0x52	; 82
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 91 bb 01 	lds	r24, 0x01BB
    13c0:	80 83       	st	Z, r24
	}
}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	ff 91       	pop	r31
    13c8:	ef 91       	pop	r30
    13ca:	bf 91       	pop	r27
    13cc:	af 91       	pop	r26
    13ce:	9f 91       	pop	r25
    13d0:	8f 91       	pop	r24
    13d2:	7f 91       	pop	r23
    13d4:	6f 91       	pop	r22
    13d6:	5f 91       	pop	r21
    13d8:	4f 91       	pop	r20
    13da:	3f 91       	pop	r19
    13dc:	2f 91       	pop	r18
    13de:	0f 90       	pop	r0
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	0f 90       	pop	r0
    13e4:	1f 90       	pop	r1
    13e6:	18 95       	reti

000013e8 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    13e8:	1f 92       	push	r1
    13ea:	0f 92       	push	r0
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	0f 92       	push	r0
    13f0:	11 24       	eor	r1, r1
    13f2:	2f 93       	push	r18
    13f4:	3f 93       	push	r19
    13f6:	4f 93       	push	r20
    13f8:	5f 93       	push	r21
    13fa:	6f 93       	push	r22
    13fc:	7f 93       	push	r23
    13fe:	8f 93       	push	r24
    1400:	9f 93       	push	r25
    1402:	af 93       	push	r26
    1404:	bf 93       	push	r27
    1406:	ef 93       	push	r30
    1408:	ff 93       	push	r31
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0_Call_Back_Ptr != NULL_PTR)
    1412:	80 91 b9 01 	lds	r24, 0x01B9
    1416:	90 91 ba 01 	lds	r25, 0x01BA
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	29 f0       	breq	.+10     	; 0x1428 <__vector_10+0x40>
		(*g_Timer0_Call_Back_Ptr)(); /*Call the Call Back function in the application*/
    141e:	e0 91 b9 01 	lds	r30, 0x01B9
    1422:	f0 91 ba 01 	lds	r31, 0x01BA
    1426:	09 95       	icall
}
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	ff 91       	pop	r31
    142e:	ef 91       	pop	r30
    1430:	bf 91       	pop	r27
    1432:	af 91       	pop	r26
    1434:	9f 91       	pop	r25
    1436:	8f 91       	pop	r24
    1438:	7f 91       	pop	r23
    143a:	6f 91       	pop	r22
    143c:	5f 91       	pop	r21
    143e:	4f 91       	pop	r20
    1440:	3f 91       	pop	r19
    1442:	2f 91       	pop	r18
    1444:	0f 90       	pop	r0
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	0f 90       	pop	r0
    144a:	1f 90       	pop	r1
    144c:	18 95       	reti

0000144e <Timer0_init>:
/************************************************************************************************************/

/*****************************************TIMER0_FUNCTIONS_DEFINITIONS**************************************/

void Timer0_init(const Timer0_ConfigType *Config_Ptr)
{
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <Timer0_init+0xa>
    1458:	00 d0       	rcall	.+0      	; 0x145a <Timer0_init+0xc>
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	9a 83       	std	Y+2, r25	; 0x02
    1460:	89 83       	std	Y+1, r24	; 0x01
	TCNT0.Byte = Config_Ptr->initial_value; /*setting initial value*/
    1462:	a2 e5       	ldi	r26, 0x52	; 82
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e9 81       	ldd	r30, Y+1	; 0x01
    1468:	fa 81       	ldd	r31, Y+2	; 0x02
    146a:	80 81       	ld	r24, Z
    146c:	8c 93       	st	X, r24

	/*setting the specified mode*/
	TCCR0.Bits.WGM00 = ((Config_Ptr->mode) & 0x01);
    146e:	a3 e5       	ldi	r26, 0x53	; 83
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e9 81       	ldd	r30, Y+1	; 0x01
    1474:	fa 81       	ldd	r31, Y+2	; 0x02
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	81 70       	andi	r24, 0x01	; 1
    147a:	81 70       	andi	r24, 0x01	; 1
    147c:	81 70       	andi	r24, 0x01	; 1
    147e:	81 70       	andi	r24, 0x01	; 1
    1480:	98 2f       	mov	r25, r24
    1482:	92 95       	swap	r25
    1484:	99 0f       	add	r25, r25
    1486:	99 0f       	add	r25, r25
    1488:	90 7c       	andi	r25, 0xC0	; 192
    148a:	8c 91       	ld	r24, X
    148c:	8f 7b       	andi	r24, 0xBF	; 191
    148e:	89 2b       	or	r24, r25
    1490:	8c 93       	st	X, r24
	TCCR0.Bits.WGM01 = ((Config_Ptr->mode) & 0x02);
    1492:	e3 e5       	ldi	r30, 0x53	; 83
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	87 7f       	andi	r24, 0xF7	; 247
    149a:	80 83       	st	Z, r24

	TCCR0.Byte = (TCCR0.Byte & 0xF8) | (Config_Ptr->prescaler); /*setting the prescaler*/
    149c:	a3 e5       	ldi	r26, 0x53	; 83
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e3 e5       	ldi	r30, 0x53	; 83
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	98 2f       	mov	r25, r24
    14a8:	98 7f       	andi	r25, 0xF8	; 248
    14aa:	e9 81       	ldd	r30, Y+1	; 0x01
    14ac:	fa 81       	ldd	r31, Y+2	; 0x02
    14ae:	81 81       	ldd	r24, Z+1	; 0x01
    14b0:	89 2b       	or	r24, r25
    14b2:	8c 93       	st	X, r24

	switch (Config_Ptr->mode)
    14b4:	e9 81       	ldd	r30, Y+1	; 0x01
    14b6:	fa 81       	ldd	r31, Y+2	; 0x02
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	3c 83       	std	Y+4, r19	; 0x04
    14c0:	2b 83       	std	Y+3, r18	; 0x03
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	91 05       	cpc	r25, r1
    14ca:	d9 f0       	breq	.+54     	; 0x1502 <Timer0_init+0xb4>
    14cc:	eb 81       	ldd	r30, Y+3	; 0x03
    14ce:	fc 81       	ldd	r31, Y+4	; 0x04
    14d0:	e3 30       	cpi	r30, 0x03	; 3
    14d2:	f1 05       	cpc	r31, r1
    14d4:	61 f1       	breq	.+88     	; 0x152e <Timer0_init+0xe0>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	21 15       	cp	r18, r1
    14dc:	31 05       	cpc	r19, r1
    14de:	09 f0       	breq	.+2      	; 0x14e2 <Timer0_init+0x94>
    14e0:	4e c0       	rjmp	.+156    	; 0x157e <Timer0_init+0x130>
	{
	case TIMER0_NORMAL_MODE:
		TCCR0.Bits.FOC0 = 1;
    14e2:	e3 e5       	ldi	r30, 0x53	; 83
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 68       	ori	r24, 0x80	; 128
    14ea:	80 83       	st	Z, r24
		g_Timer0_OVF_reset_value = Config_Ptr->initial_value;
    14ec:	e9 81       	ldd	r30, Y+1	; 0x01
    14ee:	fa 81       	ldd	r31, Y+2	; 0x02
    14f0:	80 81       	ld	r24, Z
    14f2:	80 93 bb 01 	sts	0x01BB, r24
		TIMSK.Bits.TOIE0 = 1;
    14f6:	e9 e5       	ldi	r30, 0x59	; 89
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	81 60       	ori	r24, 0x01	; 1
    14fe:	80 83       	st	Z, r24
    1500:	3e c0       	rjmp	.+124    	; 0x157e <Timer0_init+0x130>
		break;
	case TIMER0_CTC_MODE:
		TCCR0.Bits.FOC0 = 1;
    1502:	e3 e5       	ldi	r30, 0x53	; 83
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 68       	ori	r24, 0x80	; 128
    150a:	80 83       	st	Z, r24
		OCR0.Byte = Config_Ptr->compare_value;
    150c:	ac e5       	ldi	r26, 0x5C	; 92
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e9 81       	ldd	r30, Y+1	; 0x01
    1512:	fa 81       	ldd	r31, Y+2	; 0x02
    1514:	84 81       	ldd	r24, Z+4	; 0x04
    1516:	8c 93       	st	X, r24
		TCCR0.Bits.COM01 = 1;
    1518:	e3 e5       	ldi	r30, 0x53	; 83
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	80 62       	ori	r24, 0x20	; 32
    1520:	80 83       	st	Z, r24
		TIMSK.Bits.OCIE0 = 1;
    1522:	e9 e5       	ldi	r30, 0x59	; 89
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	82 60       	ori	r24, 0x02	; 2
    152a:	80 83       	st	Z, r24
    152c:	28 c0       	rjmp	.+80     	; 0x157e <Timer0_init+0x130>
		break;
	case TIMER0_FAST_PWM_MODE: /*that is the mode used in the DC motor driver*/
		OCR0.Byte = (Config_Ptr->duty_cycle) * 2.55;
    152e:	0c e5       	ldi	r16, 0x5C	; 92
    1530:	10 e0       	ldi	r17, 0x00	; 0
    1532:	e9 81       	ldd	r30, Y+1	; 0x01
    1534:	fa 81       	ldd	r31, Y+2	; 0x02
    1536:	83 81       	ldd	r24, Z+3	; 0x03
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	aa 27       	eor	r26, r26
    153e:	97 fd       	sbrc	r25, 7
    1540:	a0 95       	com	r26
    1542:	ba 2f       	mov	r27, r26
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	23 e3       	ldi	r18, 0x33	; 51
    1556:	33 e3       	ldi	r19, 0x33	; 51
    1558:	43 e2       	ldi	r20, 0x23	; 35
    155a:	50 e4       	ldi	r21, 0x40	; 64
    155c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	f8 01       	movw	r30, r16
    1572:	80 83       	st	Z, r24
		TCCR0.Bits.COM01 = 1;
    1574:	e3 e5       	ldi	r30, 0x53	; 83
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	80 62       	ori	r24, 0x20	; 32
    157c:	80 83       	st	Z, r24
		break;
	}
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	08 95       	ret

00001590 <Timer0_deInit>:
void Timer0_deInit(void)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	/*Clearing all Timer1 registers*/
	TCNT0.Byte = 0;
    1598:	e2 e5       	ldi	r30, 0x52	; 82
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	10 82       	st	Z, r1
	TCCR0.Byte = 0; /*here we cleared the bits CS02:0 so there is no clock source and the timer is stopped now*/
    159e:	e3 e5       	ldi	r30, 0x53	; 83
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	10 82       	st	Z, r1

	/*Disable both compare match and overflow interrupts*/
	TIMSK.Bits.OCIE0 = 0;
    15a4:	e9 e5       	ldi	r30, 0x59	; 89
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8d 7f       	andi	r24, 0xFD	; 253
    15ac:	80 83       	st	Z, r24
	TIMSK.Bits.TOIE0 = 0;
    15ae:	e9 e5       	ldi	r30, 0x59	; 89
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8e 7f       	andi	r24, 0xFE	; 254
    15b6:	80 83       	st	Z, r24

	g_Timer0_Call_Back_Ptr = NULL_PTR; /*Reset the global pointer value*/
    15b8:	10 92 ba 01 	sts	0x01BA, r1
    15bc:	10 92 b9 01 	sts	0x01B9, r1
}
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <Timer0_setCallBack>:

void Timer0_setCallBack(void (*a_ptr)(void))
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <Timer0_setCallBack+0x6>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01
	g_Timer0_Call_Back_Ptr = a_ptr; /*Saving the address of the Call back function in a global variable*/
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	90 93 ba 01 	sts	0x01BA, r25
    15dc:	80 93 b9 01 	sts	0x01B9, r24
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <__vector_9>:
/************************************************************************************************************/

/*******************************************Interrupt_Service_Routines***************************************/

ISR(TIMER1_OVF_vect)
{
    15ea:	1f 92       	push	r1
    15ec:	0f 92       	push	r0
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	0f 92       	push	r0
    15f2:	11 24       	eor	r1, r1
    15f4:	2f 93       	push	r18
    15f6:	3f 93       	push	r19
    15f8:	4f 93       	push	r20
    15fa:	5f 93       	push	r21
    15fc:	6f 93       	push	r22
    15fe:	7f 93       	push	r23
    1600:	8f 93       	push	r24
    1602:	9f 93       	push	r25
    1604:	af 93       	push	r26
    1606:	bf 93       	push	r27
    1608:	ef 93       	push	r30
    160a:	ff 93       	push	r31
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_Call_Back_Ptr != NULL_PTR)
    1614:	80 91 bc 01 	lds	r24, 0x01BC
    1618:	90 91 bd 01 	lds	r25, 0x01BD
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	69 f0       	breq	.+26     	; 0x163a <__vector_9+0x50>
	{
		(*g_Timer1_Call_Back_Ptr)(); /*Call the Call Back function in the application*/
    1620:	e0 91 bc 01 	lds	r30, 0x01BC
    1624:	f0 91 bd 01 	lds	r31, 0x01BD
    1628:	09 95       	icall
		TCNT1.TwoBytes = g_Timer1_OVF_reset_value; /*making the timer start counting from the specified initial value and not the zero*/
    162a:	ec e4       	ldi	r30, 0x4C	; 76
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 91 be 01 	lds	r24, 0x01BE
    1632:	90 91 bf 01 	lds	r25, 0x01BF
    1636:	91 83       	std	Z+1, r25	; 0x01
    1638:	80 83       	st	Z, r24
	}
}
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	ff 91       	pop	r31
    1640:	ef 91       	pop	r30
    1642:	bf 91       	pop	r27
    1644:	af 91       	pop	r26
    1646:	9f 91       	pop	r25
    1648:	8f 91       	pop	r24
    164a:	7f 91       	pop	r23
    164c:	6f 91       	pop	r22
    164e:	5f 91       	pop	r21
    1650:	4f 91       	pop	r20
    1652:	3f 91       	pop	r19
    1654:	2f 91       	pop	r18
    1656:	0f 90       	pop	r0
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	0f 90       	pop	r0
    165c:	1f 90       	pop	r1
    165e:	18 95       	reti

00001660 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1660:	1f 92       	push	r1
    1662:	0f 92       	push	r0
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	0f 92       	push	r0
    1668:	11 24       	eor	r1, r1
    166a:	2f 93       	push	r18
    166c:	3f 93       	push	r19
    166e:	4f 93       	push	r20
    1670:	5f 93       	push	r21
    1672:	6f 93       	push	r22
    1674:	7f 93       	push	r23
    1676:	8f 93       	push	r24
    1678:	9f 93       	push	r25
    167a:	af 93       	push	r26
    167c:	bf 93       	push	r27
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_Call_Back_Ptr != NULL_PTR)
    168a:	80 91 bc 01 	lds	r24, 0x01BC
    168e:	90 91 bd 01 	lds	r25, 0x01BD
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	29 f0       	breq	.+10     	; 0x16a0 <__vector_7+0x40>
		(*g_Timer1_Call_Back_Ptr)(); /*Call the Call Back function in the application*/
    1696:	e0 91 bc 01 	lds	r30, 0x01BC
    169a:	f0 91 bd 01 	lds	r31, 0x01BD
    169e:	09 95       	icall
}
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	ff 91       	pop	r31
    16a6:	ef 91       	pop	r30
    16a8:	bf 91       	pop	r27
    16aa:	af 91       	pop	r26
    16ac:	9f 91       	pop	r25
    16ae:	8f 91       	pop	r24
    16b0:	7f 91       	pop	r23
    16b2:	6f 91       	pop	r22
    16b4:	5f 91       	pop	r21
    16b6:	4f 91       	pop	r20
    16b8:	3f 91       	pop	r19
    16ba:	2f 91       	pop	r18
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	0f 90       	pop	r0
    16c2:	1f 90       	pop	r1
    16c4:	18 95       	reti

000016c6 <Timer1_init>:
/***********************************************************************************************************/

/*****************************************TIMER1_FUNCTIONS_DEFINITIONS**************************************/

void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <Timer1_init+0x6>
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <Timer1_init+0x8>
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
	TCNT1.TwoBytes = Config_Ptr->initial_value; /*setting initial value*/
    16d6:	ac e4       	ldi	r26, 0x4C	; 76
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e9 81       	ldd	r30, Y+1	; 0x01
    16dc:	fa 81       	ldd	r31, Y+2	; 0x02
    16de:	80 81       	ld	r24, Z
    16e0:	91 81       	ldd	r25, Z+1	; 0x01
    16e2:	11 96       	adiw	r26, 0x01	; 1
    16e4:	9c 93       	st	X, r25
    16e6:	8e 93       	st	-X, r24

	if (Config_Ptr->mode == TIMER1_CTC_MODE)
    16e8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ea:	fa 81       	ldd	r31, Y+2	; 0x02
    16ec:	85 81       	ldd	r24, Z+5	; 0x05
    16ee:	84 30       	cpi	r24, 0x04	; 4
    16f0:	59 f4       	brne	.+22     	; 0x1708 <Timer1_init+0x42>
		OCR1A.TwoBytes = Config_Ptr->compare_value; /*setting compare value in case of compare mode only*/
    16f2:	ea e4       	ldi	r30, 0x4A	; 74
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	a9 81       	ldd	r26, Y+1	; 0x01
    16f8:	ba 81       	ldd	r27, Y+2	; 0x02
    16fa:	12 96       	adiw	r26, 0x02	; 2
    16fc:	8d 91       	ld	r24, X+
    16fe:	9c 91       	ld	r25, X
    1700:	13 97       	sbiw	r26, 0x03	; 3
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	80 83       	st	Z, r24
    1706:	08 c0       	rjmp	.+16     	; 0x1718 <Timer1_init+0x52>
	else
		g_Timer1_OVF_reset_value = Config_Ptr->initial_value; /*In case of OVF mode, store the initial value in a global variable to update the TCNT1 register with it in the ISR*/
    1708:	e9 81       	ldd	r30, Y+1	; 0x01
    170a:	fa 81       	ldd	r31, Y+2	; 0x02
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	90 93 bf 01 	sts	0x01BF, r25
    1714:	80 93 be 01 	sts	0x01BE, r24

	TCCR1A.Bits.FOC1A = 1; /*FOC1A bit is set to one in both modes*/
    1718:	ef e4       	ldi	r30, 0x4F	; 79
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	88 60       	ori	r24, 0x08	; 8
    1720:	80 83       	st	Z, r24

	TCCR1A.Byte = (TCCR1A.Byte & 0xFC) | ((Config_Ptr->mode) & 0x03); /*inserting the first two bits of the mode in bits WGM11 & WGM10*/
    1722:	af e4       	ldi	r26, 0x4F	; 79
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	ef e4       	ldi	r30, 0x4F	; 79
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	98 2f       	mov	r25, r24
    172e:	9c 7f       	andi	r25, 0xFC	; 252
    1730:	e9 81       	ldd	r30, Y+1	; 0x01
    1732:	fa 81       	ldd	r31, Y+2	; 0x02
    1734:	85 81       	ldd	r24, Z+5	; 0x05
    1736:	83 70       	andi	r24, 0x03	; 3
    1738:	89 2b       	or	r24, r25
    173a:	8c 93       	st	X, r24
	TCCR1B.Byte = (TCCR1B.Byte & 0xE7) | (((Config_Ptr->mode) & 0x0C) << 1); /*inserting the seconds two bits of the mode in bits WGM13 & WGM12*/
    173c:	ae e4       	ldi	r26, 0x4E	; 78
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ee e4       	ldi	r30, 0x4E	; 78
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	28 2f       	mov	r18, r24
    1748:	27 7e       	andi	r18, 0xE7	; 231
    174a:	e9 81       	ldd	r30, Y+1	; 0x01
    174c:	fa 81       	ldd	r31, Y+2	; 0x02
    174e:	85 81       	ldd	r24, Z+5	; 0x05
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	8c 70       	andi	r24, 0x0C	; 12
    1756:	90 70       	andi	r25, 0x00	; 0
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	82 2b       	or	r24, r18
    175e:	8c 93       	st	X, r24

	TCCR1B.Byte = (TCCR1B.Byte & 0xF8) | (Config_Ptr->prescaler); /*setting the prescaler*/
    1760:	ae e4       	ldi	r26, 0x4E	; 78
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ee e4       	ldi	r30, 0x4E	; 78
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	98 2f       	mov	r25, r24
    176c:	98 7f       	andi	r25, 0xF8	; 248
    176e:	e9 81       	ldd	r30, Y+1	; 0x01
    1770:	fa 81       	ldd	r31, Y+2	; 0x02
    1772:	84 81       	ldd	r24, Z+4	; 0x04
    1774:	89 2b       	or	r24, r25
    1776:	8c 93       	st	X, r24

	(Config_Ptr->mode == TIMER1_CTC_MODE) ? (TIMSK.Bits.OCIE1A = 1) : (TIMSK.Bits.TOIE1 = 1); /*Enable compare match interrupt or overflow interrupt according to the chosen mode*/
    1778:	e9 81       	ldd	r30, Y+1	; 0x01
    177a:	fa 81       	ldd	r31, Y+2	; 0x02
    177c:	85 81       	ldd	r24, Z+5	; 0x05
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	39 f4       	brne	.+14     	; 0x1790 <Timer1_init+0xca>
    1782:	e9 e5       	ldi	r30, 0x59	; 89
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	80 61       	ori	r24, 0x10	; 16
    178a:	80 83       	st	Z, r24
    178c:	80 81       	ld	r24, Z
    178e:	06 c0       	rjmp	.+12     	; 0x179c <Timer1_init+0xd6>
    1790:	e9 e5       	ldi	r30, 0x59	; 89
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	84 60       	ori	r24, 0x04	; 4
    1798:	80 83       	st	Z, r24
    179a:	80 81       	ld	r24, Z
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <Timer1_deInit>:

void Timer1_deInit(void)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
	/*Clearing all Timer1 registers*/
	TCCR1A.Byte = 0;
    17b2:	ef e4       	ldi	r30, 0x4F	; 79
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	10 82       	st	Z, r1
	TCCR1B.Byte = 0; /*here we cleared the bits CS12:0 so there is no clock source and the timer is stopped now*/
    17b8:	ee e4       	ldi	r30, 0x4E	; 78
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	10 82       	st	Z, r1
	TCNT1.TwoBytes = 0;
    17be:	ec e4       	ldi	r30, 0x4C	; 76
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	11 82       	std	Z+1, r1	; 0x01
    17c4:	10 82       	st	Z, r1

	/*Disable both compare match and overflow interrupts*/
	TIMSK.Bits.OCIE1A = 0;
    17c6:	e9 e5       	ldi	r30, 0x59	; 89
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8f 7e       	andi	r24, 0xEF	; 239
    17ce:	80 83       	st	Z, r24
	TIMSK.Bits.TOIE1 = 0;
    17d0:	e9 e5       	ldi	r30, 0x59	; 89
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	8b 7f       	andi	r24, 0xFB	; 251
    17d8:	80 83       	st	Z, r24

	g_Timer1_Call_Back_Ptr = NULL_PTR; /*Reset the global pointer value*/
    17da:	10 92 bd 01 	sts	0x01BD, r1
    17de:	10 92 bc 01 	sts	0x01BC, r1
}
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <Timer1_setCallBack>:

void Timer1_setCallBack(void (*a_ptr)(void))
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <Timer1_setCallBack+0x6>
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	9a 83       	std	Y+2, r25	; 0x02
    17f4:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_Call_Back_Ptr = a_ptr; /*Saving the address of the Call back function in a global variable*/
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	90 93 bd 01 	sts	0x01BD, r25
    17fe:	80 93 bc 01 	sts	0x01BC, r24
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "my_twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	00 d0       	rcall	.+0      	; 0x1812 <EEPROM_writeByte+0x6>
    1812:	00 d0       	rcall	.+0      	; 0x1814 <EEPROM_writeByte+0x8>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    181e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1822:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <TWI_getStatus>
    1826:	88 30       	cpi	r24, 0x08	; 8
    1828:	11 f0       	breq	.+4      	; 0x182e <EEPROM_writeByte+0x22>
        return ERROR;
    182a:	1c 82       	std	Y+4, r1	; 0x04
    182c:	28 c0       	rjmp	.+80     	; 0x187e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	80 70       	andi	r24, 0x00	; 0
    1834:	97 70       	andi	r25, 0x07	; 7
    1836:	88 0f       	add	r24, r24
    1838:	89 2f       	mov	r24, r25
    183a:	88 1f       	adc	r24, r24
    183c:	99 0b       	sbc	r25, r25
    183e:	91 95       	neg	r25
    1840:	80 6a       	ori	r24, 0xA0	; 160
    1842:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1846:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <TWI_getStatus>
    184a:	88 31       	cpi	r24, 0x18	; 24
    184c:	11 f0       	breq	.+4      	; 0x1852 <EEPROM_writeByte+0x46>
        return ERROR; 
    184e:	1c 82       	std	Y+4, r1	; 0x04
    1850:	16 c0       	rjmp	.+44     	; 0x187e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1858:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <TWI_getStatus>
    185c:	88 32       	cpi	r24, 0x28	; 40
    185e:	11 f0       	breq	.+4      	; 0x1864 <EEPROM_writeByte+0x58>
        return ERROR;
    1860:	1c 82       	std	Y+4, r1	; 0x04
    1862:	0d c0       	rjmp	.+26     	; 0x187e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    186a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <TWI_getStatus>
    186e:	88 32       	cpi	r24, 0x28	; 40
    1870:	11 f0       	breq	.+4      	; 0x1876 <EEPROM_writeByte+0x6a>
        return ERROR;
    1872:	1c 82       	std	Y+4, r1	; 0x04
    1874:	04 c0       	rjmp	.+8      	; 0x187e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1876:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <TWI_stop>
	
    return SUCCESS;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	8c 83       	std	Y+4, r24	; 0x04
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <EEPROM_readByte+0x6>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <EEPROM_readByte+0x8>
    1896:	0f 92       	push	r0
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	9a 83       	std	Y+2, r25	; 0x02
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	7c 83       	std	Y+4, r23	; 0x04
    18a2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    18a4:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    18a8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <TWI_getStatus>
    18ac:	88 30       	cpi	r24, 0x08	; 8
    18ae:	11 f0       	breq	.+4      	; 0x18b4 <EEPROM_readByte+0x26>
        return ERROR;
    18b0:	1d 82       	std	Y+5, r1	; 0x05
    18b2:	44 c0       	rjmp	.+136    	; 0x193c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	80 70       	andi	r24, 0x00	; 0
    18ba:	97 70       	andi	r25, 0x07	; 7
    18bc:	88 0f       	add	r24, r24
    18be:	89 2f       	mov	r24, r25
    18c0:	88 1f       	adc	r24, r24
    18c2:	99 0b       	sbc	r25, r25
    18c4:	91 95       	neg	r25
    18c6:	80 6a       	ori	r24, 0xA0	; 160
    18c8:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    18cc:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <TWI_getStatus>
    18d0:	88 31       	cpi	r24, 0x18	; 24
    18d2:	11 f0       	breq	.+4      	; 0x18d8 <EEPROM_readByte+0x4a>
        return ERROR;
    18d4:	1d 82       	std	Y+5, r1	; 0x05
    18d6:	32 c0       	rjmp	.+100    	; 0x193c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18de:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <TWI_getStatus>
    18e2:	88 32       	cpi	r24, 0x28	; 40
    18e4:	11 f0       	breq	.+4      	; 0x18ea <EEPROM_readByte+0x5c>
        return ERROR;
    18e6:	1d 82       	std	Y+5, r1	; 0x05
    18e8:	29 c0       	rjmp	.+82     	; 0x193c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    18ea:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    18ee:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <TWI_getStatus>
    18f2:	80 31       	cpi	r24, 0x10	; 16
    18f4:	11 f0       	breq	.+4      	; 0x18fa <EEPROM_readByte+0x6c>
        return ERROR;
    18f6:	1d 82       	std	Y+5, r1	; 0x05
    18f8:	21 c0       	rjmp	.+66     	; 0x193c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	80 70       	andi	r24, 0x00	; 0
    1900:	97 70       	andi	r25, 0x07	; 7
    1902:	88 0f       	add	r24, r24
    1904:	89 2f       	mov	r24, r25
    1906:	88 1f       	adc	r24, r24
    1908:	99 0b       	sbc	r25, r25
    190a:	91 95       	neg	r25
    190c:	81 6a       	ori	r24, 0xA1	; 161
    190e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1912:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <TWI_getStatus>
    1916:	80 34       	cpi	r24, 0x40	; 64
    1918:	11 f0       	breq	.+4      	; 0x191e <EEPROM_readByte+0x90>
        return ERROR;
    191a:	1d 82       	std	Y+5, r1	; 0x05
    191c:	0f c0       	rjmp	.+30     	; 0x193c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    191e:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <TWI_readByteWithNACK>
    1922:	eb 81       	ldd	r30, Y+3	; 0x03
    1924:	fc 81       	ldd	r31, Y+4	; 0x04
    1926:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1928:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <TWI_getStatus>
    192c:	88 35       	cpi	r24, 0x58	; 88
    192e:	11 f0       	breq	.+4      	; 0x1934 <EEPROM_readByte+0xa6>
        return ERROR;
    1930:	1d 82       	std	Y+5, r1	; 0x05
    1932:	04 c0       	rjmp	.+8      	; 0x193c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1934:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <TWI_stop>

    return SUCCESS;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	8d 83       	std	Y+5, r24	; 0x05
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <DcMotor_Init>:
Fan_State currentFanState;
extern Timer0_ConfigType Timer0_Configuartions =
{ 0, TIMER0_FCPU_8, TIMER0_FAST_PWM_MODE };

void DcMotor_Init(void)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DCMOTOR_IN1_PORT_ID, DCMOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_IN2_PORT_ID, DCMOTOR_IN2_PIN_ID, PIN_OUTPUT);
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_E1_PORT_ID, DCMOTOR_E1_PIN_ID, PIN_OUTPUT);
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	63 e0       	ldi	r22, 0x03	; 3
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <GPIO_setupPinDirection>

	GPIO_writePin(DCMOTOR_IN1_PORT_ID, DCMOTOR_IN1_PIN_ID, LOGIC_LOW);
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_IN2_PORT_ID, DCMOTOR_IN2_PIN_ID, LOGIC_LOW);
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <GPIO_writePin>

	currentFanState = FAN_OFF;
    1988:	10 92 df 01 	sts	0x01DF, r1

}
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	00 d0       	rcall	.+0      	; 0x1998 <DcMotor_Rotate+0x6>
    1998:	00 d0       	rcall	.+0      	; 0x199a <DcMotor_Rotate+0x8>
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	6a 83       	std	Y+2, r22	; 0x02
	switch (state)
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	3c 83       	std	Y+4, r19	; 0x04
    19aa:	2b 83       	std	Y+3, r18	; 0x03
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	9c 81       	ldd	r25, Y+4	; 0x04
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	91 05       	cpc	r25, r1
    19b4:	c9 f0       	breq	.+50     	; 0x19e8 <DcMotor_Rotate+0x56>
    19b6:	2b 81       	ldd	r18, Y+3	; 0x03
    19b8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ba:	22 30       	cpi	r18, 0x02	; 2
    19bc:	31 05       	cpc	r19, r1
    19be:	61 f1       	breq	.+88     	; 0x1a18 <DcMotor_Rotate+0x86>
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	9c 81       	ldd	r25, Y+4	; 0x04
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	09 f0       	breq	.+2      	; 0x19ca <DcMotor_Rotate+0x38>
    19c8:	3e c0       	rjmp	.+124    	; 0x1a46 <DcMotor_Rotate+0xb4>
	{
	case STOP:
		GPIO_writePin(DCMOTOR_IN1_PORT_ID, DCMOTOR_IN1_PIN_ID, LOGIC_LOW);
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_IN2_PORT_ID, DCMOTOR_IN2_PIN_ID, LOGIC_LOW);
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <GPIO_writePin>
		Timer0_deInit();
    19de:	0e 94 c8 0a 	call	0x1590	; 0x1590 <Timer0_deInit>
		currentFanState = FAN_OFF;
    19e2:	10 92 df 01 	sts	0x01DF, r1
    19e6:	2f c0       	rjmp	.+94     	; 0x1a46 <DcMotor_Rotate+0xb4>
		break;
	case CW:
		GPIO_writePin(DCMOTOR_IN1_PORT_ID, DCMOTOR_IN1_PIN_ID, LOGIC_LOW);
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_IN2_PORT_ID, DCMOTOR_IN2_PIN_ID, LOGIC_HIGH);
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	61 e0       	ldi	r22, 0x01	; 1
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <GPIO_writePin>
		Timer0_Configuartions.duty_cycle = speed;
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	80 93 b6 01 	sts	0x01B6, r24
		Timer0_Configuartions.prescaler = TIMER0_FCPU_8;
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	80 93 b4 01 	sts	0x01B4, r24
		Timer0_init(&Timer0_Configuartions);
    1a08:	83 eb       	ldi	r24, 0xB3	; 179
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	0e 94 27 0a 	call	0x144e	; 0x144e <Timer0_init>
		currentFanState = FAN_ON;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	80 93 df 01 	sts	0x01DF, r24
    1a16:	17 c0       	rjmp	.+46     	; 0x1a46 <DcMotor_Rotate+0xb4>
		break;
	case ACW:
		GPIO_writePin(DCMOTOR_IN1_PORT_ID, DCMOTOR_IN1_PIN_ID, LOGIC_HIGH);
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_IN2_PORT_ID, DCMOTOR_IN2_PIN_ID, LOGIC_LOW);
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	61 e0       	ldi	r22, 0x01	; 1
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <GPIO_writePin>
		Timer0_Configuartions.duty_cycle = speed;
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	80 93 b6 01 	sts	0x01B6, r24
		Timer0_Configuartions.prescaler = TIMER0_FCPU_8;
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	80 93 b4 01 	sts	0x01B4, r24
		Timer0_init(&Timer0_Configuartions);
    1a38:	83 eb       	ldi	r24, 0xB3	; 179
    1a3a:	91 e0       	ldi	r25, 0x01	; 1
    1a3c:	0e 94 27 0a 	call	0x144e	; 0x144e <Timer0_init>
		currentFanState = FAN_ON;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	80 93 df 01 	sts	0x01DF, r24
		break;
	}
}
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <GPIO_setupPinDirection>:
 */
#include "my_gpio.h"

/*********************************************PINS_FUNCTIONS************************************************/
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	27 97       	sbiw	r28, 0x07	; 7
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	6a 83       	std	Y+2, r22	; 0x02
    1a6c:	4b 83       	std	Y+3, r20	; 0x03
	(port_num >= GPIO_NUM_OF_PORTS || pin_num >= GPIO_NUM_OF_PINS) ? /*DO NOTHING*/: GPIO_DDR_SETUP_PIN_DIRECTION(port_num, pin_num, direction);
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	18 f4       	brcc	.+6      	; 0x1a7a <GPIO_setupPinDirection+0x26>
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	88 30       	cpi	r24, 0x08	; 8
    1a78:	28 f0       	brcs	.+10     	; 0x1a84 <GPIO_setupPinDirection+0x30>
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9f 83       	std	Y+7, r25	; 0x07
    1a80:	8e 83       	std	Y+6, r24	; 0x06
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <GPIO_setupPinDirection+0x34>
    1a84:	1f 82       	std	Y+7, r1	; 0x07
    1a86:	1e 82       	std	Y+6, r1	; 0x06
    1a88:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <GPIO_setupPinDirection+0x3e>
    1a90:	59 c0       	rjmp	.+178    	; 0x1b44 <GPIO_setupPinDirection+0xf0>
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	59 f5       	brne	.+86     	; 0x1aee <GPIO_setupPinDirection+0x9a>
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	c9 01       	movw	r24, r18
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	82 0f       	add	r24, r18
    1aa6:	93 1f       	adc	r25, r19
    1aa8:	90 95       	com	r25
    1aaa:	81 95       	neg	r24
    1aac:	9f 4f       	sbci	r25, 0xFF	; 255
    1aae:	ca 96       	adiw	r24, 0x3a	; 58
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	c9 01       	movw	r24, r18
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	82 0f       	add	r24, r18
    1ac0:	93 1f       	adc	r25, r19
    1ac2:	90 95       	com	r25
    1ac4:	81 95       	neg	r24
    1ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac8:	ca 96       	adiw	r24, 0x3a	; 58
    1aca:	fc 01       	movw	r30, r24
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 2e       	mov	r0, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <GPIO_setupPinDirection+0x8e>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <GPIO_setupPinDirection+0x8a>
    1ae6:	84 2b       	or	r24, r20
    1ae8:	8c 93       	st	X, r24
    1aea:	9c 91       	ld	r25, X
    1aec:	2b c0       	rjmp	.+86     	; 0x1b44 <GPIO_setupPinDirection+0xf0>
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	c9 01       	movw	r24, r18
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	82 0f       	add	r24, r18
    1afc:	93 1f       	adc	r25, r19
    1afe:	90 95       	com	r25
    1b00:	81 95       	neg	r24
    1b02:	9f 4f       	sbci	r25, 0xFF	; 255
    1b04:	ca 96       	adiw	r24, 0x3a	; 58
    1b06:	dc 01       	movw	r26, r24
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	c9 01       	movw	r24, r18
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	82 0f       	add	r24, r18
    1b16:	93 1f       	adc	r25, r19
    1b18:	90 95       	com	r25
    1b1a:	81 95       	neg	r24
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	ca 96       	adiw	r24, 0x3a	; 58
    1b20:	fc 01       	movw	r30, r24
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <GPIO_setupPinDirection+0xe4>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <GPIO_setupPinDirection+0xe0>
    1b3c:	80 95       	com	r24
    1b3e:	84 23       	and	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	8c 91       	ld	r24, X
}
    1b44:	27 96       	adiw	r28, 0x07	; 7
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <GPIO_writePin>:

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	27 97       	sbiw	r28, 0x07	; 7
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	6a 83       	std	Y+2, r22	; 0x02
    1b6e:	4b 83       	std	Y+3, r20	; 0x03
	(port_num >= GPIO_NUM_OF_PORTS || pin_num >= GPIO_NUM_OF_PINS) ? /*DO NOTHING*/: GPIO_PORT_WRITE_PIN_VALUE(port_num, pin_num, value);
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	84 30       	cpi	r24, 0x04	; 4
    1b74:	18 f4       	brcc	.+6      	; 0x1b7c <GPIO_writePin+0x26>
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	88 30       	cpi	r24, 0x08	; 8
    1b7a:	28 f0       	brcs	.+10     	; 0x1b86 <GPIO_writePin+0x30>
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9f 83       	std	Y+7, r25	; 0x07
    1b82:	8e 83       	std	Y+6, r24	; 0x06
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <GPIO_writePin+0x34>
    1b86:	1f 82       	std	Y+7, r1	; 0x07
    1b88:	1e 82       	std	Y+6, r1	; 0x06
    1b8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <GPIO_writePin+0x3e>
    1b92:	59 c0       	rjmp	.+178    	; 0x1c46 <GPIO_writePin+0xf0>
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	59 f5       	brne	.+86     	; 0x1bf0 <GPIO_writePin+0x9a>
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	c9 01       	movw	r24, r18
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	82 0f       	add	r24, r18
    1ba8:	93 1f       	adc	r25, r19
    1baa:	90 95       	com	r25
    1bac:	81 95       	neg	r24
    1bae:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb0:	cb 96       	adiw	r24, 0x3b	; 59
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	c9 01       	movw	r24, r18
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	82 0f       	add	r24, r18
    1bc2:	93 1f       	adc	r25, r19
    1bc4:	90 95       	com	r25
    1bc6:	81 95       	neg	r24
    1bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bca:	cb 96       	adiw	r24, 0x3b	; 59
    1bcc:	fc 01       	movw	r30, r24
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <GPIO_writePin+0x8e>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <GPIO_writePin+0x8a>
    1be8:	84 2b       	or	r24, r20
    1bea:	8c 93       	st	X, r24
    1bec:	9c 91       	ld	r25, X
    1bee:	2b c0       	rjmp	.+86     	; 0x1c46 <GPIO_writePin+0xf0>
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	c9 01       	movw	r24, r18
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	82 0f       	add	r24, r18
    1bfe:	93 1f       	adc	r25, r19
    1c00:	90 95       	com	r25
    1c02:	81 95       	neg	r24
    1c04:	9f 4f       	sbci	r25, 0xFF	; 255
    1c06:	cb 96       	adiw	r24, 0x3b	; 59
    1c08:	dc 01       	movw	r26, r24
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	c9 01       	movw	r24, r18
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	82 0f       	add	r24, r18
    1c18:	93 1f       	adc	r25, r19
    1c1a:	90 95       	com	r25
    1c1c:	81 95       	neg	r24
    1c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c20:	cb 96       	adiw	r24, 0x3b	; 59
    1c22:	fc 01       	movw	r30, r24
    1c24:	80 81       	ld	r24, Z
    1c26:	48 2f       	mov	r20, r24
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 2e       	mov	r0, r18
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <GPIO_writePin+0xe4>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	0a 94       	dec	r0
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <GPIO_writePin+0xe0>
    1c3e:	80 95       	com	r24
    1c40:	84 23       	and	r24, r20
    1c42:	8c 93       	st	X, r24
    1c44:	8c 91       	ld	r24, X
}
    1c46:	27 96       	adiw	r28, 0x07	; 7
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <GPIO_readPin+0x6>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <GPIO_readPin+0x8>
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	6a 83       	std	Y+2, r22	; 0x02
	return (port_num >= GPIO_NUM_OF_PORTS || pin_num >= GPIO_NUM_OF_PINS) ? LOGIC_LOW : GPIO_PIN_READ_PIN_VALUE(port_num, pin_num);
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	84 30       	cpi	r24, 0x04	; 4
    1c6c:	40 f5       	brcc	.+80     	; 0x1cbe <GPIO_readPin+0x66>
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	88 30       	cpi	r24, 0x08	; 8
    1c72:	28 f5       	brcc	.+74     	; 0x1cbe <GPIO_readPin+0x66>
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	c9 01       	movw	r24, r18
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	90 95       	com	r25
    1c86:	81 95       	neg	r24
    1c88:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8a:	c9 96       	adiw	r24, 0x39	; 57
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	80 81       	ld	r24, Z
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	88 2f       	mov	r24, r24
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a9 01       	movw	r20, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <GPIO_readPin+0x4a>
    1c9e:	55 95       	asr	r21
    1ca0:	47 95       	ror	r20
    1ca2:	8a 95       	dec	r24
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <GPIO_readPin+0x46>
    1ca6:	ca 01       	movw	r24, r20
    1ca8:	81 70       	andi	r24, 0x01	; 1
    1caa:	90 70       	andi	r25, 0x00	; 0
    1cac:	88 23       	and	r24, r24
    1cae:	19 f0       	breq	.+6      	; 0x1cb6 <GPIO_readPin+0x5e>
    1cb0:	51 e0       	ldi	r21, 0x01	; 1
    1cb2:	5b 83       	std	Y+3, r21	; 0x03
    1cb4:	01 c0       	rjmp	.+2      	; 0x1cb8 <GPIO_readPin+0x60>
    1cb6:	1b 82       	std	Y+3, r1	; 0x03
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	8c 83       	std	Y+4, r24	; 0x04
    1cbc:	01 c0       	rjmp	.+2      	; 0x1cc0 <GPIO_readPin+0x68>
    1cbe:	1c 82       	std	Y+4, r1	; 0x04
    1cc0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <GPIO_setupPortDirection>:
/***********************************************************************************************************/

/********************************************PORTS_FUNCTIONS************************************************/
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <GPIO_setupPortDirection+0x6>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <GPIO_setupPortDirection+0x8>
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <GPIO_setupPortDirection+0xa>
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	6a 83       	std	Y+2, r22	; 0x02
	(port_num >= GPIO_NUM_OF_PORTS) ? /*DO NOTHING*/: GPIO_DDR_SETUP_PORT_DIRECTION(port_num, direction);
    1ce2:	1d 82       	std	Y+5, r1	; 0x05
    1ce4:	1c 82       	std	Y+4, r1	; 0x04
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	84 30       	cpi	r24, 0x04	; 4
    1cea:	20 f0       	brcs	.+8      	; 0x1cf4 <GPIO_setupPortDirection+0x24>
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9d 83       	std	Y+5, r25	; 0x05
    1cf2:	8c 83       	std	Y+4, r24	; 0x04
    1cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf6:	88 23       	and	r24, r24
    1cf8:	11 f0       	breq	.+4      	; 0x1cfe <GPIO_setupPortDirection+0x2e>
    1cfa:	99 81       	ldd	r25, Y+1	; 0x01
    1cfc:	10 c0       	rjmp	.+32     	; 0x1d1e <GPIO_setupPortDirection+0x4e>
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	c9 01       	movw	r24, r18
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	82 0f       	add	r24, r18
    1d0c:	93 1f       	adc	r25, r19
    1d0e:	90 95       	com	r25
    1d10:	81 95       	neg	r24
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	ca 96       	adiw	r24, 0x3a	; 58
    1d16:	fc 01       	movw	r30, r24
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	80 83       	st	Z, r24
    1d1c:	80 81       	ld	r24, Z
}
    1d1e:	26 96       	adiw	r28, 0x06	; 6
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <GPIO_writePort+0x6>
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <GPIO_writePort+0x8>
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <GPIO_writePort+0xa>
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	6a 83       	std	Y+2, r22	; 0x02
	(port_num >= GPIO_NUM_OF_PORTS) ? /*DO NOTHING*/: GPIO_PORT_WRITE_PORT_VALUE(port_num, value);
    1d42:	1d 82       	std	Y+5, r1	; 0x05
    1d44:	1c 82       	std	Y+4, r1	; 0x04
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	84 30       	cpi	r24, 0x04	; 4
    1d4a:	20 f0       	brcs	.+8      	; 0x1d54 <GPIO_writePort+0x24>
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9d 83       	std	Y+5, r25	; 0x05
    1d52:	8c 83       	std	Y+4, r24	; 0x04
    1d54:	8c 81       	ldd	r24, Y+4	; 0x04
    1d56:	88 23       	and	r24, r24
    1d58:	11 f0       	breq	.+4      	; 0x1d5e <GPIO_writePort+0x2e>
    1d5a:	99 81       	ldd	r25, Y+1	; 0x01
    1d5c:	10 c0       	rjmp	.+32     	; 0x1d7e <GPIO_writePort+0x4e>
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	c9 01       	movw	r24, r18
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	82 0f       	add	r24, r18
    1d6c:	93 1f       	adc	r25, r19
    1d6e:	90 95       	com	r25
    1d70:	81 95       	neg	r24
    1d72:	9f 4f       	sbci	r25, 0xFF	; 255
    1d74:	cb 96       	adiw	r24, 0x3b	; 59
    1d76:	fc 01       	movw	r30, r24
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	80 83       	st	Z, r24
    1d7c:	80 81       	ld	r24, Z
}
    1d7e:	26 96       	adiw	r28, 0x06	; 6
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <GPIO_readPort+0x6>
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	89 83       	std	Y+1, r24	; 0x01
	return (port_num >= GPIO_NUM_OF_PORTS) ? LOGIC_LOW : GPIO_PIN_READ_PORT_VALUE(port_num);
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	84 30       	cpi	r24, 0x04	; 4
    1da0:	80 f4       	brcc	.+32     	; 0x1dc2 <GPIO_readPort+0x32>
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	c9 01       	movw	r24, r18
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	82 0f       	add	r24, r18
    1db0:	93 1f       	adc	r25, r19
    1db2:	90 95       	com	r25
    1db4:	81 95       	neg	r24
    1db6:	9f 4f       	sbci	r25, 0xFF	; 255
    1db8:	c9 96       	adiw	r24, 0x39	; 57
    1dba:	fc 01       	movw	r30, r24
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8a 83       	std	Y+2, r24	; 0x02
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <GPIO_readPort+0x34>
    1dc2:	1a 82       	std	Y+2, r1	; 0x02
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <TWI_init>:
#include "my_twi.h"
#include "my_common_macros.h"
#include "my_ATmega32_regs.h"

void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <TWI_init+0x6>
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR.Byte = Config_Ptr->bit_rate;
    1dde:	a0 e2       	ldi	r26, 0x20	; 32
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e9 81       	ldd	r30, Y+1	; 0x01
    1de4:	fa 81       	ldd	r31, Y+2	; 0x02
    1de6:	81 81       	ldd	r24, Z+1	; 0x01
    1de8:	8c 93       	st	X, r24
	TWSR.Byte = 0x00;
    1dea:	e1 e2       	ldi	r30, 0x21	; 33
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	10 82       	st	Z, r1

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
	 General Call Recognition: Off */
	TWAR.Byte = Config_Ptr->address; // my address = 0x01 :)
    1df0:	a2 e2       	ldi	r26, 0x22	; 34
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e9 81       	ldd	r30, Y+1	; 0x01
    1df6:	fa 81       	ldd	r31, Y+2	; 0x02
    1df8:	80 81       	ld	r24, Z
    1dfa:	8c 93       	st	X, r24

	TWCR.Bits.TWEN = 1; /* enable TWI */
    1dfc:	e6 e5       	ldi	r30, 0x56	; 86
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	84 60       	ori	r24, 0x04	; 4
    1e04:	80 83       	st	Z, r24
}
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <TWI_start>:

void TWI_start(void)
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR.Byte = 0b10100100;
    1e18:	e6 e5       	ldi	r30, 0x56	; 86
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	84 ea       	ldi	r24, 0xA4	; 164
    1e1e:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (TWCR.Bits.TWINT == 0)
    1e20:	e6 e5       	ldi	r30, 0x56	; 86
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	80 78       	andi	r24, 0x80	; 128
    1e28:	88 23       	and	r24, r24
    1e2a:	d1 f3       	breq	.-12     	; 0x1e20 <TWI_start+0x10>
		;
}
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <TWI_stop>:

void TWI_stop(void)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */

	TWCR.Byte = 0b10010100;
    1e3a:	e6 e5       	ldi	r30, 0x56	; 86
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	84 e9       	ldi	r24, 0x94	; 148
    1e40:	80 83       	st	Z, r24
}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	0f 92       	push	r0
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR.Byte = data;
    1e54:	e3 e2       	ldi	r30, 0x23	; 35
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR.Byte = 0b10000100;
    1e5c:	e6 e5       	ldi	r30, 0x56	; 86
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	84 e8       	ldi	r24, 0x84	; 132
    1e62:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (TWCR.Bits.TWINT == 0)
    1e64:	e6 e5       	ldi	r30, 0x56	; 86
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	80 78       	andi	r24, 0x80	; 128
    1e6c:	88 23       	and	r24, r24
    1e6e:	d1 f3       	breq	.-12     	; 0x1e64 <TWI_writeByte+0x1c>
		;
}
    1e70:	0f 90       	pop	r0
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */

	TWCR.Byte = 0b11000100;
    1e80:	e6 e5       	ldi	r30, 0x56	; 86
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	84 ec       	ldi	r24, 0xC4	; 196
    1e86:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (TWCR.Bits.TWINT == 0)
    1e88:	e6 e5       	ldi	r30, 0x56	; 86
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	80 78       	andi	r24, 0x80	; 128
    1e90:	88 23       	and	r24, r24
    1e92:	d1 f3       	breq	.-12     	; 0x1e88 <TWI_readByteWithACK+0x10>
		;
	/* Read Data */
	return TWDR.Byte;
    1e94:	e3 e2       	ldi	r30, 0x23	; 35
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
}
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR.Byte = 0b10000100;
    1ea8:	e6 e5       	ldi	r30, 0x56	; 86
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	84 e8       	ldi	r24, 0x84	; 132
    1eae:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (TWCR.Bits.TWINT == 0)
    1eb0:	e6 e5       	ldi	r30, 0x56	; 86
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	80 78       	andi	r24, 0x80	; 128
    1eb8:	88 23       	and	r24, r24
    1eba:	d1 f3       	breq	.-12     	; 0x1eb0 <TWI_readByteWithNACK+0x10>
		;
	/* Read Data */
	return TWDR.Byte;
    1ebc:	e3 e2       	ldi	r30, 0x23	; 35
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
}
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	0f 92       	push	r0
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR.Byte & 0xF8;
    1ed2:	e1 e2       	ldi	r30, 0x21	; 33
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	88 7f       	andi	r24, 0xF8	; 248
    1eda:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <UART_init>:
#include "my_uart.h"
#include "my_gpio.h"
#include "my_common_macros.h"

void UART_init(const UART_ConfigType *Config_Ptr)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <UART_init+0x6>
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <UART_init+0x8>
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	9c 83       	std	Y+4, r25	; 0x04
    1ef4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1ef6:	1a 82       	std	Y+2, r1	; 0x02
    1ef8:	19 82       	std	Y+1, r1	; 0x01

	UCSRA.Bits.U2X = 1;
    1efa:	eb e2       	ldi	r30, 0x2B	; 43
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	82 60       	ori	r24, 0x02	; 2
    1f02:	80 83       	st	Z, r24

	UCSRB.Bits.RXEN = 1;
    1f04:	ea e2       	ldi	r30, 0x2A	; 42
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	80 61       	ori	r24, 0x10	; 16
    1f0c:	80 83       	st	Z, r24
	UCSRB.Bits.TXEN = 1;
    1f0e:	ea e2       	ldi	r30, 0x2A	; 42
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	88 60       	ori	r24, 0x08	; 8
    1f16:	80 83       	st	Z, r24
	UCSRB.Bits.UCSZ2 = ((Config_Ptr->bit_data) & 0x04); /*inserting bit2 of bit_data in UCSZ2 bit*/
    1f18:	ea e2       	ldi	r30, 0x2A	; 42
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	8b 7f       	andi	r24, 0xFB	; 251
    1f20:	80 83       	st	Z, r24

	UCSRC.Bits.URSEL = 1;
    1f22:	e0 e4       	ldi	r30, 0x40	; 64
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	80 68       	ori	r24, 0x80	; 128
    1f2a:	80 83       	st	Z, r24
	UCSRC.Bits.USBS = Config_Ptr->stop_bit; /*inserting the stop bit in USBS bit*/
    1f2c:	a0 e4       	ldi	r26, 0x40	; 64
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	eb 81       	ldd	r30, Y+3	; 0x03
    1f32:	fc 81       	ldd	r31, Y+4	; 0x04
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	81 70       	andi	r24, 0x01	; 1
    1f38:	81 70       	andi	r24, 0x01	; 1
    1f3a:	98 2f       	mov	r25, r24
    1f3c:	99 0f       	add	r25, r25
    1f3e:	99 0f       	add	r25, r25
    1f40:	99 0f       	add	r25, r25
    1f42:	8c 91       	ld	r24, X
    1f44:	87 7f       	andi	r24, 0xF7	; 247
    1f46:	89 2b       	or	r24, r25
    1f48:	8c 93       	st	X, r24
	UCSRC.Byte = (UCSRC.Byte & 0xCF) | (((Config_Ptr->parity) & 0x03) << 4); /*inserting parity in UPM1 & UPM0 bits*/
    1f4a:	a0 e4       	ldi	r26, 0x40	; 64
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e0 e4       	ldi	r30, 0x40	; 64
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	28 2f       	mov	r18, r24
    1f56:	2f 7c       	andi	r18, 0xCF	; 207
    1f58:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5c:	81 81       	ldd	r24, Z+1	; 0x01
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	83 70       	andi	r24, 0x03	; 3
    1f64:	90 70       	andi	r25, 0x00	; 0
    1f66:	82 95       	swap	r24
    1f68:	92 95       	swap	r25
    1f6a:	90 7f       	andi	r25, 0xF0	; 240
    1f6c:	98 27       	eor	r25, r24
    1f6e:	80 7f       	andi	r24, 0xF0	; 240
    1f70:	98 27       	eor	r25, r24
    1f72:	82 2b       	or	r24, r18
    1f74:	8c 93       	st	X, r24
	UCSRC.Byte = (UCSRC.Byte & 0xF9) | (((Config_Ptr->bit_data) & 0x03) << 1); /*inserting bit1 & bit0 of bit_data in UCSZ1 & UCSZ0 bits*/
    1f76:	a0 e4       	ldi	r26, 0x40	; 64
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e0 e4       	ldi	r30, 0x40	; 64
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	28 2f       	mov	r18, r24
    1f82:	29 7f       	andi	r18, 0xF9	; 249
    1f84:	eb 81       	ldd	r30, Y+3	; 0x03
    1f86:	fc 81       	ldd	r31, Y+4	; 0x04
    1f88:	80 81       	ld	r24, Z
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	83 70       	andi	r24, 0x03	; 3
    1f90:	90 70       	andi	r25, 0x00	; 0
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	82 2b       	or	r24, r18
    1f98:	8c 93       	st	X, r24

	ubrr_value = (uint16) (((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    1f9a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f9c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f9e:	83 81       	ldd	r24, Z+3	; 0x03
    1fa0:	94 81       	ldd	r25, Z+4	; 0x04
    1fa2:	cc 01       	movw	r24, r24
    1fa4:	a0 e0       	ldi	r26, 0x00	; 0
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	aa 1f       	adc	r26, r26
    1fae:	bb 1f       	adc	r27, r27
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	aa 1f       	adc	r26, r26
    1fb6:	bb 1f       	adc	r27, r27
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	aa 1f       	adc	r26, r26
    1fbe:	bb 1f       	adc	r27, r27
    1fc0:	9c 01       	movw	r18, r24
    1fc2:	ad 01       	movw	r20, r26
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	92 e1       	ldi	r25, 0x12	; 18
    1fc8:	aa e7       	ldi	r26, 0x7A	; 122
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 84 10 	call	0x2108	; 0x2108 <__udivmodsi4>
    1fd4:	da 01       	movw	r26, r20
    1fd6:	c9 01       	movw	r24, r18
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	9a 83       	std	Y+2, r25	; 0x02
    1fdc:	89 83       	std	Y+1, r24	; 0x01

	UBRRH.Byte = ubrr_value >> 8;
    1fde:	e0 e4       	ldi	r30, 0x40	; 64
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe6:	89 2f       	mov	r24, r25
    1fe8:	99 27       	eor	r25, r25
    1fea:	80 83       	st	Z, r24
	UBRRL.Byte = ubrr_value;
    1fec:	e9 e2       	ldi	r30, 0x29	; 41
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	80 83       	st	Z, r24
}
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	0f 92       	push	r0
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (UCSRA.Bits.UDRE == 0)
    200e:	eb e2       	ldi	r30, 0x2B	; 43
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	80 72       	andi	r24, 0x20	; 32
    2016:	88 23       	and	r24, r24
    2018:	d1 f3       	breq	.-12     	; 0x200e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR.Byte = data;
    201a:	ec e2       	ldi	r30, 0x2C	; 44
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2022:	0f 90       	pop	r0
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (UCSRA.Bits.RXC == 0)
    2032:	eb e2       	ldi	r30, 0x2B	; 43
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	80 78       	andi	r24, 0x80	; 128
    203a:	88 23       	and	r24, r24
    203c:	d1 f3       	breq	.-12     	; 0x2032 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR.Byte;
    203e:	ec e2       	ldi	r30, 0x2C	; 44
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	00 d0       	rcall	.+0      	; 0x2050 <UART_sendString+0x6>
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	9a 83       	std	Y+2, r25	; 0x02
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	0a c0       	rjmp	.+20     	; 0x206e <UART_sendString+0x24>

	while (*Str != '\0')
	{
		UART_sendByte(*Str);
    205a:	e9 81       	ldd	r30, Y+1	; 0x01
    205c:	fa 81       	ldd	r31, Y+2	; 0x02
    205e:	80 81       	ld	r24, Z
    2060:	0e 94 01 10 	call	0x2002	; 0x2002 <UART_sendByte>
		Str++;
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	9a 81       	ldd	r25, Y+2	; 0x02
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	9a 83       	std	Y+2, r25	; 0x02
    206c:	89 83       	std	Y+1, r24	; 0x01
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{

	while (*Str != '\0')
    206e:	e9 81       	ldd	r30, Y+1	; 0x01
    2070:	fa 81       	ldd	r31, Y+2	; 0x02
    2072:	80 81       	ld	r24, Z
    2074:	88 23       	and	r24, r24
    2076:	89 f7       	brne	.-30     	; 0x205a <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}

}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <UART_receiveString+0xa>
    208c:	0f 92       	push	r0
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	9b 83       	std	Y+3, r25	; 0x03
    2094:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2096:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	9b 81       	ldd	r25, Y+3	; 0x03
    20a2:	8c 01       	movw	r16, r24
    20a4:	02 0f       	add	r16, r18
    20a6:	13 1f       	adc	r17, r19
    20a8:	0e 94 15 10 	call	0x202a	; 0x202a <UART_recieveByte>
    20ac:	f8 01       	movw	r30, r16
    20ae:	80 83       	st	Z, r24
    20b0:	0f c0       	rjmp	.+30     	; 0x20d0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
	{
		i++;
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	8f 5f       	subi	r24, 0xFF	; 255
    20b6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	9b 81       	ldd	r25, Y+3	; 0x03
    20c2:	8c 01       	movw	r16, r24
    20c4:	02 0f       	add	r16, r18
    20c6:	13 1f       	adc	r17, r19
    20c8:	0e 94 15 10 	call	0x202a	; 0x202a <UART_recieveByte>
    20cc:	f8 01       	movw	r30, r16
    20ce:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	9b 81       	ldd	r25, Y+3	; 0x03
    20da:	fc 01       	movw	r30, r24
    20dc:	e2 0f       	add	r30, r18
    20de:	f3 1f       	adc	r31, r19
    20e0:	80 81       	ld	r24, Z
    20e2:	83 32       	cpi	r24, 0x23	; 35
    20e4:	31 f7       	brne	.-52     	; 0x20b2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	9b 81       	ldd	r25, Y+3	; 0x03
    20f0:	fc 01       	movw	r30, r24
    20f2:	e2 0f       	add	r30, r18
    20f4:	f3 1f       	adc	r31, r19
    20f6:	10 82       	st	Z, r1
}
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	08 95       	ret

00002108 <__udivmodsi4>:
    2108:	a1 e2       	ldi	r26, 0x21	; 33
    210a:	1a 2e       	mov	r1, r26
    210c:	aa 1b       	sub	r26, r26
    210e:	bb 1b       	sub	r27, r27
    2110:	fd 01       	movw	r30, r26
    2112:	0d c0       	rjmp	.+26     	; 0x212e <__udivmodsi4_ep>

00002114 <__udivmodsi4_loop>:
    2114:	aa 1f       	adc	r26, r26
    2116:	bb 1f       	adc	r27, r27
    2118:	ee 1f       	adc	r30, r30
    211a:	ff 1f       	adc	r31, r31
    211c:	a2 17       	cp	r26, r18
    211e:	b3 07       	cpc	r27, r19
    2120:	e4 07       	cpc	r30, r20
    2122:	f5 07       	cpc	r31, r21
    2124:	20 f0       	brcs	.+8      	; 0x212e <__udivmodsi4_ep>
    2126:	a2 1b       	sub	r26, r18
    2128:	b3 0b       	sbc	r27, r19
    212a:	e4 0b       	sbc	r30, r20
    212c:	f5 0b       	sbc	r31, r21

0000212e <__udivmodsi4_ep>:
    212e:	66 1f       	adc	r22, r22
    2130:	77 1f       	adc	r23, r23
    2132:	88 1f       	adc	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	1a 94       	dec	r1
    2138:	69 f7       	brne	.-38     	; 0x2114 <__udivmodsi4_loop>
    213a:	60 95       	com	r22
    213c:	70 95       	com	r23
    213e:	80 95       	com	r24
    2140:	90 95       	com	r25
    2142:	9b 01       	movw	r18, r22
    2144:	ac 01       	movw	r20, r24
    2146:	bd 01       	movw	r22, r26
    2148:	cf 01       	movw	r24, r30
    214a:	08 95       	ret

0000214c <__prologue_saves__>:
    214c:	2f 92       	push	r2
    214e:	3f 92       	push	r3
    2150:	4f 92       	push	r4
    2152:	5f 92       	push	r5
    2154:	6f 92       	push	r6
    2156:	7f 92       	push	r7
    2158:	8f 92       	push	r8
    215a:	9f 92       	push	r9
    215c:	af 92       	push	r10
    215e:	bf 92       	push	r11
    2160:	cf 92       	push	r12
    2162:	df 92       	push	r13
    2164:	ef 92       	push	r14
    2166:	ff 92       	push	r15
    2168:	0f 93       	push	r16
    216a:	1f 93       	push	r17
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	ca 1b       	sub	r28, r26
    2176:	db 0b       	sbc	r29, r27
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	09 94       	ijmp

00002184 <__epilogue_restores__>:
    2184:	2a 88       	ldd	r2, Y+18	; 0x12
    2186:	39 88       	ldd	r3, Y+17	; 0x11
    2188:	48 88       	ldd	r4, Y+16	; 0x10
    218a:	5f 84       	ldd	r5, Y+15	; 0x0f
    218c:	6e 84       	ldd	r6, Y+14	; 0x0e
    218e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2190:	8c 84       	ldd	r8, Y+12	; 0x0c
    2192:	9b 84       	ldd	r9, Y+11	; 0x0b
    2194:	aa 84       	ldd	r10, Y+10	; 0x0a
    2196:	b9 84       	ldd	r11, Y+9	; 0x09
    2198:	c8 84       	ldd	r12, Y+8	; 0x08
    219a:	df 80       	ldd	r13, Y+7	; 0x07
    219c:	ee 80       	ldd	r14, Y+6	; 0x06
    219e:	fd 80       	ldd	r15, Y+5	; 0x05
    21a0:	0c 81       	ldd	r16, Y+4	; 0x04
    21a2:	1b 81       	ldd	r17, Y+3	; 0x03
    21a4:	aa 81       	ldd	r26, Y+2	; 0x02
    21a6:	b9 81       	ldd	r27, Y+1	; 0x01
    21a8:	ce 0f       	add	r28, r30
    21aa:	d1 1d       	adc	r29, r1
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	ed 01       	movw	r28, r26
    21b8:	08 95       	ret

000021ba <strcpy>:
    21ba:	fb 01       	movw	r30, r22
    21bc:	dc 01       	movw	r26, r24
    21be:	01 90       	ld	r0, Z+
    21c0:	0d 92       	st	X+, r0
    21c2:	00 20       	and	r0, r0
    21c4:	e1 f7       	brne	.-8      	; 0x21be <strcpy+0x4>
    21c6:	08 95       	ret

000021c8 <_exit>:
    21c8:	f8 94       	cli

000021ca <__stop_program>:
    21ca:	ff cf       	rjmp	.-2      	; 0x21ca <__stop_program>
