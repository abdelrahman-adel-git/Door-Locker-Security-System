
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003540  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00003540  000035d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800180  00800180  000036f4  2**0
                  ALLOC
  3 .stab         00002dfc  00000000  00000000  000036f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002e1f  00000000  00000000  000064f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000930f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000944f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000095bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d000  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d28d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000da5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e5       	ldi	r26, 0x54	; 84
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e5       	ldi	r24, 0x54	; 84
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/************************************************************************************************************/

/*========================================================================================================================*/
int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6e 97       	sbiw	r28, 0x1e	; 30
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*Initializations*/
	LCD_init();
     b5a:	0e 94 30 11 	call	0x2260	; 0x2260 <LCD_init>
	UART_init(&Uart_Configurations);
     b5e:	87 e7       	ldi	r24, 0x77	; 119
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <UART_init>

	SREG.Bits.I = 1; /*Enable Interrupts*/
     b66:	ef e5       	ldi	r30, 0x5F	; 95
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	80 68       	ori	r24, 0x80	; 128
     b6e:	80 83       	st	Z, r24

	/*here is where the user enters the two passwords, the user won't exit this function unless the Control_ECU decides that
	 * two entered passwords are matching*/
	Begin_password_two_entries();
     b70:	0e 94 be 09 	call	0x137c	; 0x137c <Begin_password_two_entries>

	/*Display for the user that the two entered passwords are matching*/
	LCD_clearScreen();
     b74:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, matched_message);
     b78:	20 91 7c 01 	lds	r18, 0x017C
     b7c:	30 91 7d 01 	lds	r19, 0x017D
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	a9 01       	movw	r20, r18
     b86:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a8 ec       	ldi	r26, 0xC8	; 200
     b90:	b3 e4       	ldi	r27, 0x43	; 67
     b92:	89 8f       	std	Y+25, r24	; 0x19
     b94:	9a 8f       	std	Y+26, r25	; 0x1a
     b96:	ab 8f       	std	Y+27, r26	; 0x1b
     b98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9a:	69 8d       	ldd	r22, Y+25	; 0x19
     b9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	4a ef       	ldi	r20, 0xFA	; 250
     ba8:	54 e4       	ldi	r21, 0x44	; 68
     baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	8d 8b       	std	Y+21, r24	; 0x15
     bb4:	9e 8b       	std	Y+22, r25	; 0x16
     bb6:	af 8b       	std	Y+23, r26	; 0x17
     bb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bba:	6d 89       	ldd	r22, Y+21	; 0x15
     bbc:	7e 89       	ldd	r23, Y+22	; 0x16
     bbe:	8f 89       	ldd	r24, Y+23	; 0x17
     bc0:	98 8d       	ldd	r25, Y+24	; 0x18
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e8       	ldi	r20, 0x80	; 128
     bc8:	5f e3       	ldi	r21, 0x3F	; 63
     bca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bce:	88 23       	and	r24, r24
     bd0:	2c f4       	brge	.+10     	; 0xbdc <main+0x96>
		__ticks = 1;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	9c 8b       	std	Y+20, r25	; 0x14
     bd8:	8b 8b       	std	Y+19, r24	; 0x13
     bda:	3f c0       	rjmp	.+126    	; 0xc5a <main+0x114>
	else if (__tmp > 65535)
     bdc:	6d 89       	ldd	r22, Y+21	; 0x15
     bde:	7e 89       	ldd	r23, Y+22	; 0x16
     be0:	8f 89       	ldd	r24, Y+23	; 0x17
     be2:	98 8d       	ldd	r25, Y+24	; 0x18
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	3f ef       	ldi	r19, 0xFF	; 255
     be8:	4f e7       	ldi	r20, 0x7F	; 127
     bea:	57 e4       	ldi	r21, 0x47	; 71
     bec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf0:	18 16       	cp	r1, r24
     bf2:	4c f5       	brge	.+82     	; 0xc46 <main+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf4:	69 8d       	ldd	r22, Y+25	; 0x19
     bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e2       	ldi	r20, 0x20	; 32
     c02:	51 e4       	ldi	r21, 0x41	; 65
     c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	bc 01       	movw	r22, r24
     c0e:	cd 01       	movw	r24, r26
     c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	9c 8b       	std	Y+20, r25	; 0x14
     c1a:	8b 8b       	std	Y+19, r24	; 0x13
     c1c:	0f c0       	rjmp	.+30     	; 0xc3c <main+0xf6>
     c1e:	88 ec       	ldi	r24, 0xC8	; 200
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	9a 8b       	std	Y+18, r25	; 0x12
     c24:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c26:	89 89       	ldd	r24, Y+17	; 0x11
     c28:	9a 89       	ldd	r25, Y+18	; 0x12
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <main+0xe4>
     c2e:	9a 8b       	std	Y+18, r25	; 0x12
     c30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c32:	8b 89       	ldd	r24, Y+19	; 0x13
     c34:	9c 89       	ldd	r25, Y+20	; 0x14
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	9c 8b       	std	Y+20, r25	; 0x14
     c3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3c:	8b 89       	ldd	r24, Y+19	; 0x13
     c3e:	9c 89       	ldd	r25, Y+20	; 0x14
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	69 f7       	brne	.-38     	; 0xc1e <main+0xd8>
     c44:	14 c0       	rjmp	.+40     	; 0xc6e <main+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c46:	6d 89       	ldd	r22, Y+21	; 0x15
     c48:	7e 89       	ldd	r23, Y+22	; 0x16
     c4a:	8f 89       	ldd	r24, Y+23	; 0x17
     c4c:	98 8d       	ldd	r25, Y+24	; 0x18
     c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	9c 8b       	std	Y+20, r25	; 0x14
     c58:	8b 8b       	std	Y+19, r24	; 0x13
     c5a:	8b 89       	ldd	r24, Y+19	; 0x13
     c5c:	9c 89       	ldd	r25, Y+20	; 0x14
     c5e:	98 8b       	std	Y+16, r25	; 0x10
     c60:	8f 87       	std	Y+15, r24	; 0x0f
     c62:	8f 85       	ldd	r24, Y+15	; 0x0f
     c64:	98 89       	ldd	r25, Y+16	; 0x10
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <main+0x120>
     c6a:	98 8b       	std	Y+16, r25	; 0x10
     c6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(400);

	for (;;)
	{
		Display_main_options(); /*displaying the main options screen*/
     c6e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <Display_main_options>

		/*the user is only allowed to enter either '+' or '-', otherwise the system will ignore the input and won't proceed
		 * unless he enters either '+' or '-'*/
		Choose_an_option(&Chosen_option);
     c72:	80 e9       	ldi	r24, 0x90	; 144
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	0e 94 93 0b 	call	0x1726	; 0x1726 <Choose_an_option>
		Send_the_chosen_option_to_Control_ECU(&Chosen_option); /*send the chosen option the Control_ECU
     c7a:	80 e9       	ldi	r24, 0x90	; 144
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Send_the_chosen_option_to_Control_ECU>
		 *                                                       so it can act accordingly*/
		switch (Chosen_option)
     c82:	80 91 90 01 	lds	r24, 0x0190
     c86:	28 2f       	mov	r18, r24
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	3e 8f       	std	Y+30, r19	; 0x1e
     c8c:	2d 8f       	std	Y+29, r18	; 0x1d
     c8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c90:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c92:	8b 32       	cpi	r24, 0x2B	; 43
     c94:	91 05       	cpc	r25, r1
     c96:	31 f0       	breq	.+12     	; 0xca4 <main+0x15e>
     c98:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c9a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     c9c:	2d 32       	cpi	r18, 0x2D	; 45
     c9e:	31 05       	cpc	r19, r1
     ca0:	e1 f1       	breq	.+120    	; 0xd1a <main+0x1d4>
     ca2:	e5 cf       	rjmp	.-54     	; 0xc6e <main+0x128>
		{
		case '+':
			start_password_3_trials(); /*here the system starts the 3 password trials and sends the password
     ca4:	0e 94 2a 0c 	call	0x1854	; 0x1854 <start_password_3_trials>
			 *                           to the Control_ECU and act according to it's response*/
			if (Entered_password_status == WRONG_PASSWORD)
     ca8:	80 91 64 01 	lds	r24, 0x0164
     cac:	88 23       	and	r24, r24
     cae:	e9 f4       	brne	.+58     	; 0xcea <main+0x1a4>
			{
				g_Buzzer_task_completed = 0;
     cb0:	10 92 83 01 	sts	0x0183, r1

				LCD_displayStringRowColumn(0, 0, "Wrong Password  ");
     cb4:	2e e7       	ldi	r18, 0x7E	; 126
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	a9 01       	movw	r20, r18
     cbe:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "Wait for 1 min. ");
     cc2:	2f e8       	ldi	r18, 0x8F	; 143
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	a9 01       	movw	r20, r18
     ccc:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
				Timer1_setCallBack(Buzzer_Call_Back_Function);
     cd0:	87 eb       	ldi	r24, 0xB7	; 183
     cd2:	9c e0       	ldi	r25, 0x0C	; 12
     cd4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Timer1_setCallBack>
				Timer1_init(&Buzzer_Configurations); /*here the system shows the above message for 1 minute (buzzer time)*/
     cd8:	81 e7       	ldi	r24, 0x71	; 113
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Timer1_init>

				/*locking the system until the 1 minute is over*/
				while (!g_Buzzer_task_completed)
     ce0:	80 91 83 01 	lds	r24, 0x0183
     ce4:	88 23       	and	r24, r24
     ce6:	e1 f3       	breq	.-8      	; 0xce0 <main+0x19a>
     ce8:	c2 cf       	rjmp	.-124    	; 0xc6e <main+0x128>
					;
			}
			else
			{
				g_Open_Door_task_completed = 0; /*clearing the flag*/
     cea:	10 92 82 01 	sts	0x0182, r1

				/*Displaying the unlocking and locking door messages*/
				LCD_clearScreen();
     cee:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "Door Unlocking");
     cf2:	20 ea       	ldi	r18, 0xA0	; 160
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	a9 01       	movw	r20, r18
     cfc:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
				Timer1_setCallBack(Unlocking_Door_Call_Back_Function);
     d00:	85 e6       	ldi	r24, 0x65	; 101
     d02:	9c e0       	ldi	r25, 0x0C	; 12
     d04:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Timer1_setCallBack>
				Timer1_init(&LockingandUnlocking_Door_Configurations);
     d08:	85 e6       	ldi	r24, 0x65	; 101
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Timer1_init>
				while (!g_Open_Door_task_completed)
     d10:	80 91 82 01 	lds	r24, 0x0182
     d14:	88 23       	and	r24, r24
     d16:	e1 f3       	breq	.-8      	; 0xd10 <main+0x1ca>
     d18:	aa cf       	rjmp	.-172    	; 0xc6e <main+0x128>
					;
			}
			break;

		case '-':
			start_password_3_trials(); /*here the system starts the 3 password trials and sends the password
     d1a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <start_password_3_trials>
			 *                           to the Control_ECU and act according to it's response*/
			if (Entered_password_status == WRONG_PASSWORD)
     d1e:	80 91 64 01 	lds	r24, 0x0164
     d22:	88 23       	and	r24, r24
     d24:	f9 f4       	brne	.+62     	; 0xd64 <main+0x21e>
			{
				g_Buzzer_task_completed = 0; /*clearing this flag so the system can be locked*/
     d26:	10 92 83 01 	sts	0x0183, r1
				LCD_clearScreen();
     d2a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "Wrong Password");
     d2e:	2f ea       	ldi	r18, 0xAF	; 175
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	a9 01       	movw	r20, r18
     d38:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "Wait for 1 min.");
     d3c:	2e eb       	ldi	r18, 0xBE	; 190
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	a9 01       	movw	r20, r18
     d46:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
				Timer1_setCallBack(Buzzer_Call_Back_Function);
     d4a:	87 eb       	ldi	r24, 0xB7	; 183
     d4c:	9c e0       	ldi	r25, 0x0C	; 12
     d4e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Timer1_setCallBack>
				Timer1_init(&Buzzer_Configurations); /*here the system shows the above message for 1 minute (buzzer time)*/
     d52:	81 e7       	ldi	r24, 0x71	; 113
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Timer1_init>

				/*locking the system until the 1 minute is over*/
				while (!g_Buzzer_task_completed)
     d5a:	80 91 83 01 	lds	r24, 0x0183
     d5e:	88 23       	and	r24, r24
     d60:	e1 f3       	breq	.-8      	; 0xd5a <main+0x214>
     d62:	85 cf       	rjmp	.-246    	; 0xc6e <main+0x128>
			}
			else
			{
				/*here the user begins the new password two entries and won't proceed further
				 * unless he enters matching passwords*/
				Begin_password_two_entries();
     d64:	0e 94 be 09 	call	0x137c	; 0x137c <Begin_password_two_entries>

				/*Display for the user that the two entered passwords are matching*/
				LCD_clearScreen();
     d68:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, matched_message);
     d6c:	20 91 7c 01 	lds	r18, 0x017C
     d70:	30 91 7d 01 	lds	r19, 0x017D
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	a9 01       	movw	r20, r18
     d7a:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	a8 ec       	ldi	r26, 0xC8	; 200
     d84:	b3 e4       	ldi	r27, 0x43	; 67
     d86:	8b 87       	std	Y+11, r24	; 0x0b
     d88:	9c 87       	std	Y+12, r25	; 0x0c
     d8a:	ad 87       	std	Y+13, r26	; 0x0d
     d8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d90:	7c 85       	ldd	r23, Y+12	; 0x0c
     d92:	8d 85       	ldd	r24, Y+13	; 0x0d
     d94:	9e 85       	ldd	r25, Y+14	; 0x0e
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	4a ef       	ldi	r20, 0xFA	; 250
     d9c:	54 e4       	ldi	r21, 0x44	; 68
     d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	8f 83       	std	Y+7, r24	; 0x07
     da8:	98 87       	std	Y+8, r25	; 0x08
     daa:	a9 87       	std	Y+9, r26	; 0x09
     dac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dae:	6f 81       	ldd	r22, Y+7	; 0x07
     db0:	78 85       	ldd	r23, Y+8	; 0x08
     db2:	89 85       	ldd	r24, Y+9	; 0x09
     db4:	9a 85       	ldd	r25, Y+10	; 0x0a
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e8       	ldi	r20, 0x80	; 128
     dbc:	5f e3       	ldi	r21, 0x3F	; 63
     dbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc2:	88 23       	and	r24, r24
     dc4:	2c f4       	brge	.+10     	; 0xdd0 <main+0x28a>
		__ticks = 1;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	9e 83       	std	Y+6, r25	; 0x06
     dcc:	8d 83       	std	Y+5, r24	; 0x05
     dce:	3f c0       	rjmp	.+126    	; 0xe4e <main+0x308>
	else if (__tmp > 65535)
     dd0:	6f 81       	ldd	r22, Y+7	; 0x07
     dd2:	78 85       	ldd	r23, Y+8	; 0x08
     dd4:	89 85       	ldd	r24, Y+9	; 0x09
     dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	3f ef       	ldi	r19, 0xFF	; 255
     ddc:	4f e7       	ldi	r20, 0x7F	; 127
     dde:	57 e4       	ldi	r21, 0x47	; 71
     de0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de4:	18 16       	cp	r1, r24
     de6:	4c f5       	brge	.+82     	; 0xe3a <main+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dea:	7c 85       	ldd	r23, Y+12	; 0x0c
     dec:	8d 85       	ldd	r24, Y+13	; 0x0d
     dee:	9e 85       	ldd	r25, Y+14	; 0x0e
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e2       	ldi	r20, 0x20	; 32
     df6:	51 e4       	ldi	r21, 0x41	; 65
     df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	9e 83       	std	Y+6, r25	; 0x06
     e0e:	8d 83       	std	Y+5, r24	; 0x05
     e10:	0f c0       	rjmp	.+30     	; 0xe30 <main+0x2ea>
     e12:	88 ec       	ldi	r24, 0xC8	; 200
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	9c 83       	std	Y+4, r25	; 0x04
     e18:	8b 83       	std	Y+3, r24	; 0x03
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	9c 81       	ldd	r25, Y+4	; 0x04
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <main+0x2d8>
     e22:	9c 83       	std	Y+4, r25	; 0x04
     e24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	9e 81       	ldd	r25, Y+6	; 0x06
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	9e 83       	std	Y+6, r25	; 0x06
     e2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	9e 81       	ldd	r25, Y+6	; 0x06
     e34:	00 97       	sbiw	r24, 0x00	; 0
     e36:	69 f7       	brne	.-38     	; 0xe12 <main+0x2cc>
     e38:	1a cf       	rjmp	.-460    	; 0xc6e <main+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e3a:	6f 81       	ldd	r22, Y+7	; 0x07
     e3c:	78 85       	ldd	r23, Y+8	; 0x08
     e3e:	89 85       	ldd	r24, Y+9	; 0x09
     e40:	9a 85       	ldd	r25, Y+10	; 0x0a
     e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	9e 83       	std	Y+6, r25	; 0x06
     e4c:	8d 83       	std	Y+5, r24	; 0x05
     e4e:	8d 81       	ldd	r24, Y+5	; 0x05
     e50:	9e 81       	ldd	r25, Y+6	; 0x06
     e52:	9a 83       	std	Y+2, r25	; 0x02
     e54:	89 83       	std	Y+1, r24	; 0x01
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <main+0x314>
     e5e:	9a 83       	std	Y+2, r25	; 0x02
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	05 cf       	rjmp	.-502    	; 0xc6e <main+0x128>

00000e64 <Begin_password_first_entry>:
/*========================================================================================================================*/

/**********************************************FUNCTIONS_DEFINITIONS*******************************************************/

void Begin_password_first_entry(uint8 *key_ptr, uint32 *password_1st_entry_ptr)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	63 97       	sbiw	r28, 0x13	; 19
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	99 8b       	std	Y+17, r25	; 0x11
     e7a:	88 8b       	std	Y+16, r24	; 0x10
     e7c:	7b 8b       	std	Y+19, r23	; 0x13
     e7e:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	(*password_1st_entry_ptr) = 0;
     e80:	ea 89       	ldd	r30, Y+18	; 0x12
     e82:	fb 89       	ldd	r31, Y+19	; 0x13
     e84:	10 82       	st	Z, r1
     e86:	11 82       	std	Z+1, r1	; 0x01
     e88:	12 82       	std	Z+2, r1	; 0x02
     e8a:	13 82       	std	Z+3, r1	; 0x03

	LCD_clearScreen();
     e8c:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_clearScreen>
	if (Chosen_option == '-')
     e90:	80 91 90 01 	lds	r24, 0x0190
     e94:	8d 32       	cpi	r24, 0x2D	; 45
     e96:	41 f4       	brne	.+16     	; 0xea8 <Begin_password_first_entry+0x44>
		LCD_displayStringRowColumn(0, 0, "Enter new pass:");
     e98:	2e ec       	ldi	r18, 0xCE	; 206
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	a9 01       	movw	r20, r18
     ea2:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
     ea6:	07 c0       	rjmp	.+14     	; 0xeb6 <Begin_password_first_entry+0x52>
	else
		LCD_displayStringRowColumn(0, 0, "Plz enter pass:");
     ea8:	2e ed       	ldi	r18, 0xDE	; 222
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	a9 01       	movw	r20, r18
     eb2:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>

	LCD_moveCursor(1, 0);
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_moveCursor>
	for (i = 0; i < 5; i++)
     ebe:	1f 86       	std	Y+15, r1	; 0x0f
     ec0:	a4 c0       	rjmp	.+328    	; 0x100a <Begin_password_first_entry+0x1a6>
	{
		do
		{
			*key_ptr = KEYPAD_getPressedKey();
     ec2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <KEYPAD_getPressedKey>
     ec6:	e8 89       	ldd	r30, Y+16	; 0x10
     ec8:	f9 89       	ldd	r31, Y+17	; 0x11
     eca:	80 83       	st	Z, r24
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	a8 ec       	ldi	r26, 0xC8	; 200
     ed2:	b3 e4       	ldi	r27, 0x43	; 67
     ed4:	8b 87       	std	Y+11, r24	; 0x0b
     ed6:	9c 87       	std	Y+12, r25	; 0x0c
     ed8:	ad 87       	std	Y+13, r26	; 0x0d
     eda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     edc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ede:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	4a ef       	ldi	r20, 0xFA	; 250
     eea:	54 e4       	ldi	r21, 0x44	; 68
     eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	8f 83       	std	Y+7, r24	; 0x07
     ef6:	98 87       	std	Y+8, r25	; 0x08
     ef8:	a9 87       	std	Y+9, r26	; 0x09
     efa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     efc:	6f 81       	ldd	r22, Y+7	; 0x07
     efe:	78 85       	ldd	r23, Y+8	; 0x08
     f00:	89 85       	ldd	r24, Y+9	; 0x09
     f02:	9a 85       	ldd	r25, Y+10	; 0x0a
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 e8       	ldi	r20, 0x80	; 128
     f0a:	5f e3       	ldi	r21, 0x3F	; 63
     f0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f10:	88 23       	and	r24, r24
     f12:	2c f4       	brge	.+10     	; 0xf1e <Begin_password_first_entry+0xba>
		__ticks = 1;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	3f c0       	rjmp	.+126    	; 0xf9c <Begin_password_first_entry+0x138>
	else if (__tmp > 65535)
     f1e:	6f 81       	ldd	r22, Y+7	; 0x07
     f20:	78 85       	ldd	r23, Y+8	; 0x08
     f22:	89 85       	ldd	r24, Y+9	; 0x09
     f24:	9a 85       	ldd	r25, Y+10	; 0x0a
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	3f ef       	ldi	r19, 0xFF	; 255
     f2a:	4f e7       	ldi	r20, 0x7F	; 127
     f2c:	57 e4       	ldi	r21, 0x47	; 71
     f2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f32:	18 16       	cp	r1, r24
     f34:	4c f5       	brge	.+82     	; 0xf88 <Begin_password_first_entry+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f36:	6b 85       	ldd	r22, Y+11	; 0x0b
     f38:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e2       	ldi	r20, 0x20	; 32
     f44:	51 e4       	ldi	r21, 0x41	; 65
     f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	bc 01       	movw	r22, r24
     f50:	cd 01       	movw	r24, r26
     f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	9e 83       	std	Y+6, r25	; 0x06
     f5c:	8d 83       	std	Y+5, r24	; 0x05
     f5e:	0f c0       	rjmp	.+30     	; 0xf7e <Begin_password_first_entry+0x11a>
     f60:	88 ec       	ldi	r24, 0xC8	; 200
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9c 83       	std	Y+4, r25	; 0x04
     f66:	8b 83       	std	Y+3, r24	; 0x03
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <Begin_password_first_entry+0x108>
     f70:	9c 83       	std	Y+4, r25	; 0x04
     f72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f74:	8d 81       	ldd	r24, Y+5	; 0x05
     f76:	9e 81       	ldd	r25, Y+6	; 0x06
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	9e 83       	std	Y+6, r25	; 0x06
     f7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7e:	8d 81       	ldd	r24, Y+5	; 0x05
     f80:	9e 81       	ldd	r25, Y+6	; 0x06
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	69 f7       	brne	.-38     	; 0xf60 <Begin_password_first_entry+0xfc>
     f86:	14 c0       	rjmp	.+40     	; 0xfb0 <Begin_password_first_entry+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f88:	6f 81       	ldd	r22, Y+7	; 0x07
     f8a:	78 85       	ldd	r23, Y+8	; 0x08
     f8c:	89 85       	ldd	r24, Y+9	; 0x09
     f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	9e 83       	std	Y+6, r25	; 0x06
     f9a:	8d 83       	std	Y+5, r24	; 0x05
     f9c:	8d 81       	ldd	r24, Y+5	; 0x05
     f9e:	9e 81       	ldd	r25, Y+6	; 0x06
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	9a 81       	ldd	r25, Y+2	; 0x02
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <Begin_password_first_entry+0x144>
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(400); /* Press time */
		} while (*key_ptr > 9);
     fb0:	e8 89       	ldd	r30, Y+16	; 0x10
     fb2:	f9 89       	ldd	r31, Y+17	; 0x11
     fb4:	80 81       	ld	r24, Z
     fb6:	8a 30       	cpi	r24, 0x0A	; 10
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <Begin_password_first_entry+0x158>
     fba:	83 cf       	rjmp	.-250    	; 0xec2 <Begin_password_first_entry+0x5e>
		LCD_displayCharacter('*');
     fbc:	8a e2       	ldi	r24, 0x2A	; 42
     fbe:	0e 94 bb 13 	call	0x2776	; 0x2776 <LCD_displayCharacter>
		(*password_1st_entry_ptr) = ((*password_1st_entry_ptr) * 10) + (*key_ptr);
     fc2:	ea 89       	ldd	r30, Y+18	; 0x12
     fc4:	fb 89       	ldd	r31, Y+19	; 0x13
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	a2 81       	ldd	r26, Z+2	; 0x02
     fcc:	b3 81       	ldd	r27, Z+3	; 0x03
     fce:	2a e0       	ldi	r18, 0x0A	; 10
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__mulsi3>
     fde:	9b 01       	movw	r18, r22
     fe0:	ac 01       	movw	r20, r24
     fe2:	e8 89       	ldd	r30, Y+16	; 0x10
     fe4:	f9 89       	ldd	r31, Y+17	; 0x11
     fe6:	80 81       	ld	r24, Z
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a0 e0       	ldi	r26, 0x00	; 0
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	82 0f       	add	r24, r18
     ff2:	93 1f       	adc	r25, r19
     ff4:	a4 1f       	adc	r26, r20
     ff6:	b5 1f       	adc	r27, r21
     ff8:	ea 89       	ldd	r30, Y+18	; 0x12
     ffa:	fb 89       	ldd	r31, Y+19	; 0x13
     ffc:	80 83       	st	Z, r24
     ffe:	91 83       	std	Z+1, r25	; 0x01
    1000:	a2 83       	std	Z+2, r26	; 0x02
    1002:	b3 83       	std	Z+3, r27	; 0x03
		LCD_displayStringRowColumn(0, 0, "Enter new pass:");
	else
		LCD_displayStringRowColumn(0, 0, "Plz enter pass:");

	LCD_moveCursor(1, 0);
	for (i = 0; i < 5; i++)
    1004:	8f 85       	ldd	r24, Y+15	; 0x0f
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	8f 87       	std	Y+15, r24	; 0x0f
    100a:	8f 85       	ldd	r24, Y+15	; 0x0f
    100c:	85 30       	cpi	r24, 0x05	; 5
    100e:	08 f4       	brcc	.+2      	; 0x1012 <Begin_password_first_entry+0x1ae>
    1010:	58 cf       	rjmp	.-336    	; 0xec2 <Begin_password_first_entry+0x5e>
			_delay_ms(400); /* Press time */
		} while (*key_ptr > 9);
		LCD_displayCharacter('*');
		(*password_1st_entry_ptr) = ((*password_1st_entry_ptr) * 10) + (*key_ptr);
	}
}
    1012:	63 96       	adiw	r28, 0x13	; 19
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <Begin_password_second_entry>:

void Begin_password_second_entry(uint8 *key_ptr, uint32 *password_2nd_entry_ptr)
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	63 97       	sbiw	r28, 0x13	; 19
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	99 8b       	std	Y+17, r25	; 0x11
    103a:	88 8b       	std	Y+16, r24	; 0x10
    103c:	7b 8b       	std	Y+19, r23	; 0x13
    103e:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	(*password_2nd_entry_ptr) = 0;
    1040:	ea 89       	ldd	r30, Y+18	; 0x12
    1042:	fb 89       	ldd	r31, Y+19	; 0x13
    1044:	10 82       	st	Z, r1
    1046:	11 82       	std	Z+1, r1	; 0x01
    1048:	12 82       	std	Z+2, r1	; 0x02
    104a:	13 82       	std	Z+3, r1	; 0x03

	LCD_clearScreen();
    104c:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz re-enter the:");
    1050:	2e ee       	ldi	r18, 0xEE	; 238
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	a9 01       	movw	r20, r18
    105a:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_moveCursor>
	LCD_displayString("same pass: ");
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <LCD_displayString>
	for (i = 0; i < 5; i++)
    106e:	1f 86       	std	Y+15, r1	; 0x0f
    1070:	a4 c0       	rjmp	.+328    	; 0x11ba <Begin_password_second_entry+0x196>
	{
		do
		{
			*key_ptr = KEYPAD_getPressedKey();
    1072:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <KEYPAD_getPressedKey>
    1076:	e8 89       	ldd	r30, Y+16	; 0x10
    1078:	f9 89       	ldd	r31, Y+17	; 0x11
    107a:	80 83       	st	Z, r24
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a8 ec       	ldi	r26, 0xC8	; 200
    1082:	b3 e4       	ldi	r27, 0x43	; 67
    1084:	8b 87       	std	Y+11, r24	; 0x0b
    1086:	9c 87       	std	Y+12, r25	; 0x0c
    1088:	ad 87       	std	Y+13, r26	; 0x0d
    108a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108c:	6b 85       	ldd	r22, Y+11	; 0x0b
    108e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1090:	8d 85       	ldd	r24, Y+13	; 0x0d
    1092:	9e 85       	ldd	r25, Y+14	; 0x0e
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	4a ef       	ldi	r20, 0xFA	; 250
    109a:	54 e4       	ldi	r21, 0x44	; 68
    109c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	8f 83       	std	Y+7, r24	; 0x07
    10a6:	98 87       	std	Y+8, r25	; 0x08
    10a8:	a9 87       	std	Y+9, r26	; 0x09
    10aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ac:	6f 81       	ldd	r22, Y+7	; 0x07
    10ae:	78 85       	ldd	r23, Y+8	; 0x08
    10b0:	89 85       	ldd	r24, Y+9	; 0x09
    10b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e8       	ldi	r20, 0x80	; 128
    10ba:	5f e3       	ldi	r21, 0x3F	; 63
    10bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10c0:	88 23       	and	r24, r24
    10c2:	2c f4       	brge	.+10     	; 0x10ce <Begin_password_second_entry+0xaa>
		__ticks = 1;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	9e 83       	std	Y+6, r25	; 0x06
    10ca:	8d 83       	std	Y+5, r24	; 0x05
    10cc:	3f c0       	rjmp	.+126    	; 0x114c <Begin_password_second_entry+0x128>
	else if (__tmp > 65535)
    10ce:	6f 81       	ldd	r22, Y+7	; 0x07
    10d0:	78 85       	ldd	r23, Y+8	; 0x08
    10d2:	89 85       	ldd	r24, Y+9	; 0x09
    10d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	3f ef       	ldi	r19, 0xFF	; 255
    10da:	4f e7       	ldi	r20, 0x7F	; 127
    10dc:	57 e4       	ldi	r21, 0x47	; 71
    10de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e2:	18 16       	cp	r1, r24
    10e4:	4c f5       	brge	.+82     	; 0x1138 <Begin_password_second_entry+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e2       	ldi	r20, 0x20	; 32
    10f4:	51 e4       	ldi	r21, 0x41	; 65
    10f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
    110e:	0f c0       	rjmp	.+30     	; 0x112e <Begin_password_second_entry+0x10a>
    1110:	88 ec       	ldi	r24, 0xC8	; 200
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9c 83       	std	Y+4, r25	; 0x04
    1116:	8b 83       	std	Y+3, r24	; 0x03
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <Begin_password_second_entry+0xf8>
    1120:	9c 83       	std	Y+4, r25	; 0x04
    1122:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	9e 81       	ldd	r25, Y+6	; 0x06
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	9e 83       	std	Y+6, r25	; 0x06
    112c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	9e 81       	ldd	r25, Y+6	; 0x06
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	69 f7       	brne	.-38     	; 0x1110 <Begin_password_second_entry+0xec>
    1136:	14 c0       	rjmp	.+40     	; 0x1160 <Begin_password_second_entry+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1138:	6f 81       	ldd	r22, Y+7	; 0x07
    113a:	78 85       	ldd	r23, Y+8	; 0x08
    113c:	89 85       	ldd	r24, Y+9	; 0x09
    113e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	9e 83       	std	Y+6, r25	; 0x06
    114a:	8d 83       	std	Y+5, r24	; 0x05
    114c:	8d 81       	ldd	r24, Y+5	; 0x05
    114e:	9e 81       	ldd	r25, Y+6	; 0x06
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <Begin_password_second_entry+0x134>
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(400); /* Press time */
		} while (*key_ptr > 9);
    1160:	e8 89       	ldd	r30, Y+16	; 0x10
    1162:	f9 89       	ldd	r31, Y+17	; 0x11
    1164:	80 81       	ld	r24, Z
    1166:	8a 30       	cpi	r24, 0x0A	; 10
    1168:	08 f0       	brcs	.+2      	; 0x116c <Begin_password_second_entry+0x148>
    116a:	83 cf       	rjmp	.-250    	; 0x1072 <Begin_password_second_entry+0x4e>
		LCD_displayCharacter('*');
    116c:	8a e2       	ldi	r24, 0x2A	; 42
    116e:	0e 94 bb 13 	call	0x2776	; 0x2776 <LCD_displayCharacter>
		(*password_2nd_entry_ptr) = ((*password_2nd_entry_ptr) * 10) + (*key_ptr);
    1172:	ea 89       	ldd	r30, Y+18	; 0x12
    1174:	fb 89       	ldd	r31, Y+19	; 0x13
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	a2 81       	ldd	r26, Z+2	; 0x02
    117c:	b3 81       	ldd	r27, Z+3	; 0x03
    117e:	2a e0       	ldi	r18, 0x0A	; 10
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	bc 01       	movw	r22, r24
    1188:	cd 01       	movw	r24, r26
    118a:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__mulsi3>
    118e:	9b 01       	movw	r18, r22
    1190:	ac 01       	movw	r20, r24
    1192:	e8 89       	ldd	r30, Y+16	; 0x10
    1194:	f9 89       	ldd	r31, Y+17	; 0x11
    1196:	80 81       	ld	r24, Z
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a0 e0       	ldi	r26, 0x00	; 0
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	82 0f       	add	r24, r18
    11a2:	93 1f       	adc	r25, r19
    11a4:	a4 1f       	adc	r26, r20
    11a6:	b5 1f       	adc	r27, r21
    11a8:	ea 89       	ldd	r30, Y+18	; 0x12
    11aa:	fb 89       	ldd	r31, Y+19	; 0x13
    11ac:	80 83       	st	Z, r24
    11ae:	91 83       	std	Z+1, r25	; 0x01
    11b0:	a2 83       	std	Z+2, r26	; 0x02
    11b2:	b3 83       	std	Z+3, r27	; 0x03

	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Plz re-enter the:");
	LCD_moveCursor(1, 0);
	LCD_displayString("same pass: ");
	for (i = 0; i < 5; i++)
    11b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11b6:	8f 5f       	subi	r24, 0xFF	; 255
    11b8:	8f 87       	std	Y+15, r24	; 0x0f
    11ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    11bc:	85 30       	cpi	r24, 0x05	; 5
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <Begin_password_second_entry+0x19e>
    11c0:	58 cf       	rjmp	.-336    	; 0x1072 <Begin_password_second_entry+0x4e>
			_delay_ms(400); /* Press time */
		} while (*key_ptr > 9);
		LCD_displayCharacter('*');
		(*password_2nd_entry_ptr) = ((*password_2nd_entry_ptr) * 10) + (*key_ptr);
	}
}
    11c2:	63 96       	adiw	r28, 0x13	; 19
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <Enter_password>:

void Enter_password(uint8 *key_ptr, uint32 *Entered_password_ptr)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	63 97       	sbiw	r28, 0x13	; 19
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	99 8b       	std	Y+17, r25	; 0x11
    11ea:	88 8b       	std	Y+16, r24	; 0x10
    11ec:	7b 8b       	std	Y+19, r23	; 0x13
    11ee:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	(*Entered_password_ptr) = 0;
    11f0:	ea 89       	ldd	r30, Y+18	; 0x12
    11f2:	fb 89       	ldd	r31, Y+19	; 0x13
    11f4:	10 82       	st	Z, r1
    11f6:	11 82       	std	Z+1, r1	; 0x01
    11f8:	12 82       	std	Z+2, r1	; 0x02
    11fa:	13 82       	std	Z+3, r1	; 0x03

	LCD_clearScreen();
    11fc:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:");
    1200:	2e ed       	ldi	r18, 0xDE	; 222
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_moveCursor>
	for (i = 0; i < 5; i++)
    1216:	1f 86       	std	Y+15, r1	; 0x0f
    1218:	a4 c0       	rjmp	.+328    	; 0x1362 <Enter_password+0x18e>
	{
		do
		{
			*key_ptr = KEYPAD_getPressedKey();
    121a:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <KEYPAD_getPressedKey>
    121e:	e8 89       	ldd	r30, Y+16	; 0x10
    1220:	f9 89       	ldd	r31, Y+17	; 0x11
    1222:	80 83       	st	Z, r24
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a8 ec       	ldi	r26, 0xC8	; 200
    122a:	b3 e4       	ldi	r27, 0x43	; 67
    122c:	8b 87       	std	Y+11, r24	; 0x0b
    122e:	9c 87       	std	Y+12, r25	; 0x0c
    1230:	ad 87       	std	Y+13, r26	; 0x0d
    1232:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1234:	6b 85       	ldd	r22, Y+11	; 0x0b
    1236:	7c 85       	ldd	r23, Y+12	; 0x0c
    1238:	8d 85       	ldd	r24, Y+13	; 0x0d
    123a:	9e 85       	ldd	r25, Y+14	; 0x0e
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	4a ef       	ldi	r20, 0xFA	; 250
    1242:	54 e4       	ldi	r21, 0x44	; 68
    1244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	8f 83       	std	Y+7, r24	; 0x07
    124e:	98 87       	std	Y+8, r25	; 0x08
    1250:	a9 87       	std	Y+9, r26	; 0x09
    1252:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1254:	6f 81       	ldd	r22, Y+7	; 0x07
    1256:	78 85       	ldd	r23, Y+8	; 0x08
    1258:	89 85       	ldd	r24, Y+9	; 0x09
    125a:	9a 85       	ldd	r25, Y+10	; 0x0a
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e8       	ldi	r20, 0x80	; 128
    1262:	5f e3       	ldi	r21, 0x3F	; 63
    1264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1268:	88 23       	and	r24, r24
    126a:	2c f4       	brge	.+10     	; 0x1276 <Enter_password+0xa2>
		__ticks = 1;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9e 83       	std	Y+6, r25	; 0x06
    1272:	8d 83       	std	Y+5, r24	; 0x05
    1274:	3f c0       	rjmp	.+126    	; 0x12f4 <Enter_password+0x120>
	else if (__tmp > 65535)
    1276:	6f 81       	ldd	r22, Y+7	; 0x07
    1278:	78 85       	ldd	r23, Y+8	; 0x08
    127a:	89 85       	ldd	r24, Y+9	; 0x09
    127c:	9a 85       	ldd	r25, Y+10	; 0x0a
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	3f ef       	ldi	r19, 0xFF	; 255
    1282:	4f e7       	ldi	r20, 0x7F	; 127
    1284:	57 e4       	ldi	r21, 0x47	; 71
    1286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    128a:	18 16       	cp	r1, r24
    128c:	4c f5       	brge	.+82     	; 0x12e0 <Enter_password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1290:	7c 85       	ldd	r23, Y+12	; 0x0c
    1292:	8d 85       	ldd	r24, Y+13	; 0x0d
    1294:	9e 85       	ldd	r25, Y+14	; 0x0e
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e2       	ldi	r20, 0x20	; 32
    129c:	51 e4       	ldi	r21, 0x41	; 65
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	8d 83       	std	Y+5, r24	; 0x05
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <Enter_password+0x102>
    12b8:	88 ec       	ldi	r24, 0xC8	; 200
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9c 83       	std	Y+4, r25	; 0x04
    12be:	8b 83       	std	Y+3, r24	; 0x03
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <Enter_password+0xf0>
    12c8:	9c 83       	std	Y+4, r25	; 0x04
    12ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	69 f7       	brne	.-38     	; 0x12b8 <Enter_password+0xe4>
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <Enter_password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e0:	6f 81       	ldd	r22, Y+7	; 0x07
    12e2:	78 85       	ldd	r23, Y+8	; 0x08
    12e4:	89 85       	ldd	r24, Y+9	; 0x09
    12e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9e 83       	std	Y+6, r25	; 0x06
    12f2:	8d 83       	std	Y+5, r24	; 0x05
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <Enter_password+0x12c>
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(400); /* Press time */
		} while (*key_ptr > 9);
    1308:	e8 89       	ldd	r30, Y+16	; 0x10
    130a:	f9 89       	ldd	r31, Y+17	; 0x11
    130c:	80 81       	ld	r24, Z
    130e:	8a 30       	cpi	r24, 0x0A	; 10
    1310:	08 f0       	brcs	.+2      	; 0x1314 <Enter_password+0x140>
    1312:	83 cf       	rjmp	.-250    	; 0x121a <Enter_password+0x46>
		LCD_displayCharacter('*');
    1314:	8a e2       	ldi	r24, 0x2A	; 42
    1316:	0e 94 bb 13 	call	0x2776	; 0x2776 <LCD_displayCharacter>
		(*Entered_password_ptr) = ((*Entered_password_ptr) * 10) + (*key_ptr);
    131a:	ea 89       	ldd	r30, Y+18	; 0x12
    131c:	fb 89       	ldd	r31, Y+19	; 0x13
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	a2 81       	ldd	r26, Z+2	; 0x02
    1324:	b3 81       	ldd	r27, Z+3	; 0x03
    1326:	2a e0       	ldi	r18, 0x0A	; 10
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__mulsi3>
    1336:	9b 01       	movw	r18, r22
    1338:	ac 01       	movw	r20, r24
    133a:	e8 89       	ldd	r30, Y+16	; 0x10
    133c:	f9 89       	ldd	r31, Y+17	; 0x11
    133e:	80 81       	ld	r24, Z
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a0 e0       	ldi	r26, 0x00	; 0
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	82 0f       	add	r24, r18
    134a:	93 1f       	adc	r25, r19
    134c:	a4 1f       	adc	r26, r20
    134e:	b5 1f       	adc	r27, r21
    1350:	ea 89       	ldd	r30, Y+18	; 0x12
    1352:	fb 89       	ldd	r31, Y+19	; 0x13
    1354:	80 83       	st	Z, r24
    1356:	91 83       	std	Z+1, r25	; 0x01
    1358:	a2 83       	std	Z+2, r26	; 0x02
    135a:	b3 83       	std	Z+3, r27	; 0x03
	(*Entered_password_ptr) = 0;

	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:");
	LCD_moveCursor(1, 0);
	for (i = 0; i < 5; i++)
    135c:	8f 85       	ldd	r24, Y+15	; 0x0f
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	8f 87       	std	Y+15, r24	; 0x0f
    1362:	8f 85       	ldd	r24, Y+15	; 0x0f
    1364:	85 30       	cpi	r24, 0x05	; 5
    1366:	08 f4       	brcc	.+2      	; 0x136a <Enter_password+0x196>
    1368:	58 cf       	rjmp	.-336    	; 0x121a <Enter_password+0x46>
			_delay_ms(400); /* Press time */
		} while (*key_ptr > 9);
		LCD_displayCharacter('*');
		(*Entered_password_ptr) = ((*Entered_password_ptr) * 10) + (*key_ptr);
	}
}
    136a:	63 96       	adiw	r28, 0x13	; 19
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <Begin_password_two_entries>:

void Begin_password_two_entries(void)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	2e 97       	sbiw	r28, 0x0e	; 14
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
	do
	{
		Begin_password_first_entry(&key, &password_1st_entry);
    1390:	80 e8       	ldi	r24, 0x80	; 128
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	21 e9       	ldi	r18, 0x91	; 145
    1396:	31 e0       	ldi	r19, 0x01	; 1
    1398:	b9 01       	movw	r22, r18
    139a:	0e 94 32 07 	call	0xe64	; 0xe64 <Begin_password_first_entry>
		Wait_for_Enter_button(&key);
    139e:	80 e8       	ldi	r24, 0x80	; 128
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	0e 94 8c 0a 	call	0x1518	; 0x1518 <Wait_for_Enter_button>
		Begin_password_second_entry(&key, &password_2nd_entry);
    13a6:	80 e8       	ldi	r24, 0x80	; 128
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	2c e8       	ldi	r18, 0x8C	; 140
    13ac:	31 e0       	ldi	r19, 0x01	; 1
    13ae:	b9 01       	movw	r22, r18
    13b0:	0e 94 12 08 	call	0x1024	; 0x1024 <Begin_password_second_entry>
		Wait_for_Enter_button(&key);
    13b4:	80 e8       	ldi	r24, 0x80	; 128
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <Wait_for_Enter_button>

		Send_password_1st_entry_to_Control_ECU(password_1st_entry_1st_byte_address);
    13bc:	80 91 5c 01 	lds	r24, 0x015C
    13c0:	90 91 5d 01 	lds	r25, 0x015D
    13c4:	0e 94 1e 0b 	call	0x163c	; 0x163c <Send_password_1st_entry_to_Control_ECU>
		Send_password_2nd_entry_to_Control_ECU(password_2nd_entry_1st_byte_address);
    13c8:	80 91 5e 01 	lds	r24, 0x015E
    13cc:	90 91 5f 01 	lds	r25, 0x015F
    13d0:	0e 94 3e 0b 	call	0x167c	; 0x167c <Send_password_2nd_entry_to_Control_ECU>

		UART_receiveString(Passwords_matching_status_message);
    13d4:	89 e9       	ldi	r24, 0x99	; 153
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	0e 94 39 17 	call	0x2e72	; 0x2e72 <UART_receiveString>
		if (strcmp((const char*) Passwords_matching_status_message, matched_message) != 0)
    13dc:	20 91 7c 01 	lds	r18, 0x017C
    13e0:	30 91 7d 01 	lds	r19, 0x017D
    13e4:	89 e9       	ldi	r24, 0x99	; 153
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	b9 01       	movw	r22, r18
    13ea:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <strcmp>
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <Begin_password_two_entries+0x78>
    13f2:	7d c0       	rjmp	.+250    	; 0x14ee <Begin_password_two_entries+0x172>
		{
			LCD_clearScreen();
    13f4:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, not_matched_message);
    13f8:	20 91 7e 01 	lds	r18, 0x017E
    13fc:	30 91 7f 01 	lds	r19, 0x017F
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a8 ec       	ldi	r26, 0xC8	; 200
    1410:	b3 e4       	ldi	r27, 0x43	; 67
    1412:	8b 87       	std	Y+11, r24	; 0x0b
    1414:	9c 87       	std	Y+12, r25	; 0x0c
    1416:	ad 87       	std	Y+13, r26	; 0x0d
    1418:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141a:	6b 85       	ldd	r22, Y+11	; 0x0b
    141c:	7c 85       	ldd	r23, Y+12	; 0x0c
    141e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1420:	9e 85       	ldd	r25, Y+14	; 0x0e
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	4a ef       	ldi	r20, 0xFA	; 250
    1428:	54 e4       	ldi	r21, 0x44	; 68
    142a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	8f 83       	std	Y+7, r24	; 0x07
    1434:	98 87       	std	Y+8, r25	; 0x08
    1436:	a9 87       	std	Y+9, r26	; 0x09
    1438:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    143a:	6f 81       	ldd	r22, Y+7	; 0x07
    143c:	78 85       	ldd	r23, Y+8	; 0x08
    143e:	89 85       	ldd	r24, Y+9	; 0x09
    1440:	9a 85       	ldd	r25, Y+10	; 0x0a
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e8       	ldi	r20, 0x80	; 128
    1448:	5f e3       	ldi	r21, 0x3F	; 63
    144a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    144e:	88 23       	and	r24, r24
    1450:	2c f4       	brge	.+10     	; 0x145c <Begin_password_two_entries+0xe0>
		__ticks = 1;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	8d 83       	std	Y+5, r24	; 0x05
    145a:	3f c0       	rjmp	.+126    	; 0x14da <Begin_password_two_entries+0x15e>
	else if (__tmp > 65535)
    145c:	6f 81       	ldd	r22, Y+7	; 0x07
    145e:	78 85       	ldd	r23, Y+8	; 0x08
    1460:	89 85       	ldd	r24, Y+9	; 0x09
    1462:	9a 85       	ldd	r25, Y+10	; 0x0a
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	3f ef       	ldi	r19, 0xFF	; 255
    1468:	4f e7       	ldi	r20, 0x7F	; 127
    146a:	57 e4       	ldi	r21, 0x47	; 71
    146c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1470:	18 16       	cp	r1, r24
    1472:	4c f5       	brge	.+82     	; 0x14c6 <Begin_password_two_entries+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1474:	6b 85       	ldd	r22, Y+11	; 0x0b
    1476:	7c 85       	ldd	r23, Y+12	; 0x0c
    1478:	8d 85       	ldd	r24, Y+13	; 0x0d
    147a:	9e 85       	ldd	r25, Y+14	; 0x0e
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e2       	ldi	r20, 0x20	; 32
    1482:	51 e4       	ldi	r21, 0x41	; 65
    1484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	9e 83       	std	Y+6, r25	; 0x06
    149a:	8d 83       	std	Y+5, r24	; 0x05
    149c:	0f c0       	rjmp	.+30     	; 0x14bc <Begin_password_two_entries+0x140>
    149e:	88 ec       	ldi	r24, 0xC8	; 200
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	9c 83       	std	Y+4, r25	; 0x04
    14a4:	8b 83       	std	Y+3, r24	; 0x03
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <Begin_password_two_entries+0x12e>
    14ae:	9c 83       	std	Y+4, r25	; 0x04
    14b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	69 f7       	brne	.-38     	; 0x149e <Begin_password_two_entries+0x122>
    14c4:	14 c0       	rjmp	.+40     	; 0x14ee <Begin_password_two_entries+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c6:	6f 81       	ldd	r22, Y+7	; 0x07
    14c8:	78 85       	ldd	r23, Y+8	; 0x08
    14ca:	89 85       	ldd	r24, Y+9	; 0x09
    14cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9e 83       	std	Y+6, r25	; 0x06
    14d8:	8d 83       	std	Y+5, r24	; 0x05
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	9a 81       	ldd	r25, Y+2	; 0x02
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <Begin_password_two_entries+0x16a>
    14ea:	9a 83       	std	Y+2, r25	; 0x02
    14ec:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(400);
		}
	} while (strcmp((const char*) Passwords_matching_status_message, matched_message) != 0);
    14ee:	20 91 7c 01 	lds	r18, 0x017C
    14f2:	30 91 7d 01 	lds	r19, 0x017D
    14f6:	89 e9       	ldi	r24, 0x99	; 153
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	b9 01       	movw	r22, r18
    14fc:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <strcmp>
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	09 f0       	breq	.+2      	; 0x1506 <Begin_password_two_entries+0x18a>
    1504:	45 cf       	rjmp	.-374    	; 0x1390 <Begin_password_two_entries+0x14>

}
    1506:	2e 96       	adiw	r28, 0x0e	; 14
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <Wait_for_Enter_button>:

void Wait_for_Enter_button(uint8 *key_ptr)
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	60 97       	sbiw	r28, 0x10	; 16
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	98 8b       	std	Y+16, r25	; 0x10
    152e:	8f 87       	std	Y+15, r24	; 0x0f
	do
	{
		*key_ptr = KEYPAD_getPressedKey();
    1530:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <KEYPAD_getPressedKey>
    1534:	ef 85       	ldd	r30, Y+15	; 0x0f
    1536:	f8 89       	ldd	r31, Y+16	; 0x10
    1538:	80 83       	st	Z, r24
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a8 ec       	ldi	r26, 0xC8	; 200
    1540:	b3 e4       	ldi	r27, 0x43	; 67
    1542:	8b 87       	std	Y+11, r24	; 0x0b
    1544:	9c 87       	std	Y+12, r25	; 0x0c
    1546:	ad 87       	std	Y+13, r26	; 0x0d
    1548:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154a:	6b 85       	ldd	r22, Y+11	; 0x0b
    154c:	7c 85       	ldd	r23, Y+12	; 0x0c
    154e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1550:	9e 85       	ldd	r25, Y+14	; 0x0e
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	4a ef       	ldi	r20, 0xFA	; 250
    1558:	54 e4       	ldi	r21, 0x44	; 68
    155a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	8f 83       	std	Y+7, r24	; 0x07
    1564:	98 87       	std	Y+8, r25	; 0x08
    1566:	a9 87       	std	Y+9, r26	; 0x09
    1568:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    156a:	6f 81       	ldd	r22, Y+7	; 0x07
    156c:	78 85       	ldd	r23, Y+8	; 0x08
    156e:	89 85       	ldd	r24, Y+9	; 0x09
    1570:	9a 85       	ldd	r25, Y+10	; 0x0a
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e8       	ldi	r20, 0x80	; 128
    1578:	5f e3       	ldi	r21, 0x3F	; 63
    157a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    157e:	88 23       	and	r24, r24
    1580:	2c f4       	brge	.+10     	; 0x158c <Wait_for_Enter_button+0x74>
		__ticks = 1;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
    158a:	3f c0       	rjmp	.+126    	; 0x160a <Wait_for_Enter_button+0xf2>
	else if (__tmp > 65535)
    158c:	6f 81       	ldd	r22, Y+7	; 0x07
    158e:	78 85       	ldd	r23, Y+8	; 0x08
    1590:	89 85       	ldd	r24, Y+9	; 0x09
    1592:	9a 85       	ldd	r25, Y+10	; 0x0a
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	3f ef       	ldi	r19, 0xFF	; 255
    1598:	4f e7       	ldi	r20, 0x7F	; 127
    159a:	57 e4       	ldi	r21, 0x47	; 71
    159c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	4c f5       	brge	.+82     	; 0x15f6 <Wait_for_Enter_button+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e2       	ldi	r20, 0x20	; 32
    15b2:	51 e4       	ldi	r21, 0x41	; 65
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	8d 83       	std	Y+5, r24	; 0x05
    15cc:	0f c0       	rjmp	.+30     	; 0x15ec <Wait_for_Enter_button+0xd4>
    15ce:	88 ec       	ldi	r24, 0xC8	; 200
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9c 83       	std	Y+4, r25	; 0x04
    15d4:	8b 83       	std	Y+3, r24	; 0x03
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <Wait_for_Enter_button+0xc2>
    15de:	9c 83       	std	Y+4, r25	; 0x04
    15e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	69 f7       	brne	.-38     	; 0x15ce <Wait_for_Enter_button+0xb6>
    15f4:	14 c0       	rjmp	.+40     	; 0x161e <Wait_for_Enter_button+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f6:	6f 81       	ldd	r22, Y+7	; 0x07
    15f8:	78 85       	ldd	r23, Y+8	; 0x08
    15fa:	89 85       	ldd	r24, Y+9	; 0x09
    15fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9e 83       	std	Y+6, r25	; 0x06
    1608:	8d 83       	std	Y+5, r24	; 0x05
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <Wait_for_Enter_button+0xfe>
    161a:	9a 83       	std	Y+2, r25	; 0x02
    161c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400); /* Press time */
	} while (*key_ptr != '=');
    161e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1620:	f8 89       	ldd	r31, Y+16	; 0x10
    1622:	80 81       	ld	r24, Z
    1624:	8d 33       	cpi	r24, 0x3D	; 61
    1626:	09 f0       	breq	.+2      	; 0x162a <Wait_for_Enter_button+0x112>
    1628:	83 cf       	rjmp	.-250    	; 0x1530 <Wait_for_Enter_button+0x18>
}
    162a:	60 96       	adiw	r28, 0x10	; 16
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <Send_password_1st_entry_to_Control_ECU>:

void Send_password_1st_entry_to_Control_ECU(uint8 *password_1st_entry_byte_ptr)
{
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	00 d0       	rcall	.+0      	; 0x1642 <Send_password_1st_entry_to_Control_ECU+0x6>
    1642:	0f 92       	push	r0
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	9b 83       	std	Y+3, r25	; 0x03
    164a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0; i < 4; i++, password_1st_entry_byte_ptr++)
    164c:	19 82       	std	Y+1, r1	; 0x01
    164e:	0d c0       	rjmp	.+26     	; 0x166a <Send_password_1st_entry_to_Control_ECU+0x2e>
	{
		UART_sendByte(*password_1st_entry_byte_ptr);
    1650:	ea 81       	ldd	r30, Y+2	; 0x02
    1652:	fb 81       	ldd	r31, Y+3	; 0x03
    1654:	80 81       	ld	r24, Z
    1656:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <UART_sendByte>
}

void Send_password_1st_entry_to_Control_ECU(uint8 *password_1st_entry_byte_ptr)
{
	uint8 i;
	for (i = 0; i < 4; i++, password_1st_entry_byte_ptr++)
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	8f 5f       	subi	r24, 0xFF	; 255
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	9b 81       	ldd	r25, Y+3	; 0x03
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	9b 83       	std	Y+3, r25	; 0x03
    1668:	8a 83       	std	Y+2, r24	; 0x02
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	84 30       	cpi	r24, 0x04	; 4
    166e:	80 f3       	brcs	.-32     	; 0x1650 <Send_password_1st_entry_to_Control_ECU+0x14>
	{
		UART_sendByte(*password_1st_entry_byte_ptr);
	}
}
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <Send_password_2nd_entry_to_Control_ECU>:
void Send_password_2nd_entry_to_Control_ECU(uint8 *password_2nd_entry_byte_ptr)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	00 d0       	rcall	.+0      	; 0x1682 <Send_password_2nd_entry_to_Control_ECU+0x6>
    1682:	0f 92       	push	r0
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	9b 83       	std	Y+3, r25	; 0x03
    168a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0; i < 4; i++, password_2nd_entry_byte_ptr++)
    168c:	19 82       	std	Y+1, r1	; 0x01
    168e:	0d c0       	rjmp	.+26     	; 0x16aa <Send_password_2nd_entry_to_Control_ECU+0x2e>
	{
		UART_sendByte(*password_2nd_entry_byte_ptr);
    1690:	ea 81       	ldd	r30, Y+2	; 0x02
    1692:	fb 81       	ldd	r31, Y+3	; 0x03
    1694:	80 81       	ld	r24, Z
    1696:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <UART_sendByte>
	}
}
void Send_password_2nd_entry_to_Control_ECU(uint8 *password_2nd_entry_byte_ptr)
{
	uint8 i;
	for (i = 0; i < 4; i++, password_2nd_entry_byte_ptr++)
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	8f 5f       	subi	r24, 0xFF	; 255
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	9b 81       	ldd	r25, Y+3	; 0x03
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	9b 83       	std	Y+3, r25	; 0x03
    16a8:	8a 83       	std	Y+2, r24	; 0x02
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	84 30       	cpi	r24, 0x04	; 4
    16ae:	80 f3       	brcs	.-32     	; 0x1690 <Send_password_2nd_entry_to_Control_ECU+0x14>
	{
		UART_sendByte(*password_2nd_entry_byte_ptr);
	}
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <Send_Entered_password_to_Control_ECU>:

void Send_Entered_password_to_Control_ECU(uint8 *Entered_password_byte_ptr)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <Send_Entered_password_to_Control_ECU+0x6>
    16c2:	0f 92       	push	r0
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	9b 83       	std	Y+3, r25	; 0x03
    16ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0; i < 4; i++, Entered_password_byte_ptr++)
    16cc:	19 82       	std	Y+1, r1	; 0x01
    16ce:	0d c0       	rjmp	.+26     	; 0x16ea <Send_Entered_password_to_Control_ECU+0x2e>
	{
		UART_sendByte(*Entered_password_byte_ptr);
    16d0:	ea 81       	ldd	r30, Y+2	; 0x02
    16d2:	fb 81       	ldd	r31, Y+3	; 0x03
    16d4:	80 81       	ld	r24, Z
    16d6:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <UART_sendByte>
}

void Send_Entered_password_to_Control_ECU(uint8 *Entered_password_byte_ptr)
{
	uint8 i;
	for (i = 0; i < 4; i++, Entered_password_byte_ptr++)
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	8f 5f       	subi	r24, 0xFF	; 255
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	9b 81       	ldd	r25, Y+3	; 0x03
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	9b 83       	std	Y+3, r25	; 0x03
    16e8:	8a 83       	std	Y+2, r24	; 0x02
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	84 30       	cpi	r24, 0x04	; 4
    16ee:	80 f3       	brcs	.-32     	; 0x16d0 <Send_Entered_password_to_Control_ECU+0x14>
	{
		UART_sendByte(*Entered_password_byte_ptr);
	}
}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <Display_main_options>:

void Display_main_options(void)
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
	LCD_displayStringRowColumn(0, 0, "+ : Open Door    ");
    1704:	2c e0       	ldi	r18, 0x0C	; 12
    1706:	31 e0       	ldi	r19, 0x01	; 1
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	a9 01       	movw	r20, r18
    170e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass  ");
    1712:	2e e1       	ldi	r18, 0x1E	; 30
    1714:	31 e0       	ldi	r19, 0x01	; 1
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	a9 01       	movw	r20, r18
    171c:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <Choose_an_option>:

void Choose_an_option(uint8 *Chosen_option_ptr)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	60 97       	sbiw	r28, 0x10	; 16
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	98 8b       	std	Y+16, r25	; 0x10
    173c:	8f 87       	std	Y+15, r24	; 0x0f
	do
	{
		*Chosen_option_ptr = KEYPAD_getPressedKey();
    173e:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <KEYPAD_getPressedKey>
    1742:	ef 85       	ldd	r30, Y+15	; 0x0f
    1744:	f8 89       	ldd	r31, Y+16	; 0x10
    1746:	80 83       	st	Z, r24
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a8 ec       	ldi	r26, 0xC8	; 200
    174e:	b3 e4       	ldi	r27, 0x43	; 67
    1750:	8b 87       	std	Y+11, r24	; 0x0b
    1752:	9c 87       	std	Y+12, r25	; 0x0c
    1754:	ad 87       	std	Y+13, r26	; 0x0d
    1756:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1758:	6b 85       	ldd	r22, Y+11	; 0x0b
    175a:	7c 85       	ldd	r23, Y+12	; 0x0c
    175c:	8d 85       	ldd	r24, Y+13	; 0x0d
    175e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	4a ef       	ldi	r20, 0xFA	; 250
    1766:	54 e4       	ldi	r21, 0x44	; 68
    1768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	8f 83       	std	Y+7, r24	; 0x07
    1772:	98 87       	std	Y+8, r25	; 0x08
    1774:	a9 87       	std	Y+9, r26	; 0x09
    1776:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1778:	6f 81       	ldd	r22, Y+7	; 0x07
    177a:	78 85       	ldd	r23, Y+8	; 0x08
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e8       	ldi	r20, 0x80	; 128
    1786:	5f e3       	ldi	r21, 0x3F	; 63
    1788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    178c:	88 23       	and	r24, r24
    178e:	2c f4       	brge	.+10     	; 0x179a <Choose_an_option+0x74>
		__ticks = 1;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9e 83       	std	Y+6, r25	; 0x06
    1796:	8d 83       	std	Y+5, r24	; 0x05
    1798:	3f c0       	rjmp	.+126    	; 0x1818 <Choose_an_option+0xf2>
	else if (__tmp > 65535)
    179a:	6f 81       	ldd	r22, Y+7	; 0x07
    179c:	78 85       	ldd	r23, Y+8	; 0x08
    179e:	89 85       	ldd	r24, Y+9	; 0x09
    17a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	3f ef       	ldi	r19, 0xFF	; 255
    17a6:	4f e7       	ldi	r20, 0x7F	; 127
    17a8:	57 e4       	ldi	r21, 0x47	; 71
    17aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ae:	18 16       	cp	r1, r24
    17b0:	4c f5       	brge	.+82     	; 0x1804 <Choose_an_option+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e2       	ldi	r20, 0x20	; 32
    17c0:	51 e4       	ldi	r21, 0x41	; 65
    17c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
    17da:	0f c0       	rjmp	.+30     	; 0x17fa <Choose_an_option+0xd4>
    17dc:	88 ec       	ldi	r24, 0xC8	; 200
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9c 83       	std	Y+4, r25	; 0x04
    17e2:	8b 83       	std	Y+3, r24	; 0x03
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <Choose_an_option+0xc2>
    17ec:	9c 83       	std	Y+4, r25	; 0x04
    17ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f0:	8d 81       	ldd	r24, Y+5	; 0x05
    17f2:	9e 81       	ldd	r25, Y+6	; 0x06
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	69 f7       	brne	.-38     	; 0x17dc <Choose_an_option+0xb6>
    1802:	14 c0       	rjmp	.+40     	; 0x182c <Choose_an_option+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1804:	6f 81       	ldd	r22, Y+7	; 0x07
    1806:	78 85       	ldd	r23, Y+8	; 0x08
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	9e 83       	std	Y+6, r25	; 0x06
    1816:	8d 83       	std	Y+5, r24	; 0x05
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	9a 83       	std	Y+2, r25	; 0x02
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	9a 81       	ldd	r25, Y+2	; 0x02
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <Choose_an_option+0xfe>
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);
	} while (*Chosen_option_ptr != '+' && *Chosen_option_ptr != '-');
    182c:	ef 85       	ldd	r30, Y+15	; 0x0f
    182e:	f8 89       	ldd	r31, Y+16	; 0x10
    1830:	80 81       	ld	r24, Z
    1832:	8b 32       	cpi	r24, 0x2B	; 43
    1834:	31 f0       	breq	.+12     	; 0x1842 <Choose_an_option+0x11c>
    1836:	ef 85       	ldd	r30, Y+15	; 0x0f
    1838:	f8 89       	ldd	r31, Y+16	; 0x10
    183a:	80 81       	ld	r24, Z
    183c:	8d 32       	cpi	r24, 0x2D	; 45
    183e:	09 f0       	breq	.+2      	; 0x1842 <Choose_an_option+0x11c>
    1840:	7e cf       	rjmp	.-260    	; 0x173e <Choose_an_option+0x18>
}
    1842:	60 96       	adiw	r28, 0x10	; 16
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <start_password_3_trials>:

void start_password_3_trials(void)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	0f 92       	push	r0
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for (i = 0; i < 3; i++)
    185e:	19 82       	std	Y+1, r1	; 0x01
    1860:	1c c0       	rjmp	.+56     	; 0x189a <start_password_3_trials+0x46>
	{
		Enter_password(&key, &Entered_password);
    1862:	80 e8       	ldi	r24, 0x80	; 128
    1864:	91 e0       	ldi	r25, 0x01	; 1
    1866:	28 e8       	ldi	r18, 0x88	; 136
    1868:	31 e0       	ldi	r19, 0x01	; 1
    186a:	b9 01       	movw	r22, r18
    186c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <Enter_password>
		Wait_for_Enter_button(&key);
    1870:	80 e8       	ldi	r24, 0x80	; 128
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	0e 94 8c 0a 	call	0x1518	; 0x1518 <Wait_for_Enter_button>
		Send_Entered_password_to_Control_ECU(Entered_password_1st_byte_address);
    1878:	80 91 60 01 	lds	r24, 0x0160
    187c:	90 91 61 01 	lds	r25, 0x0161
    1880:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Send_Entered_password_to_Control_ECU>
		Entered_password_status = UART_recieveByte();
    1884:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_recieveByte>
    1888:	80 93 64 01 	sts	0x0164, r24
		if (Entered_password_status == CORRECT_PASSWORD)
    188c:	80 91 64 01 	lds	r24, 0x0164
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	31 f0       	breq	.+12     	; 0x18a0 <start_password_3_trials+0x4c>
}

void start_password_3_trials(void)
{
	uint8 i;
	for (i = 0; i < 3; i++)
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	8f 5f       	subi	r24, 0xFF	; 255
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	83 30       	cpi	r24, 0x03	; 3
    189e:	08 f3       	brcs	.-62     	; 0x1862 <start_password_3_trials+0xe>
		Send_Entered_password_to_Control_ECU(Entered_password_1st_byte_address);
		Entered_password_status = UART_recieveByte();
		if (Entered_password_status == CORRECT_PASSWORD)
			return;
	}
}
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <Send_the_chosen_option_to_Control_ECU>:

void Send_the_chosen_option_to_Control_ECU(uint8 *key_ptr)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <Send_the_chosen_option_to_Control_ECU+0x6>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(*key_ptr);
    18b6:	e9 81       	ldd	r30, Y+1	; 0x01
    18b8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ba:	80 81       	ld	r24, Z
    18bc:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <UART_sendByte>
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <Unlocking_Door_Call_Back_Function>:

void Unlocking_Door_Call_Back_Function(void)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	g_Timer1_tick++;
    18d2:	80 91 81 01 	lds	r24, 0x0181
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
    18d8:	80 93 81 01 	sts	0x0181, r24
	if (g_Timer1_tick == 2)
    18dc:	80 91 81 01 	lds	r24, 0x0181
    18e0:	82 30       	cpi	r24, 0x02	; 2
    18e2:	99 f4       	brne	.+38     	; 0x190a <Unlocking_Door_Call_Back_Function+0x40>
	{
		LCD_displayStringRowColumn(0, 0, "Door unlocked   ");
    18e4:	20 e3       	ldi	r18, 0x30	; 48
    18e6:	31 e0       	ldi	r19, 0x01	; 1
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	a9 01       	movw	r20, r18
    18ee:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
		Timer1_deInit();
    18f2:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Timer1_deInit>
		Timer1_setCallBack(Hold_Door_Call_Back_Function);
    18f6:	88 e8       	ldi	r24, 0x88	; 136
    18f8:	9c e0       	ldi	r25, 0x0C	; 12
    18fa:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Timer1_setCallBack>
		Timer1_init(&Holding_Door_Configurations);
    18fe:	8b e6       	ldi	r24, 0x6B	; 107
    1900:	91 e0       	ldi	r25, 0x01	; 1
    1902:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Timer1_init>
		g_Timer1_tick = 0;
    1906:	10 92 81 01 	sts	0x0181, r1
	}

}
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <Hold_Door_Call_Back_Function>:

void Hold_Door_Call_Back_Function(void)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
	LCD_displayStringRowColumn(0, 0, "Door Locking  ");
    1918:	21 e4       	ldi	r18, 0x41	; 65
    191a:	31 e0       	ldi	r19, 0x01	; 1
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	a9 01       	movw	r20, r18
    1922:	0e 94 08 16 	call	0x2c10	; 0x2c10 <LCD_displayStringRowColumn>
	Timer1_deInit();
    1926:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Timer1_deInit>
	Timer1_setCallBack(Locking_Door_Call_Back_Function);
    192a:	80 ea       	ldi	r24, 0xA0	; 160
    192c:	9c e0       	ldi	r25, 0x0C	; 12
    192e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Timer1_setCallBack>
	Timer1_init(&LockingandUnlocking_Door_Configurations);
    1932:	85 e6       	ldi	r24, 0x65	; 101
    1934:	91 e0       	ldi	r25, 0x01	; 1
    1936:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Timer1_init>
}
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <Locking_Door_Call_Back_Function>:

void Locking_Door_Call_Back_Function(void)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	g_Timer1_tick++;
    1948:	80 91 81 01 	lds	r24, 0x0181
    194c:	8f 5f       	subi	r24, 0xFF	; 255
    194e:	80 93 81 01 	sts	0x0181, r24
	if (g_Timer1_tick == 2)
    1952:	80 91 81 01 	lds	r24, 0x0181
    1956:	82 30       	cpi	r24, 0x02	; 2
    1958:	39 f4       	brne	.+14     	; 0x1968 <Locking_Door_Call_Back_Function+0x28>
	{
		Timer1_deInit();
    195a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Timer1_deInit>
		g_Timer1_tick = 0;
    195e:	10 92 81 01 	sts	0x0181, r1
		g_Open_Door_task_completed = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	80 93 82 01 	sts	0x0182, r24
	}
}
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <Buzzer_Call_Back_Function>:

void Buzzer_Call_Back_Function(void)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
	g_Timer1_tick++;
    1976:	80 91 81 01 	lds	r24, 0x0181
    197a:	8f 5f       	subi	r24, 0xFF	; 255
    197c:	80 93 81 01 	sts	0x0181, r24
	if (g_Timer1_tick == 8)
    1980:	80 91 81 01 	lds	r24, 0x0181
    1984:	88 30       	cpi	r24, 0x08	; 8
    1986:	39 f4       	brne	.+14     	; 0x1996 <Buzzer_Call_Back_Function+0x28>
	{
		g_Timer1_tick = 0;
    1988:	10 92 81 01 	sts	0x0181, r1
		Timer1_deInit();
    198c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Timer1_deInit>
		g_Buzzer_task_completed = 1;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	80 93 83 01 	sts	0x0183, r24
	}
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <__vector_9>:
/***********************************************************************************************************/

/*******************************************Interrupt_Service_Routines***************************************/

ISR(TIMER1_OVF_vect)
{
    199c:	1f 92       	push	r1
    199e:	0f 92       	push	r0
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	0f 92       	push	r0
    19a4:	11 24       	eor	r1, r1
    19a6:	2f 93       	push	r18
    19a8:	3f 93       	push	r19
    19aa:	4f 93       	push	r20
    19ac:	5f 93       	push	r21
    19ae:	6f 93       	push	r22
    19b0:	7f 93       	push	r23
    19b2:	8f 93       	push	r24
    19b4:	9f 93       	push	r25
    19b6:	af 93       	push	r26
    19b8:	bf 93       	push	r27
    19ba:	ef 93       	push	r30
    19bc:	ff 93       	push	r31
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_Call_Back_Ptr != NULL_PTR)
    19c6:	80 91 84 01 	lds	r24, 0x0184
    19ca:	90 91 85 01 	lds	r25, 0x0185
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	69 f0       	breq	.+26     	; 0x19ec <__vector_9+0x50>
	{
		(*g_Timer1_Call_Back_Ptr)(); /*Call the Call Back function in the application*/
    19d2:	e0 91 84 01 	lds	r30, 0x0184
    19d6:	f0 91 85 01 	lds	r31, 0x0185
    19da:	09 95       	icall
		TCNT1.TwoBytes = g_Timer1_OVF_reset_value; /*making the timer start counting from the specified initial value and not the zero*/
    19dc:	ec e4       	ldi	r30, 0x4C	; 76
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 91 86 01 	lds	r24, 0x0186
    19e4:	90 91 87 01 	lds	r25, 0x0187
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	80 83       	st	Z, r24
	}
}
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	ff 91       	pop	r31
    19f2:	ef 91       	pop	r30
    19f4:	bf 91       	pop	r27
    19f6:	af 91       	pop	r26
    19f8:	9f 91       	pop	r25
    19fa:	8f 91       	pop	r24
    19fc:	7f 91       	pop	r23
    19fe:	6f 91       	pop	r22
    1a00:	5f 91       	pop	r21
    1a02:	4f 91       	pop	r20
    1a04:	3f 91       	pop	r19
    1a06:	2f 91       	pop	r18
    1a08:	0f 90       	pop	r0
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	0f 90       	pop	r0
    1a0e:	1f 90       	pop	r1
    1a10:	18 95       	reti

00001a12 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1a12:	1f 92       	push	r1
    1a14:	0f 92       	push	r0
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	0f 92       	push	r0
    1a1a:	11 24       	eor	r1, r1
    1a1c:	2f 93       	push	r18
    1a1e:	3f 93       	push	r19
    1a20:	4f 93       	push	r20
    1a22:	5f 93       	push	r21
    1a24:	6f 93       	push	r22
    1a26:	7f 93       	push	r23
    1a28:	8f 93       	push	r24
    1a2a:	9f 93       	push	r25
    1a2c:	af 93       	push	r26
    1a2e:	bf 93       	push	r27
    1a30:	ef 93       	push	r30
    1a32:	ff 93       	push	r31
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_Call_Back_Ptr != NULL_PTR)
    1a3c:	80 91 84 01 	lds	r24, 0x0184
    1a40:	90 91 85 01 	lds	r25, 0x0185
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	29 f0       	breq	.+10     	; 0x1a52 <__vector_7+0x40>
		(*g_Timer1_Call_Back_Ptr)(); /*Call the Call Back function in the application*/
    1a48:	e0 91 84 01 	lds	r30, 0x0184
    1a4c:	f0 91 85 01 	lds	r31, 0x0185
    1a50:	09 95       	icall
}
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	ff 91       	pop	r31
    1a58:	ef 91       	pop	r30
    1a5a:	bf 91       	pop	r27
    1a5c:	af 91       	pop	r26
    1a5e:	9f 91       	pop	r25
    1a60:	8f 91       	pop	r24
    1a62:	7f 91       	pop	r23
    1a64:	6f 91       	pop	r22
    1a66:	5f 91       	pop	r21
    1a68:	4f 91       	pop	r20
    1a6a:	3f 91       	pop	r19
    1a6c:	2f 91       	pop	r18
    1a6e:	0f 90       	pop	r0
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	0f 90       	pop	r0
    1a74:	1f 90       	pop	r1
    1a76:	18 95       	reti

00001a78 <Timer1_init>:
/***********************************************************************************************************/

/*****************************************TIMER1_FUNCTIONS_DEFINITIONS**************************************/

void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <Timer1_init+0x6>
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <Timer1_init+0x8>
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	9a 83       	std	Y+2, r25	; 0x02
    1a86:	89 83       	std	Y+1, r24	; 0x01
	TCNT1.TwoBytes = Config_Ptr->initial_value; /*setting initial value*/
    1a88:	ac e4       	ldi	r26, 0x4C	; 76
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a90:	80 81       	ld	r24, Z
    1a92:	91 81       	ldd	r25, Z+1	; 0x01
    1a94:	11 96       	adiw	r26, 0x01	; 1
    1a96:	9c 93       	st	X, r25
    1a98:	8e 93       	st	-X, r24

	if (Config_Ptr->mode == TIMER1_CTC_MODE)
    1a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9e:	85 81       	ldd	r24, Z+5	; 0x05
    1aa0:	84 30       	cpi	r24, 0x04	; 4
    1aa2:	59 f4       	brne	.+22     	; 0x1aba <Timer1_init+0x42>
		OCR1A.TwoBytes = Config_Ptr->compare_value; /*setting compare value in case of compare mode*/
    1aa4:	ea e4       	ldi	r30, 0x4A	; 74
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	a9 81       	ldd	r26, Y+1	; 0x01
    1aaa:	ba 81       	ldd	r27, Y+2	; 0x02
    1aac:	12 96       	adiw	r26, 0x02	; 2
    1aae:	8d 91       	ld	r24, X+
    1ab0:	9c 91       	ld	r25, X
    1ab2:	13 97       	sbiw	r26, 0x03	; 3
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	08 c0       	rjmp	.+16     	; 0x1aca <Timer1_init+0x52>
	else
		g_Timer1_OVF_reset_value = Config_Ptr->initial_value; /*In case of OVF mode, store the initial value in a global variable to update the TCNT1 register with it in the ISR*/
    1aba:	e9 81       	ldd	r30, Y+1	; 0x01
    1abc:	fa 81       	ldd	r31, Y+2	; 0x02
    1abe:	80 81       	ld	r24, Z
    1ac0:	91 81       	ldd	r25, Z+1	; 0x01
    1ac2:	90 93 87 01 	sts	0x0187, r25
    1ac6:	80 93 86 01 	sts	0x0186, r24

	TCCR1A.Bits.FOC1A = 1; /*FOC1A bit is set to one in both modes*/
    1aca:	ef e4       	ldi	r30, 0x4F	; 79
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 60       	ori	r24, 0x08	; 8
    1ad2:	80 83       	st	Z, r24

	TCCR1A.Byte = (TCCR1A.Byte & 0xFC) | ((Config_Ptr->mode) & 0x03); /*inserting the first two bits of the mode in bits WGM11 & WGM10*/
    1ad4:	af e4       	ldi	r26, 0x4F	; 79
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	ef e4       	ldi	r30, 0x4F	; 79
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	98 2f       	mov	r25, r24
    1ae0:	9c 7f       	andi	r25, 0xFC	; 252
    1ae2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae6:	85 81       	ldd	r24, Z+5	; 0x05
    1ae8:	83 70       	andi	r24, 0x03	; 3
    1aea:	89 2b       	or	r24, r25
    1aec:	8c 93       	st	X, r24
	TCCR1B.Byte = (TCCR1B.Byte & 0xE7) | (((Config_Ptr->mode) & 0x0C) << 1); /*inserting the seconds two bits of the mode in bits WGM13 & WGM12*/
    1aee:	ae e4       	ldi	r26, 0x4E	; 78
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	ee e4       	ldi	r30, 0x4E	; 78
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	28 2f       	mov	r18, r24
    1afa:	27 7e       	andi	r18, 0xE7	; 231
    1afc:	e9 81       	ldd	r30, Y+1	; 0x01
    1afe:	fa 81       	ldd	r31, Y+2	; 0x02
    1b00:	85 81       	ldd	r24, Z+5	; 0x05
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	8c 70       	andi	r24, 0x0C	; 12
    1b08:	90 70       	andi	r25, 0x00	; 0
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	82 2b       	or	r24, r18
    1b10:	8c 93       	st	X, r24

	TCCR1B.Byte = (TCCR1B.Byte & 0xF8) | (Config_Ptr->prescaler); /*setting the prescaler*/
    1b12:	ae e4       	ldi	r26, 0x4E	; 78
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	ee e4       	ldi	r30, 0x4E	; 78
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	98 2f       	mov	r25, r24
    1b1e:	98 7f       	andi	r25, 0xF8	; 248
    1b20:	e9 81       	ldd	r30, Y+1	; 0x01
    1b22:	fa 81       	ldd	r31, Y+2	; 0x02
    1b24:	84 81       	ldd	r24, Z+4	; 0x04
    1b26:	89 2b       	or	r24, r25
    1b28:	8c 93       	st	X, r24

	(Config_Ptr->mode == TIMER1_CTC_MODE) ? (TIMSK.Bits.OCIE1A = 1) : (TIMSK.Bits.TOIE1 = 1); /*Enable compare match interrupt or overflow interrupt according to the chosen mode*/
    1b2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2e:	85 81       	ldd	r24, Z+5	; 0x05
    1b30:	84 30       	cpi	r24, 0x04	; 4
    1b32:	39 f4       	brne	.+14     	; 0x1b42 <Timer1_init+0xca>
    1b34:	e9 e5       	ldi	r30, 0x59	; 89
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 61       	ori	r24, 0x10	; 16
    1b3c:	80 83       	st	Z, r24
    1b3e:	80 81       	ld	r24, Z
    1b40:	06 c0       	rjmp	.+12     	; 0x1b4e <Timer1_init+0xd6>
    1b42:	e9 e5       	ldi	r30, 0x59	; 89
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	84 60       	ori	r24, 0x04	; 4
    1b4a:	80 83       	st	Z, r24
    1b4c:	80 81       	ld	r24, Z
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <Timer1_deInit>:

void Timer1_deInit(void)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
	/*Clearing all Timer1 registers*/
	TCCR1A.Byte = 0;
    1b64:	ef e4       	ldi	r30, 0x4F	; 79
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	10 82       	st	Z, r1
	TCCR1B.Byte = 0; /*here we cleared the bits CS12:0 so there is no clock source and the timer is stopped now*/
    1b6a:	ee e4       	ldi	r30, 0x4E	; 78
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	10 82       	st	Z, r1
	TCNT1.TwoBytes = 0;
    1b70:	ec e4       	ldi	r30, 0x4C	; 76
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	11 82       	std	Z+1, r1	; 0x01
    1b76:	10 82       	st	Z, r1

	/*Disable both compare match and overflow interrupts*/
	TIMSK.Bits.OCIE1A = 0;
    1b78:	e9 e5       	ldi	r30, 0x59	; 89
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	8f 7e       	andi	r24, 0xEF	; 239
    1b80:	80 83       	st	Z, r24
	TIMSK.Bits.TOIE1 = 0;
    1b82:	e9 e5       	ldi	r30, 0x59	; 89
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	8b 7f       	andi	r24, 0xFB	; 251
    1b8a:	80 83       	st	Z, r24

	g_Timer1_Call_Back_Ptr = NULL_PTR; /*Reset the global pointer value*/
    1b8c:	10 92 85 01 	sts	0x0185, r1
    1b90:	10 92 84 01 	sts	0x0184, r1
}
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <Timer1_setCallBack>:

void Timer1_setCallBack(void (*a_ptr)(void))
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <Timer1_setCallBack+0x6>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_Call_Back_Ptr = a_ptr; /*Saving the address of the Call back function in a global variable*/
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bac:	90 93 85 01 	sts	0x0185, r25
    1bb0:	80 93 84 01 	sts	0x0184, r24
}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <GPIO_setupPinDirection>:
 */
#include "my_gpio.h"

/*********************************************PINS_FUNCTIONS************************************************/
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	27 97       	sbiw	r28, 0x07	; 7
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	6a 83       	std	Y+2, r22	; 0x02
    1bd6:	4b 83       	std	Y+3, r20	; 0x03
	(port_num >= GPIO_NUM_OF_PORTS || pin_num >= GPIO_NUM_OF_PINS) ? /*DO NOTHING*/: GPIO_DDR_SETUP_PIN_DIRECTION(port_num, pin_num, direction);
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	18 f4       	brcc	.+6      	; 0x1be4 <GPIO_setupPinDirection+0x26>
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	88 30       	cpi	r24, 0x08	; 8
    1be2:	28 f0       	brcs	.+10     	; 0x1bee <GPIO_setupPinDirection+0x30>
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9f 83       	std	Y+7, r25	; 0x07
    1bea:	8e 83       	std	Y+6, r24	; 0x06
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <GPIO_setupPinDirection+0x34>
    1bee:	1f 82       	std	Y+7, r1	; 0x07
    1bf0:	1e 82       	std	Y+6, r1	; 0x06
    1bf2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <GPIO_setupPinDirection+0x3e>
    1bfa:	59 c0       	rjmp	.+178    	; 0x1cae <GPIO_setupPinDirection+0xf0>
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	59 f5       	brne	.+86     	; 0x1c58 <GPIO_setupPinDirection+0x9a>
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	c9 01       	movw	r24, r18
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	82 0f       	add	r24, r18
    1c10:	93 1f       	adc	r25, r19
    1c12:	90 95       	com	r25
    1c14:	81 95       	neg	r24
    1c16:	9f 4f       	sbci	r25, 0xFF	; 255
    1c18:	ca 96       	adiw	r24, 0x3a	; 58
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	c9 01       	movw	r24, r18
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	82 0f       	add	r24, r18
    1c2a:	93 1f       	adc	r25, r19
    1c2c:	90 95       	com	r25
    1c2e:	81 95       	neg	r24
    1c30:	9f 4f       	sbci	r25, 0xFF	; 255
    1c32:	ca 96       	adiw	r24, 0x3a	; 58
    1c34:	fc 01       	movw	r30, r24
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <GPIO_setupPinDirection+0x8e>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <GPIO_setupPinDirection+0x8a>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	9c 91       	ld	r25, X
    1c56:	2b c0       	rjmp	.+86     	; 0x1cae <GPIO_setupPinDirection+0xf0>
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	c9 01       	movw	r24, r18
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	82 0f       	add	r24, r18
    1c66:	93 1f       	adc	r25, r19
    1c68:	90 95       	com	r25
    1c6a:	81 95       	neg	r24
    1c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6e:	ca 96       	adiw	r24, 0x3a	; 58
    1c70:	dc 01       	movw	r26, r24
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	c9 01       	movw	r24, r18
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	82 0f       	add	r24, r18
    1c80:	93 1f       	adc	r25, r19
    1c82:	90 95       	com	r25
    1c84:	81 95       	neg	r24
    1c86:	9f 4f       	sbci	r25, 0xFF	; 255
    1c88:	ca 96       	adiw	r24, 0x3a	; 58
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 2e       	mov	r0, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <GPIO_setupPinDirection+0xe4>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	0a 94       	dec	r0
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <GPIO_setupPinDirection+0xe0>
    1ca6:	80 95       	com	r24
    1ca8:	84 23       	and	r24, r20
    1caa:	8c 93       	st	X, r24
    1cac:	8c 91       	ld	r24, X
}
    1cae:	27 96       	adiw	r28, 0x07	; 7
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <GPIO_writePin>:

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	27 97       	sbiw	r28, 0x07	; 7
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	6a 83       	std	Y+2, r22	; 0x02
    1cd8:	4b 83       	std	Y+3, r20	; 0x03
	(port_num >= GPIO_NUM_OF_PORTS || pin_num >= GPIO_NUM_OF_PINS) ? /*DO NOTHING*/: GPIO_PORT_WRITE_PIN_VALUE(port_num, pin_num, value);
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	84 30       	cpi	r24, 0x04	; 4
    1cde:	18 f4       	brcc	.+6      	; 0x1ce6 <GPIO_writePin+0x26>
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	88 30       	cpi	r24, 0x08	; 8
    1ce4:	28 f0       	brcs	.+10     	; 0x1cf0 <GPIO_writePin+0x30>
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9f 83       	std	Y+7, r25	; 0x07
    1cec:	8e 83       	std	Y+6, r24	; 0x06
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <GPIO_writePin+0x34>
    1cf0:	1f 82       	std	Y+7, r1	; 0x07
    1cf2:	1e 82       	std	Y+6, r1	; 0x06
    1cf4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <GPIO_writePin+0x3e>
    1cfc:	59 c0       	rjmp	.+178    	; 0x1db0 <GPIO_writePin+0xf0>
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	81 30       	cpi	r24, 0x01	; 1
    1d02:	59 f5       	brne	.+86     	; 0x1d5a <GPIO_writePin+0x9a>
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	c9 01       	movw	r24, r18
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	82 0f       	add	r24, r18
    1d12:	93 1f       	adc	r25, r19
    1d14:	90 95       	com	r25
    1d16:	81 95       	neg	r24
    1d18:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1a:	cb 96       	adiw	r24, 0x3b	; 59
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	c9 01       	movw	r24, r18
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	82 0f       	add	r24, r18
    1d2c:	93 1f       	adc	r25, r19
    1d2e:	90 95       	com	r25
    1d30:	81 95       	neg	r24
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	cb 96       	adiw	r24, 0x3b	; 59
    1d36:	fc 01       	movw	r30, r24
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <GPIO_writePin+0x8e>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <GPIO_writePin+0x8a>
    1d52:	84 2b       	or	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	9c 91       	ld	r25, X
    1d58:	2b c0       	rjmp	.+86     	; 0x1db0 <GPIO_writePin+0xf0>
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	c9 01       	movw	r24, r18
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	82 0f       	add	r24, r18
    1d68:	93 1f       	adc	r25, r19
    1d6a:	90 95       	com	r25
    1d6c:	81 95       	neg	r24
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	cb 96       	adiw	r24, 0x3b	; 59
    1d72:	dc 01       	movw	r26, r24
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	c9 01       	movw	r24, r18
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	82 0f       	add	r24, r18
    1d82:	93 1f       	adc	r25, r19
    1d84:	90 95       	com	r25
    1d86:	81 95       	neg	r24
    1d88:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8a:	cb 96       	adiw	r24, 0x3b	; 59
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	80 81       	ld	r24, Z
    1d90:	48 2f       	mov	r20, r24
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 2e       	mov	r0, r18
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <GPIO_writePin+0xe4>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	0a 94       	dec	r0
    1da6:	e2 f7       	brpl	.-8      	; 0x1da0 <GPIO_writePin+0xe0>
    1da8:	80 95       	com	r24
    1daa:	84 23       	and	r24, r20
    1dac:	8c 93       	st	X, r24
    1dae:	8c 91       	ld	r24, X
}
    1db0:	27 96       	adiw	r28, 0x07	; 7
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <GPIO_readPin+0x6>
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <GPIO_readPin+0x8>
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	89 83       	std	Y+1, r24	; 0x01
    1dd0:	6a 83       	std	Y+2, r22	; 0x02
	return (port_num >= GPIO_NUM_OF_PORTS || pin_num >= GPIO_NUM_OF_PINS) ? LOGIC_LOW : GPIO_PIN_READ_PIN_VALUE(port_num, pin_num);
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	84 30       	cpi	r24, 0x04	; 4
    1dd6:	40 f5       	brcc	.+80     	; 0x1e28 <GPIO_readPin+0x66>
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	88 30       	cpi	r24, 0x08	; 8
    1ddc:	28 f5       	brcc	.+74     	; 0x1e28 <GPIO_readPin+0x66>
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	c9 01       	movw	r24, r18
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	82 0f       	add	r24, r18
    1dec:	93 1f       	adc	r25, r19
    1dee:	90 95       	com	r25
    1df0:	81 95       	neg	r24
    1df2:	9f 4f       	sbci	r25, 0xFF	; 255
    1df4:	c9 96       	adiw	r24, 0x39	; 57
    1df6:	fc 01       	movw	r30, r24
    1df8:	80 81       	ld	r24, Z
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	88 2f       	mov	r24, r24
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a9 01       	movw	r20, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <GPIO_readPin+0x4a>
    1e08:	55 95       	asr	r21
    1e0a:	47 95       	ror	r20
    1e0c:	8a 95       	dec	r24
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <GPIO_readPin+0x46>
    1e10:	ca 01       	movw	r24, r20
    1e12:	81 70       	andi	r24, 0x01	; 1
    1e14:	90 70       	andi	r25, 0x00	; 0
    1e16:	88 23       	and	r24, r24
    1e18:	19 f0       	breq	.+6      	; 0x1e20 <GPIO_readPin+0x5e>
    1e1a:	51 e0       	ldi	r21, 0x01	; 1
    1e1c:	5b 83       	std	Y+3, r21	; 0x03
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <GPIO_readPin+0x60>
    1e20:	1b 82       	std	Y+3, r1	; 0x03
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	8c 83       	std	Y+4, r24	; 0x04
    1e26:	01 c0       	rjmp	.+2      	; 0x1e2a <GPIO_readPin+0x68>
    1e28:	1c 82       	std	Y+4, r1	; 0x04
    1e2a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <GPIO_setupPortDirection>:
/***********************************************************************************************************/

/********************************************PORTS_FUNCTIONS************************************************/
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <GPIO_setupPortDirection+0x6>
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <GPIO_setupPortDirection+0x8>
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <GPIO_setupPortDirection+0xa>
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	6a 83       	std	Y+2, r22	; 0x02
	(port_num >= GPIO_NUM_OF_PORTS) ? /*DO NOTHING*/: GPIO_DDR_SETUP_PORT_DIRECTION(port_num, direction);
    1e4c:	1d 82       	std	Y+5, r1	; 0x05
    1e4e:	1c 82       	std	Y+4, r1	; 0x04
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	84 30       	cpi	r24, 0x04	; 4
    1e54:	20 f0       	brcs	.+8      	; 0x1e5e <GPIO_setupPortDirection+0x24>
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9d 83       	std	Y+5, r25	; 0x05
    1e5c:	8c 83       	std	Y+4, r24	; 0x04
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	88 23       	and	r24, r24
    1e62:	11 f0       	breq	.+4      	; 0x1e68 <GPIO_setupPortDirection+0x2e>
    1e64:	99 81       	ldd	r25, Y+1	; 0x01
    1e66:	10 c0       	rjmp	.+32     	; 0x1e88 <GPIO_setupPortDirection+0x4e>
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	c9 01       	movw	r24, r18
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	82 0f       	add	r24, r18
    1e76:	93 1f       	adc	r25, r19
    1e78:	90 95       	com	r25
    1e7a:	81 95       	neg	r24
    1e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7e:	ca 96       	adiw	r24, 0x3a	; 58
    1e80:	fc 01       	movw	r30, r24
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	80 83       	st	Z, r24
    1e86:	80 81       	ld	r24, Z
}
    1e88:	26 96       	adiw	r28, 0x06	; 6
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <GPIO_writePort+0x6>
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <GPIO_writePort+0x8>
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <GPIO_writePort+0xa>
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	6a 83       	std	Y+2, r22	; 0x02
	(port_num >= GPIO_NUM_OF_PORTS) ? /*DO NOTHING*/: GPIO_PORT_WRITE_PORT_VALUE(port_num, value);
    1eac:	1d 82       	std	Y+5, r1	; 0x05
    1eae:	1c 82       	std	Y+4, r1	; 0x04
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	84 30       	cpi	r24, 0x04	; 4
    1eb4:	20 f0       	brcs	.+8      	; 0x1ebe <GPIO_writePort+0x24>
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9d 83       	std	Y+5, r25	; 0x05
    1ebc:	8c 83       	std	Y+4, r24	; 0x04
    1ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec0:	88 23       	and	r24, r24
    1ec2:	11 f0       	breq	.+4      	; 0x1ec8 <GPIO_writePort+0x2e>
    1ec4:	99 81       	ldd	r25, Y+1	; 0x01
    1ec6:	10 c0       	rjmp	.+32     	; 0x1ee8 <GPIO_writePort+0x4e>
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	c9 01       	movw	r24, r18
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	82 0f       	add	r24, r18
    1ed6:	93 1f       	adc	r25, r19
    1ed8:	90 95       	com	r25
    1eda:	81 95       	neg	r24
    1edc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ede:	cb 96       	adiw	r24, 0x3b	; 59
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	80 83       	st	Z, r24
    1ee6:	80 81       	ld	r24, Z
}
    1ee8:	26 96       	adiw	r28, 0x06	; 6
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <GPIO_readPort+0x6>
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	89 83       	std	Y+1, r24	; 0x01
	return (port_num >= GPIO_NUM_OF_PORTS) ? LOGIC_LOW : GPIO_PIN_READ_PORT_VALUE(port_num);
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	80 f4       	brcc	.+32     	; 0x1f2c <GPIO_readPort+0x32>
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	c9 01       	movw	r24, r18
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	82 0f       	add	r24, r18
    1f1a:	93 1f       	adc	r25, r19
    1f1c:	90 95       	com	r25
    1f1e:	81 95       	neg	r24
    1f20:	9f 4f       	sbci	r25, 0xFF	; 255
    1f22:	c9 96       	adiw	r24, 0x39	; 57
    1f24:	fc 01       	movw	r30, r24
    1f26:	80 81       	ld	r24, Z
    1f28:	8a 83       	std	Y+2, r24	; 0x02
    1f2a:	01 c0       	rjmp	.+2      	; 0x1f2e <GPIO_readPort+0x34>
    1f2c:	1a 82       	std	Y+2, r1	; 0x02
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <KEYPAD_getPressedKey>:
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number);
#endif
#endif

uint8 KEYPAD_getPressedKey(void)
{
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	60 97       	sbiw	r28, 0x10	; 16
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
	uint8 row, col;

	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID, PIN_INPUT);
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	64 e0       	ldi	r22, 0x04	; 4
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + 1, PIN_INPUT);
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	65 e0       	ldi	r22, 0x05	; 5
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + 2, PIN_INPUT);
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	66 e0       	ldi	r22, 0x06	; 6
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + 3, PIN_INPUT);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	67 e0       	ldi	r22, 0x07	; 7
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_FIRST_PIN_ID, PIN_INPUT);
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	62 e0       	ldi	r22, 0x02	; 2
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_FIRST_PIN_ID + 1, PIN_INPUT);
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	63 e0       	ldi	r22, 0x03	; 3
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_FIRST_PIN_ID + 2, PIN_INPUT);
    1f8a:	83 e0       	ldi	r24, 0x03	; 3
    1f8c:	64 e0       	ldi	r22, 0x04	; 4
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_setupPinDirection>
#if (KEYPAD_NUM_OF_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_FIRST_PIN_ID + 3, PIN_INPUT);
    1f94:	83 e0       	ldi	r24, 0x03	; 3
    1f96:	65 e0       	ldi	r22, 0x05	; 5
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_setupPinDirection>
#endif

	while (1)
	{
		for (row = 0; row < KEYPAD_NUM_OF_ROWS; row++)
    1f9e:	18 8a       	std	Y+16, r1	; 0x10
    1fa0:	b4 c0       	rjmp	.+360    	; 0x210a <KEYPAD_getPressedKey+0x1d0>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + row, PIN_OUTPUT);
    1fa2:	88 89       	ldd	r24, Y+16	; 0x10
    1fa4:	98 2f       	mov	r25, r24
    1fa6:	9c 5f       	subi	r25, 0xFC	; 252
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	69 2f       	mov	r22, r25
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + row, KEYPAD_BUTTON_PRESSED);
    1fb2:	88 89       	ldd	r24, Y+16	; 0x10
    1fb4:	98 2f       	mov	r25, r24
    1fb6:	9c 5f       	subi	r25, 0xFC	; 252
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	69 2f       	mov	r22, r25
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <GPIO_writePin>

			for (col = 0; col < KEYPAD_NUM_OF_COLS; col++)
    1fc2:	1f 86       	std	Y+15, r1	; 0x0f
    1fc4:	22 c0       	rjmp	.+68     	; 0x200a <KEYPAD_getPressedKey+0xd0>
			{
				if (GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_COL_FIRST_PIN_ID + col) == KEYPAD_BUTTON_PRESSED)
    1fc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc8:	98 2f       	mov	r25, r24
    1fca:	9e 5f       	subi	r25, 0xFE	; 254
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	69 2f       	mov	r22, r25
    1fd0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_readPin>
    1fd4:	88 23       	and	r24, r24
    1fd6:	b1 f4       	brne	.+44     	; 0x2004 <KEYPAD_getPressedKey+0xca>
					return ((row * KEYPAD_NUM_OF_COLS) + col + 1);
#else
#ifdef ETA32_MINI
                    return KEYPAD_4x4_adjustKeyNumber_ETA32MINI((row * KEYPAD_NUM_OF_COLS) + col + 1)
#else
					return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_OF_COLS) + col + 1);
    1fd8:	88 89       	ldd	r24, Y+16	; 0x10
    1fda:	88 2f       	mov	r24, r24
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	98 2f       	mov	r25, r24
    1fe8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fea:	89 0f       	add	r24, r25
    1fec:	8f 5f       	subi	r24, 0xFF	; 255
    1fee:	0e 94 8a 10 	call	0x2114	; 0x2114 <KEYPAD_4x4_adjustKeyNumber>
#ifndef STANDARD_KEYPAD /*no need worry about the CPU load if I'm working on the Eta32mini*/
			_delay_ms(10);
#endif
		}
	}
}
    1ff2:	60 96       	adiw	r28, 0x10	; 16
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret
		for (row = 0; row < KEYPAD_NUM_OF_ROWS; row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + row, KEYPAD_BUTTON_PRESSED);

			for (col = 0; col < KEYPAD_NUM_OF_COLS; col++)
    2004:	8f 85       	ldd	r24, Y+15	; 0x0f
    2006:	8f 5f       	subi	r24, 0xFF	; 255
    2008:	8f 87       	std	Y+15, r24	; 0x0f
    200a:	8f 85       	ldd	r24, Y+15	; 0x0f
    200c:	84 30       	cpi	r24, 0x04	; 4
    200e:	d8 f2       	brcs	.-74     	; 0x1fc6 <KEYPAD_getPressedKey+0x8c>
#endif
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + row, PIN_INPUT);
    2010:	88 89       	ldd	r24, Y+16	; 0x10
    2012:	98 2f       	mov	r25, r24
    2014:	9c 5f       	subi	r25, 0xFC	; 252
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	69 2f       	mov	r22, r25
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_setupPinDirection>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e2       	ldi	r26, 0x20	; 32
    2026:	b1 e4       	ldi	r27, 0x41	; 65
    2028:	8b 87       	std	Y+11, r24	; 0x0b
    202a:	9c 87       	std	Y+12, r25	; 0x0c
    202c:	ad 87       	std	Y+13, r26	; 0x0d
    202e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2030:	6b 85       	ldd	r22, Y+11	; 0x0b
    2032:	7c 85       	ldd	r23, Y+12	; 0x0c
    2034:	8d 85       	ldd	r24, Y+13	; 0x0d
    2036:	9e 85       	ldd	r25, Y+14	; 0x0e
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	4a ef       	ldi	r20, 0xFA	; 250
    203e:	54 e4       	ldi	r21, 0x44	; 68
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	8f 83       	std	Y+7, r24	; 0x07
    204a:	98 87       	std	Y+8, r25	; 0x08
    204c:	a9 87       	std	Y+9, r26	; 0x09
    204e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2050:	6f 81       	ldd	r22, Y+7	; 0x07
    2052:	78 85       	ldd	r23, Y+8	; 0x08
    2054:	89 85       	ldd	r24, Y+9	; 0x09
    2056:	9a 85       	ldd	r25, Y+10	; 0x0a
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2064:	88 23       	and	r24, r24
    2066:	2c f4       	brge	.+10     	; 0x2072 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	3f c0       	rjmp	.+126    	; 0x20f0 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	3f ef       	ldi	r19, 0xFF	; 255
    207e:	4f e7       	ldi	r20, 0x7F	; 127
    2080:	57 e4       	ldi	r21, 0x47	; 71
    2082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2086:	18 16       	cp	r1, r24
    2088:	4c f5       	brge	.+82     	; 0x20dc <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208a:	6b 85       	ldd	r22, Y+11	; 0x0b
    208c:	7c 85       	ldd	r23, Y+12	; 0x0c
    208e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2090:	9e 85       	ldd	r25, Y+14	; 0x0e
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e2       	ldi	r20, 0x20	; 32
    2098:	51 e4       	ldi	r21, 0x41	; 65
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <KEYPAD_getPressedKey+0x198>
    20b4:	88 ec       	ldi	r24, 0xC8	; 200
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9c 83       	std	Y+4, r25	; 0x04
    20ba:	8b 83       	std	Y+3, r24	; 0x03
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <KEYPAD_getPressedKey+0x186>
    20c4:	9c 83       	std	Y+4, r25	; 0x04
    20c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ca:	9e 81       	ldd	r25, Y+6	; 0x06
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	69 f7       	brne	.-38     	; 0x20b4 <KEYPAD_getPressedKey+0x17a>
    20da:	14 c0       	rjmp	.+40     	; 0x2104 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20dc:	6f 81       	ldd	r22, Y+7	; 0x07
    20de:	78 85       	ldd	r23, Y+8	; 0x08
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	9e 81       	ldd	r25, Y+6	; 0x06
    20f4:	9a 83       	std	Y+2, r25	; 0x02
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <KEYPAD_getPressedKey+0x1c2>
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_FIRST_PIN_ID + 3, PIN_INPUT);
#endif

	while (1)
	{
		for (row = 0; row < KEYPAD_NUM_OF_ROWS; row++)
    2104:	88 89       	ldd	r24, Y+16	; 0x10
    2106:	8f 5f       	subi	r24, 0xFF	; 255
    2108:	88 8b       	std	Y+16, r24	; 0x10
    210a:	88 89       	ldd	r24, Y+16	; 0x10
    210c:	84 30       	cpi	r24, 0x04	; 4
    210e:	08 f4       	brcc	.+2      	; 0x2112 <KEYPAD_getPressedKey+0x1d8>
    2110:	48 cf       	rjmp	.-368    	; 0x1fa2 <KEYPAD_getPressedKey+0x68>
    2112:	45 cf       	rjmp	.-374    	; 0x1f9e <KEYPAD_getPressedKey+0x64>

00002114 <KEYPAD_4x4_adjustKeyNumber>:
    }
}
#elif (KEYPAD_NUM_OF_COLS == 4)

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	00 d0       	rcall	.+0      	; 0x211a <KEYPAD_4x4_adjustKeyNumber+0x6>
    211a:	00 d0       	rcall	.+0      	; 0x211c <KEYPAD_4x4_adjustKeyNumber+0x8>
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	3c 83       	std	Y+4, r19	; 0x04
    212a:	2b 83       	std	Y+3, r18	; 0x03
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	9c 81       	ldd	r25, Y+4	; 0x04
    2130:	88 30       	cpi	r24, 0x08	; 8
    2132:	91 05       	cpc	r25, r1
    2134:	09 f4       	brne	.+2      	; 0x2138 <KEYPAD_4x4_adjustKeyNumber+0x24>
    2136:	70 c0       	rjmp	.+224    	; 0x2218 <KEYPAD_4x4_adjustKeyNumber+0x104>
    2138:	2b 81       	ldd	r18, Y+3	; 0x03
    213a:	3c 81       	ldd	r19, Y+4	; 0x04
    213c:	29 30       	cpi	r18, 0x09	; 9
    213e:	31 05       	cpc	r19, r1
    2140:	5c f5       	brge	.+86     	; 0x2198 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	84 30       	cpi	r24, 0x04	; 4
    2148:	91 05       	cpc	r25, r1
    214a:	09 f4       	brne	.+2      	; 0x214e <KEYPAD_4x4_adjustKeyNumber+0x3a>
    214c:	59 c0       	rjmp	.+178    	; 0x2200 <KEYPAD_4x4_adjustKeyNumber+0xec>
    214e:	2b 81       	ldd	r18, Y+3	; 0x03
    2150:	3c 81       	ldd	r19, Y+4	; 0x04
    2152:	25 30       	cpi	r18, 0x05	; 5
    2154:	31 05       	cpc	r19, r1
    2156:	9c f4       	brge	.+38     	; 0x217e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	82 30       	cpi	r24, 0x02	; 2
    215e:	91 05       	cpc	r25, r1
    2160:	09 f4       	brne	.+2      	; 0x2164 <KEYPAD_4x4_adjustKeyNumber+0x50>
    2162:	48 c0       	rjmp	.+144    	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0xe0>
    2164:	2b 81       	ldd	r18, Y+3	; 0x03
    2166:	3c 81       	ldd	r19, Y+4	; 0x04
    2168:	23 30       	cpi	r18, 0x03	; 3
    216a:	31 05       	cpc	r19, r1
    216c:	0c f0       	brlt	.+2      	; 0x2170 <KEYPAD_4x4_adjustKeyNumber+0x5c>
    216e:	45 c0       	rjmp	.+138    	; 0x21fa <KEYPAD_4x4_adjustKeyNumber+0xe6>
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	81 30       	cpi	r24, 0x01	; 1
    2176:	91 05       	cpc	r25, r1
    2178:	09 f4       	brne	.+2      	; 0x217c <KEYPAD_4x4_adjustKeyNumber+0x68>
    217a:	39 c0       	rjmp	.+114    	; 0x21ee <KEYPAD_4x4_adjustKeyNumber+0xda>
    217c:	67 c0       	rjmp	.+206    	; 0x224c <KEYPAD_4x4_adjustKeyNumber+0x138>
    217e:	2b 81       	ldd	r18, Y+3	; 0x03
    2180:	3c 81       	ldd	r19, Y+4	; 0x04
    2182:	26 30       	cpi	r18, 0x06	; 6
    2184:	31 05       	cpc	r19, r1
    2186:	09 f4       	brne	.+2      	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x76>
    2188:	41 c0       	rjmp	.+130    	; 0x220c <KEYPAD_4x4_adjustKeyNumber+0xf8>
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	9c 81       	ldd	r25, Y+4	; 0x04
    218e:	87 30       	cpi	r24, 0x07	; 7
    2190:	91 05       	cpc	r25, r1
    2192:	0c f0       	brlt	.+2      	; 0x2196 <KEYPAD_4x4_adjustKeyNumber+0x82>
    2194:	3e c0       	rjmp	.+124    	; 0x2212 <KEYPAD_4x4_adjustKeyNumber+0xfe>
    2196:	37 c0       	rjmp	.+110    	; 0x2206 <KEYPAD_4x4_adjustKeyNumber+0xf2>
    2198:	2b 81       	ldd	r18, Y+3	; 0x03
    219a:	3c 81       	ldd	r19, Y+4	; 0x04
    219c:	2c 30       	cpi	r18, 0x0C	; 12
    219e:	31 05       	cpc	r19, r1
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <KEYPAD_4x4_adjustKeyNumber+0x90>
    21a2:	46 c0       	rjmp	.+140    	; 0x2230 <KEYPAD_4x4_adjustKeyNumber+0x11c>
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	8d 30       	cpi	r24, 0x0D	; 13
    21aa:	91 05       	cpc	r25, r1
    21ac:	5c f4       	brge	.+22     	; 0x21c4 <KEYPAD_4x4_adjustKeyNumber+0xb0>
    21ae:	2b 81       	ldd	r18, Y+3	; 0x03
    21b0:	3c 81       	ldd	r19, Y+4	; 0x04
    21b2:	2a 30       	cpi	r18, 0x0A	; 10
    21b4:	31 05       	cpc	r19, r1
    21b6:	b1 f1       	breq	.+108    	; 0x2224 <KEYPAD_4x4_adjustKeyNumber+0x110>
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	8b 30       	cpi	r24, 0x0B	; 11
    21be:	91 05       	cpc	r25, r1
    21c0:	a4 f5       	brge	.+104    	; 0x222a <KEYPAD_4x4_adjustKeyNumber+0x116>
    21c2:	2d c0       	rjmp	.+90     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x10a>
    21c4:	2b 81       	ldd	r18, Y+3	; 0x03
    21c6:	3c 81       	ldd	r19, Y+4	; 0x04
    21c8:	2e 30       	cpi	r18, 0x0E	; 14
    21ca:	31 05       	cpc	r19, r1
    21cc:	b9 f1       	breq	.+110    	; 0x223c <KEYPAD_4x4_adjustKeyNumber+0x128>
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	8e 30       	cpi	r24, 0x0E	; 14
    21d4:	91 05       	cpc	r25, r1
    21d6:	7c f1       	brlt	.+94     	; 0x2236 <KEYPAD_4x4_adjustKeyNumber+0x122>
    21d8:	2b 81       	ldd	r18, Y+3	; 0x03
    21da:	3c 81       	ldd	r19, Y+4	; 0x04
    21dc:	2f 30       	cpi	r18, 0x0F	; 15
    21de:	31 05       	cpc	r19, r1
    21e0:	79 f1       	breq	.+94     	; 0x2240 <KEYPAD_4x4_adjustKeyNumber+0x12c>
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	80 31       	cpi	r24, 0x10	; 16
    21e8:	91 05       	cpc	r25, r1
    21ea:	69 f1       	breq	.+90     	; 0x2246 <KEYPAD_4x4_adjustKeyNumber+0x132>
    21ec:	2f c0       	rjmp	.+94     	; 0x224c <KEYPAD_4x4_adjustKeyNumber+0x138>
	{
	case 1:
		return 7;
    21ee:	97 e0       	ldi	r25, 0x07	; 7
    21f0:	9a 83       	std	Y+2, r25	; 0x02
    21f2:	2e c0       	rjmp	.+92     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 2:
		return 8;
    21f4:	28 e0       	ldi	r18, 0x08	; 8
    21f6:	2a 83       	std	Y+2, r18	; 0x02
    21f8:	2b c0       	rjmp	.+86     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 3:
		return 9;
    21fa:	39 e0       	ldi	r19, 0x09	; 9
    21fc:	3a 83       	std	Y+2, r19	; 0x02
    21fe:	28 c0       	rjmp	.+80     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 4:
		return '/';
    2200:	8f e2       	ldi	r24, 0x2F	; 47
    2202:	8a 83       	std	Y+2, r24	; 0x02
    2204:	25 c0       	rjmp	.+74     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 5:
		return 4;
    2206:	94 e0       	ldi	r25, 0x04	; 4
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	22 c0       	rjmp	.+68     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 6:
		return 5;
    220c:	25 e0       	ldi	r18, 0x05	; 5
    220e:	2a 83       	std	Y+2, r18	; 0x02
    2210:	1f c0       	rjmp	.+62     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 7:
		return 6;
    2212:	36 e0       	ldi	r19, 0x06	; 6
    2214:	3a 83       	std	Y+2, r19	; 0x02
    2216:	1c c0       	rjmp	.+56     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 8:
		return '*';
    2218:	8a e2       	ldi	r24, 0x2A	; 42
    221a:	8a 83       	std	Y+2, r24	; 0x02
    221c:	19 c0       	rjmp	.+50     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 9:
		return 1;
    221e:	91 e0       	ldi	r25, 0x01	; 1
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	16 c0       	rjmp	.+44     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 10:
		return 2;
    2224:	22 e0       	ldi	r18, 0x02	; 2
    2226:	2a 83       	std	Y+2, r18	; 0x02
    2228:	13 c0       	rjmp	.+38     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 11:
		return 3;
    222a:	33 e0       	ldi	r19, 0x03	; 3
    222c:	3a 83       	std	Y+2, r19	; 0x02
    222e:	10 c0       	rjmp	.+32     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 12:
		return '-';
    2230:	8d e2       	ldi	r24, 0x2D	; 45
    2232:	8a 83       	std	Y+2, r24	; 0x02
    2234:	0d c0       	rjmp	.+26     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 13:
		return 13;
    2236:	9d e0       	ldi	r25, 0x0D	; 13
    2238:	9a 83       	std	Y+2, r25	; 0x02
    223a:	0a c0       	rjmp	.+20     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 14:
		return 0;
    223c:	1a 82       	std	Y+2, r1	; 0x02
    223e:	08 c0       	rjmp	.+16     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 15:
		return '=';
    2240:	2d e3       	ldi	r18, 0x3D	; 61
    2242:	2a 83       	std	Y+2, r18	; 0x02
    2244:	05 c0       	rjmp	.+10     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	case 16:
		return '+';
    2246:	3b e2       	ldi	r19, 0x2B	; 43
    2248:	3a 83       	std	Y+2, r19	; 0x02
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x13c>
		break;
	default:
		return button_number;
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	8a 83       	std	Y+2, r24	; 0x02
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <LCD_init>:
#include"my_lcd.h"
#include "my_gpio.h"
#include "my_common_macros.h"
#include "util/delay.h"
void LCD_init(void)
{
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	2e 97       	sbiw	r28, 0x0e	; 14
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2274:	83 e0       	ldi	r24, 0x03	; 3
    2276:	66 e0       	ldi	r22, 0x06	; 6
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    227e:	83 e0       	ldi	r24, 0x03	; 3
    2280:	67 e0       	ldi	r22, 0x07	; 7
    2282:	41 e0       	ldi	r20, 0x01	; 1
    2284:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <GPIO_setupPinDirection>
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a0 ea       	ldi	r26, 0xA0	; 160
    228e:	b1 e4       	ldi	r27, 0x41	; 65
    2290:	8b 87       	std	Y+11, r24	; 0x0b
    2292:	9c 87       	std	Y+12, r25	; 0x0c
    2294:	ad 87       	std	Y+13, r26	; 0x0d
    2296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	6b 85       	ldd	r22, Y+11	; 0x0b
    229a:	7c 85       	ldd	r23, Y+12	; 0x0c
    229c:	8d 85       	ldd	r24, Y+13	; 0x0d
    229e:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a ef       	ldi	r20, 0xFA	; 250
    22a6:	54 e4       	ldi	r21, 0x44	; 68
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8f 83       	std	Y+7, r24	; 0x07
    22b2:	98 87       	std	Y+8, r25	; 0x08
    22b4:	a9 87       	std	Y+9, r26	; 0x09
    22b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ba:	78 85       	ldd	r23, Y+8	; 0x08
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	2c f4       	brge	.+10     	; 0x22da <LCD_init+0x7a>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
    22d8:	3f c0       	rjmp	.+126    	; 0x2358 <LCD_init+0xf8>
	else if (__tmp > 65535)
    22da:	6f 81       	ldd	r22, Y+7	; 0x07
    22dc:	78 85       	ldd	r23, Y+8	; 0x08
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	4c f5       	brge	.+82     	; 0x2344 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	0f c0       	rjmp	.+30     	; 0x233a <LCD_init+0xda>
    231c:	88 ec       	ldi	r24, 0xC8	; 200
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <LCD_init+0xc8>
    232c:	9c 83       	std	Y+4, r25	; 0x04
    232e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	9e 81       	ldd	r25, Y+6	; 0x06
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	69 f7       	brne	.-38     	; 0x231c <LCD_init+0xbc>
    2342:	14 c0       	rjmp	.+40     	; 0x236c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2344:	6f 81       	ldd	r22, Y+7	; 0x07
    2346:	78 85       	ldd	r23, Y+8	; 0x08
    2348:	89 85       	ldd	r24, Y+9	; 0x09
    234a:	9a 85       	ldd	r25, Y+10	; 0x0a
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <LCD_init+0x104>
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

#if(LCD_DATA_BITS_MODE == 8)

	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	6f ef       	ldi	r22, 0xFF	; 255
    2370:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2374:	88 e3       	ldi	r24, 0x38	; 56
    2376:	0e 94 cc 11 	call	0x2398	; 0x2398 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    237a:	8c e0       	ldi	r24, 0x0C	; 12
    237c:	0e 94 cc 11 	call	0x2398	; 0x2398 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	0e 94 cc 11 	call	0x2398	; 0x2398 <LCD_sendCommand>
}
    2386:	2e 96       	adiw	r28, 0x0e	; 14
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	e9 97       	sbiw	r28, 0x39	; 57
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    23ae:	83 e0       	ldi	r24, 0x03	; 3
    23b0:	66 e0       	ldi	r22, 0x06	; 6
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <GPIO_writePin>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a0 e8       	ldi	r26, 0x80	; 128
    23be:	bf e3       	ldi	r27, 0x3F	; 63
    23c0:	8d ab       	std	Y+53, r24	; 0x35
    23c2:	9e ab       	std	Y+54, r25	; 0x36
    23c4:	af ab       	std	Y+55, r26	; 0x37
    23c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	6d a9       	ldd	r22, Y+53	; 0x35
    23ca:	7e a9       	ldd	r23, Y+54	; 0x36
    23cc:	8f a9       	ldd	r24, Y+55	; 0x37
    23ce:	98 ad       	ldd	r25, Y+56	; 0x38
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a ef       	ldi	r20, 0xFA	; 250
    23d6:	54 e4       	ldi	r21, 0x44	; 68
    23d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	89 ab       	std	Y+49, r24	; 0x31
    23e2:	9a ab       	std	Y+50, r25	; 0x32
    23e4:	ab ab       	std	Y+51, r26	; 0x33
    23e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23e8:	69 a9       	ldd	r22, Y+49	; 0x31
    23ea:	7a a9       	ldd	r23, Y+50	; 0x32
    23ec:	8b a9       	ldd	r24, Y+51	; 0x33
    23ee:	9c a9       	ldd	r25, Y+52	; 0x34
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <LCD_sendCommand+0x72>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	98 ab       	std	Y+48, r25	; 0x30
    2406:	8f a7       	std	Y+47, r24	; 0x2f
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    240a:	69 a9       	ldd	r22, Y+49	; 0x31
    240c:	7a a9       	ldd	r23, Y+50	; 0x32
    240e:	8b a9       	ldd	r24, Y+51	; 0x33
    2410:	9c a9       	ldd	r25, Y+52	; 0x34
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	4c f5       	brge	.+82     	; 0x2474 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2422:	6d a9       	ldd	r22, Y+53	; 0x35
    2424:	7e a9       	ldd	r23, Y+54	; 0x36
    2426:	8f a9       	ldd	r24, Y+55	; 0x37
    2428:	98 ad       	ldd	r25, Y+56	; 0x38
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	51 e4       	ldi	r21, 0x41	; 65
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	98 ab       	std	Y+48, r25	; 0x30
    2448:	8f a7       	std	Y+47, r24	; 0x2f
    244a:	0f c0       	rjmp	.+30     	; 0x246a <LCD_sendCommand+0xd2>
    244c:	88 ec       	ldi	r24, 0xC8	; 200
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9e a7       	std	Y+46, r25	; 0x2e
    2452:	8d a7       	std	Y+45, r24	; 0x2d
    2454:	8d a5       	ldd	r24, Y+45	; 0x2d
    2456:	9e a5       	ldd	r25, Y+46	; 0x2e
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <LCD_sendCommand+0xc0>
    245c:	9e a7       	std	Y+46, r25	; 0x2e
    245e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	8f a5       	ldd	r24, Y+47	; 0x2f
    2462:	98 a9       	ldd	r25, Y+48	; 0x30
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	98 ab       	std	Y+48, r25	; 0x30
    2468:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	8f a5       	ldd	r24, Y+47	; 0x2f
    246c:	98 a9       	ldd	r25, Y+48	; 0x30
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f7       	brne	.-38     	; 0x244c <LCD_sendCommand+0xb4>
    2472:	14 c0       	rjmp	.+40     	; 0x249c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	69 a9       	ldd	r22, Y+49	; 0x31
    2476:	7a a9       	ldd	r23, Y+50	; 0x32
    2478:	8b a9       	ldd	r24, Y+51	; 0x33
    247a:	9c a9       	ldd	r25, Y+52	; 0x34
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	98 ab       	std	Y+48, r25	; 0x30
    2486:	8f a7       	std	Y+47, r24	; 0x2f
    2488:	8f a5       	ldd	r24, Y+47	; 0x2f
    248a:	98 a9       	ldd	r25, Y+48	; 0x30
    248c:	9c a7       	std	Y+44, r25	; 0x2c
    248e:	8b a7       	std	Y+43, r24	; 0x2b
    2490:	8b a5       	ldd	r24, Y+43	; 0x2b
    2492:	9c a5       	ldd	r25, Y+44	; 0x2c
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_sendCommand+0xfc>
    2498:	9c a7       	std	Y+44, r25	; 0x2c
    249a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    249c:	83 e0       	ldi	r24, 0x03	; 3
    249e:	67 e0       	ldi	r22, 0x07	; 7
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <GPIO_writePin>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e8       	ldi	r26, 0x80	; 128
    24ac:	bf e3       	ldi	r27, 0x3F	; 63
    24ae:	8f a3       	std	Y+39, r24	; 0x27
    24b0:	98 a7       	std	Y+40, r25	; 0x28
    24b2:	a9 a7       	std	Y+41, r26	; 0x29
    24b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	6f a1       	ldd	r22, Y+39	; 0x27
    24b8:	78 a5       	ldd	r23, Y+40	; 0x28
    24ba:	89 a5       	ldd	r24, Y+41	; 0x29
    24bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a ef       	ldi	r20, 0xFA	; 250
    24c4:	54 e4       	ldi	r21, 0x44	; 68
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	8b a3       	std	Y+35, r24	; 0x23
    24d0:	9c a3       	std	Y+36, r25	; 0x24
    24d2:	ad a3       	std	Y+37, r26	; 0x25
    24d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24d6:	6b a1       	ldd	r22, Y+35	; 0x23
    24d8:	7c a1       	ldd	r23, Y+36	; 0x24
    24da:	8d a1       	ldd	r24, Y+37	; 0x25
    24dc:	9e a1       	ldd	r25, Y+38	; 0x26
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_sendCommand+0x160>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9a a3       	std	Y+34, r25	; 0x22
    24f4:	89 a3       	std	Y+33, r24	; 0x21
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    24f8:	6b a1       	ldd	r22, Y+35	; 0x23
    24fa:	7c a1       	ldd	r23, Y+36	; 0x24
    24fc:	8d a1       	ldd	r24, Y+37	; 0x25
    24fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	6f a1       	ldd	r22, Y+39	; 0x27
    2512:	78 a5       	ldd	r23, Y+40	; 0x28
    2514:	89 a5       	ldd	r24, Y+41	; 0x29
    2516:	9a a5       	ldd	r25, Y+42	; 0x2a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9a a3       	std	Y+34, r25	; 0x22
    2536:	89 a3       	std	Y+33, r24	; 0x21
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_sendCommand+0x1c0>
    253a:	88 ec       	ldi	r24, 0xC8	; 200
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	98 a3       	std	Y+32, r25	; 0x20
    2540:	8f 8f       	std	Y+31, r24	; 0x1f
    2542:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2544:	98 a1       	ldd	r25, Y+32	; 0x20
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_sendCommand+0x1ae>
    254a:	98 a3       	std	Y+32, r25	; 0x20
    254c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	89 a1       	ldd	r24, Y+33	; 0x21
    2550:	9a a1       	ldd	r25, Y+34	; 0x22
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9a a3       	std	Y+34, r25	; 0x22
    2556:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	89 a1       	ldd	r24, Y+33	; 0x21
    255a:	9a a1       	ldd	r25, Y+34	; 0x22
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_sendCommand+0x1a2>
    2560:	14 c0       	rjmp	.+40     	; 0x258a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	6b a1       	ldd	r22, Y+35	; 0x23
    2564:	7c a1       	ldd	r23, Y+36	; 0x24
    2566:	8d a1       	ldd	r24, Y+37	; 0x25
    2568:	9e a1       	ldd	r25, Y+38	; 0x26
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9a a3       	std	Y+34, r25	; 0x22
    2574:	89 a3       	std	Y+33, r24	; 0x21
    2576:	89 a1       	ldd	r24, Y+33	; 0x21
    2578:	9a a1       	ldd	r25, Y+34	; 0x22
    257a:	9e 8f       	std	Y+30, r25	; 0x1e
    257c:	8d 8f       	std	Y+29, r24	; 0x1d
    257e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2580:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_sendCommand+0x1ea>
    2586:	9e 8f       	std	Y+30, r25	; 0x1e
    2588:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if(LCD_DATA_BITS_MODE==8)
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    258a:	82 e0       	ldi	r24, 0x02	; 2
    258c:	69 ad       	ldd	r22, Y+57	; 0x39
    258e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <GPIO_writePort>
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a0 e8       	ldi	r26, 0x80	; 128
    2598:	bf e3       	ldi	r27, 0x3F	; 63
    259a:	89 8f       	std	Y+25, r24	; 0x19
    259c:	9a 8f       	std	Y+26, r25	; 0x1a
    259e:	ab 8f       	std	Y+27, r26	; 0x1b
    25a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a2:	69 8d       	ldd	r22, Y+25	; 0x19
    25a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4a ef       	ldi	r20, 0xFA	; 250
    25b0:	54 e4       	ldi	r21, 0x44	; 68
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8d 8b       	std	Y+21, r24	; 0x15
    25bc:	9e 8b       	std	Y+22, r25	; 0x16
    25be:	af 8b       	std	Y+23, r26	; 0x17
    25c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25c2:	6d 89       	ldd	r22, Y+21	; 0x15
    25c4:	7e 89       	ldd	r23, Y+22	; 0x16
    25c6:	8f 89       	ldd	r24, Y+23	; 0x17
    25c8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <LCD_sendCommand+0x24c>
		__ticks = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9c 8b       	std	Y+20, r25	; 0x14
    25e0:	8b 8b       	std	Y+19, r24	; 0x13
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    25e4:	6d 89       	ldd	r22, Y+21	; 0x15
    25e6:	7e 89       	ldd	r23, Y+22	; 0x16
    25e8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ea:	98 8d       	ldd	r25, Y+24	; 0x18
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f8:	18 16       	cp	r1, r24
    25fa:	4c f5       	brge	.+82     	; 0x264e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fc:	69 8d       	ldd	r22, Y+25	; 0x19
    25fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2600:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2602:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e2       	ldi	r20, 0x20	; 32
    260a:	51 e4       	ldi	r21, 0x41	; 65
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9c 8b       	std	Y+20, r25	; 0x14
    2622:	8b 8b       	std	Y+19, r24	; 0x13
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <LCD_sendCommand+0x2ac>
    2626:	88 ec       	ldi	r24, 0xC8	; 200
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9a 8b       	std	Y+18, r25	; 0x12
    262c:	89 8b       	std	Y+17, r24	; 0x11
    262e:	89 89       	ldd	r24, Y+17	; 0x11
    2630:	9a 89       	ldd	r25, Y+18	; 0x12
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <LCD_sendCommand+0x29a>
    2636:	9a 8b       	std	Y+18, r25	; 0x12
    2638:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263a:	8b 89       	ldd	r24, Y+19	; 0x13
    263c:	9c 89       	ldd	r25, Y+20	; 0x14
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	9c 8b       	std	Y+20, r25	; 0x14
    2642:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2644:	8b 89       	ldd	r24, Y+19	; 0x13
    2646:	9c 89       	ldd	r25, Y+20	; 0x14
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	69 f7       	brne	.-38     	; 0x2626 <LCD_sendCommand+0x28e>
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	6d 89       	ldd	r22, Y+21	; 0x15
    2650:	7e 89       	ldd	r23, Y+22	; 0x16
    2652:	8f 89       	ldd	r24, Y+23	; 0x17
    2654:	98 8d       	ldd	r25, Y+24	; 0x18
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9c 8b       	std	Y+20, r25	; 0x14
    2660:	8b 8b       	std	Y+19, r24	; 0x13
    2662:	8b 89       	ldd	r24, Y+19	; 0x13
    2664:	9c 89       	ldd	r25, Y+20	; 0x14
    2666:	98 8b       	std	Y+16, r25	; 0x10
    2668:	8f 87       	std	Y+15, r24	; 0x0f
    266a:	8f 85       	ldd	r24, Y+15	; 0x0f
    266c:	98 89       	ldd	r25, Y+16	; 0x10
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <LCD_sendCommand+0x2d6>
    2672:	98 8b       	std	Y+16, r25	; 0x10
    2674:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2676:	83 e0       	ldi	r24, 0x03	; 3
    2678:	67 e0       	ldi	r22, 0x07	; 7
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <GPIO_writePin>
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a0 e8       	ldi	r26, 0x80	; 128
    2686:	bf e3       	ldi	r27, 0x3F	; 63
    2688:	8b 87       	std	Y+11, r24	; 0x0b
    268a:	9c 87       	std	Y+12, r25	; 0x0c
    268c:	ad 87       	std	Y+13, r26	; 0x0d
    268e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2690:	6b 85       	ldd	r22, Y+11	; 0x0b
    2692:	7c 85       	ldd	r23, Y+12	; 0x0c
    2694:	8d 85       	ldd	r24, Y+13	; 0x0d
    2696:	9e 85       	ldd	r25, Y+14	; 0x0e
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	4a ef       	ldi	r20, 0xFA	; 250
    269e:	54 e4       	ldi	r21, 0x44	; 68
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	8f 83       	std	Y+7, r24	; 0x07
    26aa:	98 87       	std	Y+8, r25	; 0x08
    26ac:	a9 87       	std	Y+9, r26	; 0x09
    26ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26b0:	6f 81       	ldd	r22, Y+7	; 0x07
    26b2:	78 85       	ldd	r23, Y+8	; 0x08
    26b4:	89 85       	ldd	r24, Y+9	; 0x09
    26b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e8       	ldi	r20, 0x80	; 128
    26be:	5f e3       	ldi	r21, 0x3F	; 63
    26c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c4:	88 23       	and	r24, r24
    26c6:	2c f4       	brge	.+10     	; 0x26d2 <LCD_sendCommand+0x33a>
		__ticks = 1;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	9e 83       	std	Y+6, r25	; 0x06
    26ce:	8d 83       	std	Y+5, r24	; 0x05
    26d0:	3f c0       	rjmp	.+126    	; 0x2750 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    26d2:	6f 81       	ldd	r22, Y+7	; 0x07
    26d4:	78 85       	ldd	r23, Y+8	; 0x08
    26d6:	89 85       	ldd	r24, Y+9	; 0x09
    26d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	3f ef       	ldi	r19, 0xFF	; 255
    26de:	4f e7       	ldi	r20, 0x7F	; 127
    26e0:	57 e4       	ldi	r21, 0x47	; 71
    26e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e6:	18 16       	cp	r1, r24
    26e8:	4c f5       	brge	.+82     	; 0x273c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e2       	ldi	r20, 0x20	; 32
    26f8:	51 e4       	ldi	r21, 0x41	; 65
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	bc 01       	movw	r22, r24
    2704:	cd 01       	movw	r24, r26
    2706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	9e 83       	std	Y+6, r25	; 0x06
    2710:	8d 83       	std	Y+5, r24	; 0x05
    2712:	0f c0       	rjmp	.+30     	; 0x2732 <LCD_sendCommand+0x39a>
    2714:	88 ec       	ldi	r24, 0xC8	; 200
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	9c 83       	std	Y+4, r25	; 0x04
    271a:	8b 83       	std	Y+3, r24	; 0x03
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <LCD_sendCommand+0x388>
    2724:	9c 83       	std	Y+4, r25	; 0x04
    2726:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2728:	8d 81       	ldd	r24, Y+5	; 0x05
    272a:	9e 81       	ldd	r25, Y+6	; 0x06
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	9e 83       	std	Y+6, r25	; 0x06
    2730:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2732:	8d 81       	ldd	r24, Y+5	; 0x05
    2734:	9e 81       	ldd	r25, Y+6	; 0x06
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	69 f7       	brne	.-38     	; 0x2714 <LCD_sendCommand+0x37c>
    273a:	14 c0       	rjmp	.+40     	; 0x2764 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273c:	6f 81       	ldd	r22, Y+7	; 0x07
    273e:	78 85       	ldd	r23, Y+8	; 0x08
    2740:	89 85       	ldd	r24, Y+9	; 0x09
    2742:	9a 85       	ldd	r25, Y+10	; 0x0a
    2744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	9e 83       	std	Y+6, r25	; 0x06
    274e:	8d 83       	std	Y+5, r24	; 0x05
    2750:	8d 81       	ldd	r24, Y+5	; 0x05
    2752:	9e 81       	ldd	r25, Y+6	; 0x06
    2754:	9a 83       	std	Y+2, r25	; 0x02
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <LCD_sendCommand+0x3c4>
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#endif

}
    2764:	e9 96       	adiw	r28, 0x39	; 57
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	e9 97       	sbiw	r28, 0x39	; 57
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    278c:	83 e0       	ldi	r24, 0x03	; 3
    278e:	66 e0       	ldi	r22, 0x06	; 6
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <GPIO_writePin>
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	a0 e8       	ldi	r26, 0x80	; 128
    279c:	bf e3       	ldi	r27, 0x3F	; 63
    279e:	8d ab       	std	Y+53, r24	; 0x35
    27a0:	9e ab       	std	Y+54, r25	; 0x36
    27a2:	af ab       	std	Y+55, r26	; 0x37
    27a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a6:	6d a9       	ldd	r22, Y+53	; 0x35
    27a8:	7e a9       	ldd	r23, Y+54	; 0x36
    27aa:	8f a9       	ldd	r24, Y+55	; 0x37
    27ac:	98 ad       	ldd	r25, Y+56	; 0x38
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	4a ef       	ldi	r20, 0xFA	; 250
    27b4:	54 e4       	ldi	r21, 0x44	; 68
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	89 ab       	std	Y+49, r24	; 0x31
    27c0:	9a ab       	std	Y+50, r25	; 0x32
    27c2:	ab ab       	std	Y+51, r26	; 0x33
    27c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27c6:	69 a9       	ldd	r22, Y+49	; 0x31
    27c8:	7a a9       	ldd	r23, Y+50	; 0x32
    27ca:	8b a9       	ldd	r24, Y+51	; 0x33
    27cc:	9c a9       	ldd	r25, Y+52	; 0x34
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e8       	ldi	r20, 0x80	; 128
    27d4:	5f e3       	ldi	r21, 0x3F	; 63
    27d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27da:	88 23       	and	r24, r24
    27dc:	2c f4       	brge	.+10     	; 0x27e8 <LCD_displayCharacter+0x72>
		__ticks = 1;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	98 ab       	std	Y+48, r25	; 0x30
    27e4:	8f a7       	std	Y+47, r24	; 0x2f
    27e6:	3f c0       	rjmp	.+126    	; 0x2866 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    27e8:	69 a9       	ldd	r22, Y+49	; 0x31
    27ea:	7a a9       	ldd	r23, Y+50	; 0x32
    27ec:	8b a9       	ldd	r24, Y+51	; 0x33
    27ee:	9c a9       	ldd	r25, Y+52	; 0x34
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	3f ef       	ldi	r19, 0xFF	; 255
    27f4:	4f e7       	ldi	r20, 0x7F	; 127
    27f6:	57 e4       	ldi	r21, 0x47	; 71
    27f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27fc:	18 16       	cp	r1, r24
    27fe:	4c f5       	brge	.+82     	; 0x2852 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2800:	6d a9       	ldd	r22, Y+53	; 0x35
    2802:	7e a9       	ldd	r23, Y+54	; 0x36
    2804:	8f a9       	ldd	r24, Y+55	; 0x37
    2806:	98 ad       	ldd	r25, Y+56	; 0x38
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e2       	ldi	r20, 0x20	; 32
    280e:	51 e4       	ldi	r21, 0x41	; 65
    2810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	98 ab       	std	Y+48, r25	; 0x30
    2826:	8f a7       	std	Y+47, r24	; 0x2f
    2828:	0f c0       	rjmp	.+30     	; 0x2848 <LCD_displayCharacter+0xd2>
    282a:	88 ec       	ldi	r24, 0xC8	; 200
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	9e a7       	std	Y+46, r25	; 0x2e
    2830:	8d a7       	std	Y+45, r24	; 0x2d
    2832:	8d a5       	ldd	r24, Y+45	; 0x2d
    2834:	9e a5       	ldd	r25, Y+46	; 0x2e
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <LCD_displayCharacter+0xc0>
    283a:	9e a7       	std	Y+46, r25	; 0x2e
    283c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2840:	98 a9       	ldd	r25, Y+48	; 0x30
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	98 ab       	std	Y+48, r25	; 0x30
    2846:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2848:	8f a5       	ldd	r24, Y+47	; 0x2f
    284a:	98 a9       	ldd	r25, Y+48	; 0x30
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	69 f7       	brne	.-38     	; 0x282a <LCD_displayCharacter+0xb4>
    2850:	14 c0       	rjmp	.+40     	; 0x287a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2852:	69 a9       	ldd	r22, Y+49	; 0x31
    2854:	7a a9       	ldd	r23, Y+50	; 0x32
    2856:	8b a9       	ldd	r24, Y+51	; 0x33
    2858:	9c a9       	ldd	r25, Y+52	; 0x34
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	98 ab       	std	Y+48, r25	; 0x30
    2864:	8f a7       	std	Y+47, r24	; 0x2f
    2866:	8f a5       	ldd	r24, Y+47	; 0x2f
    2868:	98 a9       	ldd	r25, Y+48	; 0x30
    286a:	9c a7       	std	Y+44, r25	; 0x2c
    286c:	8b a7       	std	Y+43, r24	; 0x2b
    286e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2870:	9c a5       	ldd	r25, Y+44	; 0x2c
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <LCD_displayCharacter+0xfc>
    2876:	9c a7       	std	Y+44, r25	; 0x2c
    2878:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    287a:	83 e0       	ldi	r24, 0x03	; 3
    287c:	67 e0       	ldi	r22, 0x07	; 7
    287e:	41 e0       	ldi	r20, 0x01	; 1
    2880:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <GPIO_writePin>
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a0 e8       	ldi	r26, 0x80	; 128
    288a:	bf e3       	ldi	r27, 0x3F	; 63
    288c:	8f a3       	std	Y+39, r24	; 0x27
    288e:	98 a7       	std	Y+40, r25	; 0x28
    2890:	a9 a7       	std	Y+41, r26	; 0x29
    2892:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2894:	6f a1       	ldd	r22, Y+39	; 0x27
    2896:	78 a5       	ldd	r23, Y+40	; 0x28
    2898:	89 a5       	ldd	r24, Y+41	; 0x29
    289a:	9a a5       	ldd	r25, Y+42	; 0x2a
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	4a ef       	ldi	r20, 0xFA	; 250
    28a2:	54 e4       	ldi	r21, 0x44	; 68
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	8b a3       	std	Y+35, r24	; 0x23
    28ae:	9c a3       	std	Y+36, r25	; 0x24
    28b0:	ad a3       	std	Y+37, r26	; 0x25
    28b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28b4:	6b a1       	ldd	r22, Y+35	; 0x23
    28b6:	7c a1       	ldd	r23, Y+36	; 0x24
    28b8:	8d a1       	ldd	r24, Y+37	; 0x25
    28ba:	9e a1       	ldd	r25, Y+38	; 0x26
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e8       	ldi	r20, 0x80	; 128
    28c2:	5f e3       	ldi	r21, 0x3F	; 63
    28c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c8:	88 23       	and	r24, r24
    28ca:	2c f4       	brge	.+10     	; 0x28d6 <LCD_displayCharacter+0x160>
		__ticks = 1;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	9a a3       	std	Y+34, r25	; 0x22
    28d2:	89 a3       	std	Y+33, r24	; 0x21
    28d4:	3f c0       	rjmp	.+126    	; 0x2954 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    28d6:	6b a1       	ldd	r22, Y+35	; 0x23
    28d8:	7c a1       	ldd	r23, Y+36	; 0x24
    28da:	8d a1       	ldd	r24, Y+37	; 0x25
    28dc:	9e a1       	ldd	r25, Y+38	; 0x26
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	3f ef       	ldi	r19, 0xFF	; 255
    28e2:	4f e7       	ldi	r20, 0x7F	; 127
    28e4:	57 e4       	ldi	r21, 0x47	; 71
    28e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ea:	18 16       	cp	r1, r24
    28ec:	4c f5       	brge	.+82     	; 0x2940 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ee:	6f a1       	ldd	r22, Y+39	; 0x27
    28f0:	78 a5       	ldd	r23, Y+40	; 0x28
    28f2:	89 a5       	ldd	r24, Y+41	; 0x29
    28f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e2       	ldi	r20, 0x20	; 32
    28fc:	51 e4       	ldi	r21, 0x41	; 65
    28fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	bc 01       	movw	r22, r24
    2908:	cd 01       	movw	r24, r26
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9a a3       	std	Y+34, r25	; 0x22
    2914:	89 a3       	std	Y+33, r24	; 0x21
    2916:	0f c0       	rjmp	.+30     	; 0x2936 <LCD_displayCharacter+0x1c0>
    2918:	88 ec       	ldi	r24, 0xC8	; 200
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	98 a3       	std	Y+32, r25	; 0x20
    291e:	8f 8f       	std	Y+31, r24	; 0x1f
    2920:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2922:	98 a1       	ldd	r25, Y+32	; 0x20
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <LCD_displayCharacter+0x1ae>
    2928:	98 a3       	std	Y+32, r25	; 0x20
    292a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292c:	89 a1       	ldd	r24, Y+33	; 0x21
    292e:	9a a1       	ldd	r25, Y+34	; 0x22
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	9a a3       	std	Y+34, r25	; 0x22
    2934:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2936:	89 a1       	ldd	r24, Y+33	; 0x21
    2938:	9a a1       	ldd	r25, Y+34	; 0x22
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	69 f7       	brne	.-38     	; 0x2918 <LCD_displayCharacter+0x1a2>
    293e:	14 c0       	rjmp	.+40     	; 0x2968 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2940:	6b a1       	ldd	r22, Y+35	; 0x23
    2942:	7c a1       	ldd	r23, Y+36	; 0x24
    2944:	8d a1       	ldd	r24, Y+37	; 0x25
    2946:	9e a1       	ldd	r25, Y+38	; 0x26
    2948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	9a a3       	std	Y+34, r25	; 0x22
    2952:	89 a3       	std	Y+33, r24	; 0x21
    2954:	89 a1       	ldd	r24, Y+33	; 0x21
    2956:	9a a1       	ldd	r25, Y+34	; 0x22
    2958:	9e 8f       	std	Y+30, r25	; 0x1e
    295a:	8d 8f       	std	Y+29, r24	; 0x1d
    295c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    295e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <LCD_displayCharacter+0x1ea>
    2964:	9e 8f       	std	Y+30, r25	; 0x1e
    2966:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE==8)

	GPIO_writePort(LCD_DATA_PORT_ID, data);
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	69 ad       	ldd	r22, Y+57	; 0x39
    296c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <GPIO_writePort>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a0 e8       	ldi	r26, 0x80	; 128
    2976:	bf e3       	ldi	r27, 0x3F	; 63
    2978:	89 8f       	std	Y+25, r24	; 0x19
    297a:	9a 8f       	std	Y+26, r25	; 0x1a
    297c:	ab 8f       	std	Y+27, r26	; 0x1b
    297e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2980:	69 8d       	ldd	r22, Y+25	; 0x19
    2982:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2984:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2986:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4a ef       	ldi	r20, 0xFA	; 250
    298e:	54 e4       	ldi	r21, 0x44	; 68
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8d 8b       	std	Y+21, r24	; 0x15
    299a:	9e 8b       	std	Y+22, r25	; 0x16
    299c:	af 8b       	std	Y+23, r26	; 0x17
    299e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29a0:	6d 89       	ldd	r22, Y+21	; 0x15
    29a2:	7e 89       	ldd	r23, Y+22	; 0x16
    29a4:	8f 89       	ldd	r24, Y+23	; 0x17
    29a6:	98 8d       	ldd	r25, Y+24	; 0x18
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	2c f4       	brge	.+10     	; 0x29c2 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	9c 8b       	std	Y+20, r25	; 0x14
    29be:	8b 8b       	std	Y+19, r24	; 0x13
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    29c2:	6d 89       	ldd	r22, Y+21	; 0x15
    29c4:	7e 89       	ldd	r23, Y+22	; 0x16
    29c6:	8f 89       	ldd	r24, Y+23	; 0x17
    29c8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	4c f5       	brge	.+82     	; 0x2a2c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29da:	69 8d       	ldd	r22, Y+25	; 0x19
    29dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	51 e4       	ldi	r21, 0x41	; 65
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9c 8b       	std	Y+20, r25	; 0x14
    2a00:	8b 8b       	std	Y+19, r24	; 0x13
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <LCD_displayCharacter+0x2ac>
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9a 8b       	std	Y+18, r25	; 0x12
    2a0a:	89 8b       	std	Y+17, r24	; 0x11
    2a0c:	89 89       	ldd	r24, Y+17	; 0x11
    2a0e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_displayCharacter+0x29a>
    2a14:	9a 8b       	std	Y+18, r25	; 0x12
    2a16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a18:	8b 89       	ldd	r24, Y+19	; 0x13
    2a1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	9c 8b       	std	Y+20, r25	; 0x14
    2a20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a22:	8b 89       	ldd	r24, Y+19	; 0x13
    2a24:	9c 89       	ldd	r25, Y+20	; 0x14
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	69 f7       	brne	.-38     	; 0x2a04 <LCD_displayCharacter+0x28e>
    2a2a:	14 c0       	rjmp	.+40     	; 0x2a54 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a30:	8f 89       	ldd	r24, Y+23	; 0x17
    2a32:	98 8d       	ldd	r25, Y+24	; 0x18
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9c 8b       	std	Y+20, r25	; 0x14
    2a3e:	8b 8b       	std	Y+19, r24	; 0x13
    2a40:	8b 89       	ldd	r24, Y+19	; 0x13
    2a42:	9c 89       	ldd	r25, Y+20	; 0x14
    2a44:	98 8b       	std	Y+16, r25	; 0x10
    2a46:	8f 87       	std	Y+15, r24	; 0x0f
    2a48:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a4a:	98 89       	ldd	r25, Y+16	; 0x10
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <LCD_displayCharacter+0x2d6>
    2a50:	98 8b       	std	Y+16, r25	; 0x10
    2a52:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2a54:	83 e0       	ldi	r24, 0x03	; 3
    2a56:	67 e0       	ldi	r22, 0x07	; 7
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <GPIO_writePin>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a0 e8       	ldi	r26, 0x80	; 128
    2a64:	bf e3       	ldi	r27, 0x3F	; 63
    2a66:	8b 87       	std	Y+11, r24	; 0x0b
    2a68:	9c 87       	std	Y+12, r25	; 0x0c
    2a6a:	ad 87       	std	Y+13, r26	; 0x0d
    2a6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	4a ef       	ldi	r20, 0xFA	; 250
    2a7c:	54 e4       	ldi	r21, 0x44	; 68
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	8f 83       	std	Y+7, r24	; 0x07
    2a88:	98 87       	std	Y+8, r25	; 0x08
    2a8a:	a9 87       	std	Y+9, r26	; 0x09
    2a8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a90:	78 85       	ldd	r23, Y+8	; 0x08
    2a92:	89 85       	ldd	r24, Y+9	; 0x09
    2a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e8       	ldi	r20, 0x80	; 128
    2a9c:	5f e3       	ldi	r21, 0x3F	; 63
    2a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aa2:	88 23       	and	r24, r24
    2aa4:	2c f4       	brge	.+10     	; 0x2ab0 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	9e 83       	std	Y+6, r25	; 0x06
    2aac:	8d 83       	std	Y+5, r24	; 0x05
    2aae:	3f c0       	rjmp	.+126    	; 0x2b2e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab2:	78 85       	ldd	r23, Y+8	; 0x08
    2ab4:	89 85       	ldd	r24, Y+9	; 0x09
    2ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	3f ef       	ldi	r19, 0xFF	; 255
    2abc:	4f e7       	ldi	r20, 0x7F	; 127
    2abe:	57 e4       	ldi	r21, 0x47	; 71
    2ac0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac4:	18 16       	cp	r1, r24
    2ac6:	4c f5       	brge	.+82     	; 0x2b1a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e2       	ldi	r20, 0x20	; 32
    2ad6:	51 e4       	ldi	r21, 0x41	; 65
    2ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	0f c0       	rjmp	.+30     	; 0x2b10 <LCD_displayCharacter+0x39a>
    2af2:	88 ec       	ldi	r24, 0xC8	; 200
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	9c 83       	std	Y+4, r25	; 0x04
    2af8:	8b 83       	std	Y+3, r24	; 0x03
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	9c 81       	ldd	r25, Y+4	; 0x04
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <LCD_displayCharacter+0x388>
    2b02:	9c 83       	std	Y+4, r25	; 0x04
    2b04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b06:	8d 81       	ldd	r24, Y+5	; 0x05
    2b08:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	9e 83       	std	Y+6, r25	; 0x06
    2b0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b10:	8d 81       	ldd	r24, Y+5	; 0x05
    2b12:	9e 81       	ldd	r25, Y+6	; 0x06
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	69 f7       	brne	.-38     	; 0x2af2 <LCD_displayCharacter+0x37c>
    2b18:	14 c0       	rjmp	.+40     	; 0x2b42 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1c:	78 85       	ldd	r23, Y+8	; 0x08
    2b1e:	89 85       	ldd	r24, Y+9	; 0x09
    2b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	9e 83       	std	Y+6, r25	; 0x06
    2b2c:	8d 83       	std	Y+5, r24	; 0x05
    2b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b30:	9e 81       	ldd	r25, Y+6	; 0x06
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <LCD_displayCharacter+0x3c4>
    2b3e:	9a 83       	std	Y+2, r25	; 0x02
    2b40:	89 83       	std	Y+1, r24	; 0x01

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);

#endif
}
    2b42:	e9 96       	adiw	r28, 0x39	; 57
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	f8 94       	cli
    2b48:	de bf       	out	0x3e, r29	; 62
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	cd bf       	out	0x3d, r28	; 61
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <LCD_displayString+0x6>
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	9a 83       	std	Y+2, r25	; 0x02
    2b60:	89 83       	std	Y+1, r24	; 0x01
    2b62:	0a c0       	rjmp	.+20     	; 0x2b78 <LCD_displayString+0x24>
	while (*str != '\0')
	{
		LCD_displayCharacter(*str);
    2b64:	e9 81       	ldd	r30, Y+1	; 0x01
    2b66:	fa 81       	ldd	r31, Y+2	; 0x02
    2b68:	80 81       	ld	r24, Z
    2b6a:	0e 94 bb 13 	call	0x2776	; 0x2776 <LCD_displayCharacter>
		str++;
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	01 96       	adiw	r24, 0x01	; 1
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
#endif
}

void LCD_displayString(const char *str)
{
	while (*str != '\0')
    2b78:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7c:	80 81       	ld	r24, Z
    2b7e:	88 23       	and	r24, r24
    2b80:	89 f7       	brne	.-30     	; 0x2b64 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*str);
		str++;
	}
}
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <LCD_moveCursor>:

void LCD_moveCursor(uint8 row, uint8 col)
{
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	00 d0       	rcall	.+0      	; 0x2b92 <LCD_moveCursor+0x6>
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <LCD_moveCursor+0x8>
    2b94:	0f 92       	push	r0
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	8a 83       	std	Y+2, r24	; 0x02
    2b9c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch (row)
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	3d 83       	std	Y+5, r19	; 0x05
    2ba6:	2c 83       	std	Y+4, r18	; 0x04
    2ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    2baa:	9d 81       	ldd	r25, Y+5	; 0x05
    2bac:	81 30       	cpi	r24, 0x01	; 1
    2bae:	91 05       	cpc	r25, r1
    2bb0:	c1 f0       	breq	.+48     	; 0x2be2 <LCD_moveCursor+0x56>
    2bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb6:	22 30       	cpi	r18, 0x02	; 2
    2bb8:	31 05       	cpc	r19, r1
    2bba:	2c f4       	brge	.+10     	; 0x2bc6 <LCD_moveCursor+0x3a>
    2bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	61 f0       	breq	.+24     	; 0x2bdc <LCD_moveCursor+0x50>
    2bc4:	19 c0       	rjmp	.+50     	; 0x2bf8 <LCD_moveCursor+0x6c>
    2bc6:	2c 81       	ldd	r18, Y+4	; 0x04
    2bc8:	3d 81       	ldd	r19, Y+5	; 0x05
    2bca:	22 30       	cpi	r18, 0x02	; 2
    2bcc:	31 05       	cpc	r19, r1
    2bce:	69 f0       	breq	.+26     	; 0x2bea <LCD_moveCursor+0x5e>
    2bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd4:	83 30       	cpi	r24, 0x03	; 3
    2bd6:	91 05       	cpc	r25, r1
    2bd8:	61 f0       	breq	.+24     	; 0x2bf2 <LCD_moveCursor+0x66>
    2bda:	0e c0       	rjmp	.+28     	; 0x2bf8 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	89 83       	std	Y+1, r24	; 0x01
    2be0:	0b c0       	rjmp	.+22     	; 0x2bf8 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	80 5c       	subi	r24, 0xC0	; 192
    2be6:	89 83       	std	Y+1, r24	; 0x01
    2be8:	07 c0       	rjmp	.+14     	; 0x2bf8 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    2bea:	8b 81       	ldd	r24, Y+3	; 0x03
    2bec:	80 5f       	subi	r24, 0xF0	; 240
    2bee:	89 83       	std	Y+1, r24	; 0x01
    2bf0:	03 c0       	rjmp	.+6      	; 0x2bf8 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	80 5b       	subi	r24, 0xB0	; 176
    2bf6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	80 68       	ori	r24, 0x80	; 128
    2bfc:	0e 94 cc 11 	call	0x2398	; 0x2398 <LCD_sendCommand>
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	08 95       	ret

00002c10 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *str)
{
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <LCD_displayStringRowColumn+0x6>
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <LCD_displayStringRowColumn+0x8>
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	6a 83       	std	Y+2, r22	; 0x02
    2c20:	5c 83       	std	Y+4, r21	; 0x04
    2c22:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	6a 81       	ldd	r22, Y+2	; 0x02
    2c28:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <LCD_moveCursor>
	LCD_displayString(str);
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c30:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <LCD_displayString>
}
    2c34:	0f 90       	pop	r0
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	08 95       	ret

00002c42 <LCD_intgerToString>:

void LCD_intgerToString(uint32 data)
{
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	64 97       	sbiw	r28, 0x14	; 20
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	69 8b       	std	Y+17, r22	; 0x11
    2c58:	7a 8b       	std	Y+18, r23	; 0x12
    2c5a:	8b 8b       	std	Y+19, r24	; 0x13
    2c5c:	9c 8b       	std	Y+20, r25	; 0x14
    char buff[16];
    sprintf(buff, "%lu", data);
    2c5e:	8d b7       	in	r24, 0x3d	; 61
    2c60:	9e b7       	in	r25, 0x3e	; 62
    2c62:	08 97       	sbiw	r24, 0x08	; 8
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	9e bf       	out	0x3e, r25	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	8d bf       	out	0x3d, r24	; 61
    2c6e:	ed b7       	in	r30, 0x3d	; 61
    2c70:	fe b7       	in	r31, 0x3e	; 62
    2c72:	31 96       	adiw	r30, 0x01	; 1
    2c74:	ce 01       	movw	r24, r28
    2c76:	01 96       	adiw	r24, 0x01	; 1
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
    2c7c:	80 e5       	ldi	r24, 0x50	; 80
    2c7e:	91 e0       	ldi	r25, 0x01	; 1
    2c80:	93 83       	std	Z+3, r25	; 0x03
    2c82:	82 83       	std	Z+2, r24	; 0x02
    2c84:	89 89       	ldd	r24, Y+17	; 0x11
    2c86:	9a 89       	ldd	r25, Y+18	; 0x12
    2c88:	ab 89       	ldd	r26, Y+19	; 0x13
    2c8a:	bc 89       	ldd	r27, Y+20	; 0x14
    2c8c:	84 83       	std	Z+4, r24	; 0x04
    2c8e:	95 83       	std	Z+5, r25	; 0x05
    2c90:	a6 83       	std	Z+6, r26	; 0x06
    2c92:	b7 83       	std	Z+7, r27	; 0x07
    2c94:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <sprintf>
    2c98:	8d b7       	in	r24, 0x3d	; 61
    2c9a:	9e b7       	in	r25, 0x3e	; 62
    2c9c:	08 96       	adiw	r24, 0x08	; 8
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	9e bf       	out	0x3e, r25	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	8d bf       	out	0x3d, r24	; 61
    LCD_displayString(buff);
    2ca8:	ce 01       	movw	r24, r28
    2caa:	01 96       	adiw	r24, 0x01	; 1
    2cac:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <LCD_displayString>
}
    2cb0:	64 96       	adiw	r28, 0x14	; 20
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	08 95       	ret

00002cc2 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	0e 94 cc 11 	call	0x2398	; 0x2398 <LCD_sendCommand>

}
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	08 95       	ret

00002cd6 <UART_init>:
#include "my_uart.h"
#include "my_gpio.h"
#include "my_common_macros.h"

void UART_init(const UART_ConfigType *Config_Ptr)
{
    2cd6:	df 93       	push	r29
    2cd8:	cf 93       	push	r28
    2cda:	00 d0       	rcall	.+0      	; 0x2cdc <UART_init+0x6>
    2cdc:	00 d0       	rcall	.+0      	; 0x2cde <UART_init+0x8>
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
    2ce2:	9c 83       	std	Y+4, r25	; 0x04
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2ce6:	1a 82       	std	Y+2, r1	; 0x02
    2ce8:	19 82       	std	Y+1, r1	; 0x01

	UCSRA.Bits.U2X = 1;
    2cea:	eb e2       	ldi	r30, 0x2B	; 43
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	82 60       	ori	r24, 0x02	; 2
    2cf2:	80 83       	st	Z, r24

	UCSRB.Bits.RXEN = 1;
    2cf4:	ea e2       	ldi	r30, 0x2A	; 42
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	80 61       	ori	r24, 0x10	; 16
    2cfc:	80 83       	st	Z, r24
	UCSRB.Bits.TXEN = 1;
    2cfe:	ea e2       	ldi	r30, 0x2A	; 42
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	88 60       	ori	r24, 0x08	; 8
    2d06:	80 83       	st	Z, r24
	UCSRB.Bits.UCSZ2 = ((Config_Ptr->bit_data) & 0x04); /*inserting bit2 of bit_data in UCSZ2 bit*/
    2d08:	ea e2       	ldi	r30, 0x2A	; 42
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	8b 7f       	andi	r24, 0xFB	; 251
    2d10:	80 83       	st	Z, r24

	UCSRC.Bits.URSEL = 1;
    2d12:	e0 e4       	ldi	r30, 0x40	; 64
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	80 68       	ori	r24, 0x80	; 128
    2d1a:	80 83       	st	Z, r24
	UCSRC.Bits.USBS = Config_Ptr->stop_bit; /*inserting the stop bit in USBS bit*/
    2d1c:	a0 e4       	ldi	r26, 0x40	; 64
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	eb 81       	ldd	r30, Y+3	; 0x03
    2d22:	fc 81       	ldd	r31, Y+4	; 0x04
    2d24:	82 81       	ldd	r24, Z+2	; 0x02
    2d26:	81 70       	andi	r24, 0x01	; 1
    2d28:	81 70       	andi	r24, 0x01	; 1
    2d2a:	98 2f       	mov	r25, r24
    2d2c:	99 0f       	add	r25, r25
    2d2e:	99 0f       	add	r25, r25
    2d30:	99 0f       	add	r25, r25
    2d32:	8c 91       	ld	r24, X
    2d34:	87 7f       	andi	r24, 0xF7	; 247
    2d36:	89 2b       	or	r24, r25
    2d38:	8c 93       	st	X, r24
	UCSRC.Byte = (UCSRC.Byte & 0xCF) | (((Config_Ptr->parity) & 0x03) << 4); /*inserting parity in UPM1 & UPM0 bits*/
    2d3a:	a0 e4       	ldi	r26, 0x40	; 64
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	e0 e4       	ldi	r30, 0x40	; 64
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	28 2f       	mov	r18, r24
    2d46:	2f 7c       	andi	r18, 0xCF	; 207
    2d48:	eb 81       	ldd	r30, Y+3	; 0x03
    2d4a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d4c:	81 81       	ldd	r24, Z+1	; 0x01
    2d4e:	88 2f       	mov	r24, r24
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	83 70       	andi	r24, 0x03	; 3
    2d54:	90 70       	andi	r25, 0x00	; 0
    2d56:	82 95       	swap	r24
    2d58:	92 95       	swap	r25
    2d5a:	90 7f       	andi	r25, 0xF0	; 240
    2d5c:	98 27       	eor	r25, r24
    2d5e:	80 7f       	andi	r24, 0xF0	; 240
    2d60:	98 27       	eor	r25, r24
    2d62:	82 2b       	or	r24, r18
    2d64:	8c 93       	st	X, r24
	UCSRC.Byte = (UCSRC.Byte & 0xF9) | (((Config_Ptr->bit_data) & 0x03) << 1); /*inserting bit1 & bit0 of bit_data in UCSZ1 & UCSZ0 bits*/
    2d66:	a0 e4       	ldi	r26, 0x40	; 64
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	e0 e4       	ldi	r30, 0x40	; 64
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	28 2f       	mov	r18, r24
    2d72:	29 7f       	andi	r18, 0xF9	; 249
    2d74:	eb 81       	ldd	r30, Y+3	; 0x03
    2d76:	fc 81       	ldd	r31, Y+4	; 0x04
    2d78:	80 81       	ld	r24, Z
    2d7a:	88 2f       	mov	r24, r24
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	83 70       	andi	r24, 0x03	; 3
    2d80:	90 70       	andi	r25, 0x00	; 0
    2d82:	88 0f       	add	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	82 2b       	or	r24, r18
    2d88:	8c 93       	st	X, r24

	ubrr_value = (uint16) (((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2d8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d8e:	83 81       	ldd	r24, Z+3	; 0x03
    2d90:	94 81       	ldd	r25, Z+4	; 0x04
    2d92:	cc 01       	movw	r24, r24
    2d94:	a0 e0       	ldi	r26, 0x00	; 0
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	88 0f       	add	r24, r24
    2d9a:	99 1f       	adc	r25, r25
    2d9c:	aa 1f       	adc	r26, r26
    2d9e:	bb 1f       	adc	r27, r27
    2da0:	88 0f       	add	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	aa 1f       	adc	r26, r26
    2da6:	bb 1f       	adc	r27, r27
    2da8:	88 0f       	add	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	aa 1f       	adc	r26, r26
    2dae:	bb 1f       	adc	r27, r27
    2db0:	9c 01       	movw	r18, r24
    2db2:	ad 01       	movw	r20, r26
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	92 e1       	ldi	r25, 0x12	; 18
    2db8:	aa e7       	ldi	r26, 0x7A	; 122
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	bc 01       	movw	r22, r24
    2dbe:	cd 01       	movw	r24, r26
    2dc0:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__udivmodsi4>
    2dc4:	da 01       	movw	r26, r20
    2dc6:	c9 01       	movw	r24, r18
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	89 83       	std	Y+1, r24	; 0x01

	UBRRH.Byte = ubrr_value >> 8;
    2dce:	e0 e4       	ldi	r30, 0x40	; 64
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd6:	89 2f       	mov	r24, r25
    2dd8:	99 27       	eor	r25, r25
    2dda:	80 83       	st	Z, r24
	UBRRL.Byte = ubrr_value;
    2ddc:	e9 e2       	ldi	r30, 0x29	; 41
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	80 83       	st	Z, r24
}
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	0f 92       	push	r0
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (UCSRA.Bits.UDRE == 0)
    2dfe:	eb e2       	ldi	r30, 0x2B	; 43
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	80 72       	andi	r24, 0x20	; 32
    2e06:	88 23       	and	r24, r24
    2e08:	d1 f3       	breq	.-12     	; 0x2dfe <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR.Byte = data;
    2e0a:	ec e2       	ldi	r30, 0x2C	; 44
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2e12:	0f 90       	pop	r0
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (UCSRA.Bits.RXC == 0)
    2e22:	eb e2       	ldi	r30, 0x2B	; 43
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	80 78       	andi	r24, 0x80	; 128
    2e2a:	88 23       	and	r24, r24
    2e2c:	d1 f3       	breq	.-12     	; 0x2e22 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR.Byte;
    2e2e:	ec e2       	ldi	r30, 0x2C	; 44
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
}
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <UART_sendString+0x6>
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	9a 83       	std	Y+2, r25	; 0x02
    2e46:	89 83       	std	Y+1, r24	; 0x01
    2e48:	0a c0       	rjmp	.+20     	; 0x2e5e <UART_sendString+0x24>

	while (*Str != '\0')
	{
		UART_sendByte(*Str);
    2e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e4e:	80 81       	ld	r24, Z
    2e50:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <UART_sendByte>
		Str++;
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	9a 81       	ldd	r25, Y+2	; 0x02
    2e58:	01 96       	adiw	r24, 0x01	; 1
    2e5a:	9a 83       	std	Y+2, r25	; 0x02
    2e5c:	89 83       	std	Y+1, r24	; 0x01
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{

	while (*Str != '\0')
    2e5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e60:	fa 81       	ldd	r31, Y+2	; 0x02
    2e62:	80 81       	ld	r24, Z
    2e64:	88 23       	and	r24, r24
    2e66:	89 f7       	brne	.-30     	; 0x2e4a <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}

}
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2e72:	0f 93       	push	r16
    2e74:	1f 93       	push	r17
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	00 d0       	rcall	.+0      	; 0x2e7c <UART_receiveString+0xa>
    2e7c:	0f 92       	push	r0
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	9b 83       	std	Y+3, r25	; 0x03
    2e84:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e86:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	28 2f       	mov	r18, r24
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	9b 81       	ldd	r25, Y+3	; 0x03
    2e92:	8c 01       	movw	r16, r24
    2e94:	02 0f       	add	r16, r18
    2e96:	13 1f       	adc	r17, r19
    2e98:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_recieveByte>
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	80 83       	st	Z, r24
    2ea0:	0f c0       	rjmp	.+30     	; 0x2ec0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
	{
		i++;
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	8f 5f       	subi	r24, 0xFF	; 255
    2ea6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	28 2f       	mov	r18, r24
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb2:	8c 01       	movw	r16, r24
    2eb4:	02 0f       	add	r16, r18
    2eb6:	13 1f       	adc	r17, r19
    2eb8:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_recieveByte>
    2ebc:	f8 01       	movw	r30, r16
    2ebe:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	28 2f       	mov	r18, r24
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eca:	fc 01       	movw	r30, r24
    2ecc:	e2 0f       	add	r30, r18
    2ece:	f3 1f       	adc	r31, r19
    2ed0:	80 81       	ld	r24, Z
    2ed2:	83 32       	cpi	r24, 0x23	; 35
    2ed4:	31 f7       	brne	.-52     	; 0x2ea2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	28 2f       	mov	r18, r24
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ede:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	e2 0f       	add	r30, r18
    2ee4:	f3 1f       	adc	r31, r19
    2ee6:	10 82       	st	Z, r1
}
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	cf 91       	pop	r28
    2ef0:	df 91       	pop	r29
    2ef2:	1f 91       	pop	r17
    2ef4:	0f 91       	pop	r16
    2ef6:	08 95       	ret

00002ef8 <__mulsi3>:
    2ef8:	62 9f       	mul	r22, r18
    2efa:	d0 01       	movw	r26, r0
    2efc:	73 9f       	mul	r23, r19
    2efe:	f0 01       	movw	r30, r0
    2f00:	82 9f       	mul	r24, r18
    2f02:	e0 0d       	add	r30, r0
    2f04:	f1 1d       	adc	r31, r1
    2f06:	64 9f       	mul	r22, r20
    2f08:	e0 0d       	add	r30, r0
    2f0a:	f1 1d       	adc	r31, r1
    2f0c:	92 9f       	mul	r25, r18
    2f0e:	f0 0d       	add	r31, r0
    2f10:	83 9f       	mul	r24, r19
    2f12:	f0 0d       	add	r31, r0
    2f14:	74 9f       	mul	r23, r20
    2f16:	f0 0d       	add	r31, r0
    2f18:	65 9f       	mul	r22, r21
    2f1a:	f0 0d       	add	r31, r0
    2f1c:	99 27       	eor	r25, r25
    2f1e:	72 9f       	mul	r23, r18
    2f20:	b0 0d       	add	r27, r0
    2f22:	e1 1d       	adc	r30, r1
    2f24:	f9 1f       	adc	r31, r25
    2f26:	63 9f       	mul	r22, r19
    2f28:	b0 0d       	add	r27, r0
    2f2a:	e1 1d       	adc	r30, r1
    2f2c:	f9 1f       	adc	r31, r25
    2f2e:	bd 01       	movw	r22, r26
    2f30:	cf 01       	movw	r24, r30
    2f32:	11 24       	eor	r1, r1
    2f34:	08 95       	ret

00002f36 <__udivmodsi4>:
    2f36:	a1 e2       	ldi	r26, 0x21	; 33
    2f38:	1a 2e       	mov	r1, r26
    2f3a:	aa 1b       	sub	r26, r26
    2f3c:	bb 1b       	sub	r27, r27
    2f3e:	fd 01       	movw	r30, r26
    2f40:	0d c0       	rjmp	.+26     	; 0x2f5c <__udivmodsi4_ep>

00002f42 <__udivmodsi4_loop>:
    2f42:	aa 1f       	adc	r26, r26
    2f44:	bb 1f       	adc	r27, r27
    2f46:	ee 1f       	adc	r30, r30
    2f48:	ff 1f       	adc	r31, r31
    2f4a:	a2 17       	cp	r26, r18
    2f4c:	b3 07       	cpc	r27, r19
    2f4e:	e4 07       	cpc	r30, r20
    2f50:	f5 07       	cpc	r31, r21
    2f52:	20 f0       	brcs	.+8      	; 0x2f5c <__udivmodsi4_ep>
    2f54:	a2 1b       	sub	r26, r18
    2f56:	b3 0b       	sbc	r27, r19
    2f58:	e4 0b       	sbc	r30, r20
    2f5a:	f5 0b       	sbc	r31, r21

00002f5c <__udivmodsi4_ep>:
    2f5c:	66 1f       	adc	r22, r22
    2f5e:	77 1f       	adc	r23, r23
    2f60:	88 1f       	adc	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	1a 94       	dec	r1
    2f66:	69 f7       	brne	.-38     	; 0x2f42 <__udivmodsi4_loop>
    2f68:	60 95       	com	r22
    2f6a:	70 95       	com	r23
    2f6c:	80 95       	com	r24
    2f6e:	90 95       	com	r25
    2f70:	9b 01       	movw	r18, r22
    2f72:	ac 01       	movw	r20, r24
    2f74:	bd 01       	movw	r22, r26
    2f76:	cf 01       	movw	r24, r30
    2f78:	08 95       	ret

00002f7a <__prologue_saves__>:
    2f7a:	2f 92       	push	r2
    2f7c:	3f 92       	push	r3
    2f7e:	4f 92       	push	r4
    2f80:	5f 92       	push	r5
    2f82:	6f 92       	push	r6
    2f84:	7f 92       	push	r7
    2f86:	8f 92       	push	r8
    2f88:	9f 92       	push	r9
    2f8a:	af 92       	push	r10
    2f8c:	bf 92       	push	r11
    2f8e:	cf 92       	push	r12
    2f90:	df 92       	push	r13
    2f92:	ef 92       	push	r14
    2f94:	ff 92       	push	r15
    2f96:	0f 93       	push	r16
    2f98:	1f 93       	push	r17
    2f9a:	cf 93       	push	r28
    2f9c:	df 93       	push	r29
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
    2fa2:	ca 1b       	sub	r28, r26
    2fa4:	db 0b       	sbc	r29, r27
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	09 94       	ijmp

00002fb2 <__epilogue_restores__>:
    2fb2:	2a 88       	ldd	r2, Y+18	; 0x12
    2fb4:	39 88       	ldd	r3, Y+17	; 0x11
    2fb6:	48 88       	ldd	r4, Y+16	; 0x10
    2fb8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fba:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fbc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fbe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fc0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fc2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fc4:	b9 84       	ldd	r11, Y+9	; 0x09
    2fc6:	c8 84       	ldd	r12, Y+8	; 0x08
    2fc8:	df 80       	ldd	r13, Y+7	; 0x07
    2fca:	ee 80       	ldd	r14, Y+6	; 0x06
    2fcc:	fd 80       	ldd	r15, Y+5	; 0x05
    2fce:	0c 81       	ldd	r16, Y+4	; 0x04
    2fd0:	1b 81       	ldd	r17, Y+3	; 0x03
    2fd2:	aa 81       	ldd	r26, Y+2	; 0x02
    2fd4:	b9 81       	ldd	r27, Y+1	; 0x01
    2fd6:	ce 0f       	add	r28, r30
    2fd8:	d1 1d       	adc	r29, r1
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	f8 94       	cli
    2fde:	de bf       	out	0x3e, r29	; 62
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	cd bf       	out	0x3d, r28	; 61
    2fe4:	ed 01       	movw	r28, r26
    2fe6:	08 95       	ret

00002fe8 <strcmp>:
    2fe8:	fb 01       	movw	r30, r22
    2fea:	dc 01       	movw	r26, r24
    2fec:	8d 91       	ld	r24, X+
    2fee:	01 90       	ld	r0, Z+
    2ff0:	80 19       	sub	r24, r0
    2ff2:	01 10       	cpse	r0, r1
    2ff4:	d9 f3       	breq	.-10     	; 0x2fec <strcmp+0x4>
    2ff6:	99 0b       	sbc	r25, r25
    2ff8:	08 95       	ret

00002ffa <sprintf>:
    2ffa:	ae e0       	ldi	r26, 0x0E	; 14
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	e3 e0       	ldi	r30, 0x03	; 3
    3000:	f8 e1       	ldi	r31, 0x18	; 24
    3002:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__prologue_saves__+0x1c>
    3006:	0d 89       	ldd	r16, Y+21	; 0x15
    3008:	1e 89       	ldd	r17, Y+22	; 0x16
    300a:	86 e0       	ldi	r24, 0x06	; 6
    300c:	8c 83       	std	Y+4, r24	; 0x04
    300e:	1a 83       	std	Y+2, r17	; 0x02
    3010:	09 83       	std	Y+1, r16	; 0x01
    3012:	8f ef       	ldi	r24, 0xFF	; 255
    3014:	9f e7       	ldi	r25, 0x7F	; 127
    3016:	9e 83       	std	Y+6, r25	; 0x06
    3018:	8d 83       	std	Y+5, r24	; 0x05
    301a:	9e 01       	movw	r18, r28
    301c:	27 5e       	subi	r18, 0xE7	; 231
    301e:	3f 4f       	sbci	r19, 0xFF	; 255
    3020:	ce 01       	movw	r24, r28
    3022:	01 96       	adiw	r24, 0x01	; 1
    3024:	6f 89       	ldd	r22, Y+23	; 0x17
    3026:	78 8d       	ldd	r23, Y+24	; 0x18
    3028:	a9 01       	movw	r20, r18
    302a:	0e 94 21 18 	call	0x3042	; 0x3042 <vfprintf>
    302e:	2f 81       	ldd	r18, Y+7	; 0x07
    3030:	38 85       	ldd	r19, Y+8	; 0x08
    3032:	02 0f       	add	r16, r18
    3034:	13 1f       	adc	r17, r19
    3036:	f8 01       	movw	r30, r16
    3038:	10 82       	st	Z, r1
    303a:	2e 96       	adiw	r28, 0x0e	; 14
    303c:	e4 e0       	ldi	r30, 0x04	; 4
    303e:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__epilogue_restores__+0x1c>

00003042 <vfprintf>:
    3042:	ab e0       	ldi	r26, 0x0B	; 11
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	e7 e2       	ldi	r30, 0x27	; 39
    3048:	f8 e1       	ldi	r31, 0x18	; 24
    304a:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__prologue_saves__>
    304e:	3c 01       	movw	r6, r24
    3050:	2b 01       	movw	r4, r22
    3052:	5a 01       	movw	r10, r20
    3054:	fc 01       	movw	r30, r24
    3056:	17 82       	std	Z+7, r1	; 0x07
    3058:	16 82       	std	Z+6, r1	; 0x06
    305a:	83 81       	ldd	r24, Z+3	; 0x03
    305c:	81 fd       	sbrc	r24, 1
    305e:	03 c0       	rjmp	.+6      	; 0x3066 <vfprintf+0x24>
    3060:	6f ef       	ldi	r22, 0xFF	; 255
    3062:	7f ef       	ldi	r23, 0xFF	; 255
    3064:	c6 c1       	rjmp	.+908    	; 0x33f2 <vfprintf+0x3b0>
    3066:	9a e0       	ldi	r25, 0x0A	; 10
    3068:	89 2e       	mov	r8, r25
    306a:	1e 01       	movw	r2, r28
    306c:	08 94       	sec
    306e:	21 1c       	adc	r2, r1
    3070:	31 1c       	adc	r3, r1
    3072:	f3 01       	movw	r30, r6
    3074:	23 81       	ldd	r18, Z+3	; 0x03
    3076:	f2 01       	movw	r30, r4
    3078:	23 fd       	sbrc	r18, 3
    307a:	85 91       	lpm	r24, Z+
    307c:	23 ff       	sbrs	r18, 3
    307e:	81 91       	ld	r24, Z+
    3080:	2f 01       	movw	r4, r30
    3082:	88 23       	and	r24, r24
    3084:	09 f4       	brne	.+2      	; 0x3088 <vfprintf+0x46>
    3086:	b2 c1       	rjmp	.+868    	; 0x33ec <vfprintf+0x3aa>
    3088:	85 32       	cpi	r24, 0x25	; 37
    308a:	39 f4       	brne	.+14     	; 0x309a <vfprintf+0x58>
    308c:	23 fd       	sbrc	r18, 3
    308e:	85 91       	lpm	r24, Z+
    3090:	23 ff       	sbrs	r18, 3
    3092:	81 91       	ld	r24, Z+
    3094:	2f 01       	movw	r4, r30
    3096:	85 32       	cpi	r24, 0x25	; 37
    3098:	29 f4       	brne	.+10     	; 0x30a4 <vfprintf+0x62>
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	b3 01       	movw	r22, r6
    309e:	0e 94 14 1a 	call	0x3428	; 0x3428 <fputc>
    30a2:	e7 cf       	rjmp	.-50     	; 0x3072 <vfprintf+0x30>
    30a4:	98 2f       	mov	r25, r24
    30a6:	ff 24       	eor	r15, r15
    30a8:	ee 24       	eor	r14, r14
    30aa:	99 24       	eor	r9, r9
    30ac:	ff e1       	ldi	r31, 0x1F	; 31
    30ae:	ff 15       	cp	r31, r15
    30b0:	d0 f0       	brcs	.+52     	; 0x30e6 <vfprintf+0xa4>
    30b2:	9b 32       	cpi	r25, 0x2B	; 43
    30b4:	69 f0       	breq	.+26     	; 0x30d0 <vfprintf+0x8e>
    30b6:	9c 32       	cpi	r25, 0x2C	; 44
    30b8:	28 f4       	brcc	.+10     	; 0x30c4 <vfprintf+0x82>
    30ba:	90 32       	cpi	r25, 0x20	; 32
    30bc:	59 f0       	breq	.+22     	; 0x30d4 <vfprintf+0x92>
    30be:	93 32       	cpi	r25, 0x23	; 35
    30c0:	91 f4       	brne	.+36     	; 0x30e6 <vfprintf+0xa4>
    30c2:	0e c0       	rjmp	.+28     	; 0x30e0 <vfprintf+0x9e>
    30c4:	9d 32       	cpi	r25, 0x2D	; 45
    30c6:	49 f0       	breq	.+18     	; 0x30da <vfprintf+0x98>
    30c8:	90 33       	cpi	r25, 0x30	; 48
    30ca:	69 f4       	brne	.+26     	; 0x30e6 <vfprintf+0xa4>
    30cc:	41 e0       	ldi	r20, 0x01	; 1
    30ce:	24 c0       	rjmp	.+72     	; 0x3118 <vfprintf+0xd6>
    30d0:	52 e0       	ldi	r21, 0x02	; 2
    30d2:	f5 2a       	or	r15, r21
    30d4:	84 e0       	ldi	r24, 0x04	; 4
    30d6:	f8 2a       	or	r15, r24
    30d8:	28 c0       	rjmp	.+80     	; 0x312a <vfprintf+0xe8>
    30da:	98 e0       	ldi	r25, 0x08	; 8
    30dc:	f9 2a       	or	r15, r25
    30de:	25 c0       	rjmp	.+74     	; 0x312a <vfprintf+0xe8>
    30e0:	e0 e1       	ldi	r30, 0x10	; 16
    30e2:	fe 2a       	or	r15, r30
    30e4:	22 c0       	rjmp	.+68     	; 0x312a <vfprintf+0xe8>
    30e6:	f7 fc       	sbrc	r15, 7
    30e8:	29 c0       	rjmp	.+82     	; 0x313c <vfprintf+0xfa>
    30ea:	89 2f       	mov	r24, r25
    30ec:	80 53       	subi	r24, 0x30	; 48
    30ee:	8a 30       	cpi	r24, 0x0A	; 10
    30f0:	70 f4       	brcc	.+28     	; 0x310e <vfprintf+0xcc>
    30f2:	f6 fe       	sbrs	r15, 6
    30f4:	05 c0       	rjmp	.+10     	; 0x3100 <vfprintf+0xbe>
    30f6:	98 9c       	mul	r9, r8
    30f8:	90 2c       	mov	r9, r0
    30fa:	11 24       	eor	r1, r1
    30fc:	98 0e       	add	r9, r24
    30fe:	15 c0       	rjmp	.+42     	; 0x312a <vfprintf+0xe8>
    3100:	e8 9c       	mul	r14, r8
    3102:	e0 2c       	mov	r14, r0
    3104:	11 24       	eor	r1, r1
    3106:	e8 0e       	add	r14, r24
    3108:	f0 e2       	ldi	r31, 0x20	; 32
    310a:	ff 2a       	or	r15, r31
    310c:	0e c0       	rjmp	.+28     	; 0x312a <vfprintf+0xe8>
    310e:	9e 32       	cpi	r25, 0x2E	; 46
    3110:	29 f4       	brne	.+10     	; 0x311c <vfprintf+0xda>
    3112:	f6 fc       	sbrc	r15, 6
    3114:	6b c1       	rjmp	.+726    	; 0x33ec <vfprintf+0x3aa>
    3116:	40 e4       	ldi	r20, 0x40	; 64
    3118:	f4 2a       	or	r15, r20
    311a:	07 c0       	rjmp	.+14     	; 0x312a <vfprintf+0xe8>
    311c:	9c 36       	cpi	r25, 0x6C	; 108
    311e:	19 f4       	brne	.+6      	; 0x3126 <vfprintf+0xe4>
    3120:	50 e8       	ldi	r21, 0x80	; 128
    3122:	f5 2a       	or	r15, r21
    3124:	02 c0       	rjmp	.+4      	; 0x312a <vfprintf+0xe8>
    3126:	98 36       	cpi	r25, 0x68	; 104
    3128:	49 f4       	brne	.+18     	; 0x313c <vfprintf+0xfa>
    312a:	f2 01       	movw	r30, r4
    312c:	23 fd       	sbrc	r18, 3
    312e:	95 91       	lpm	r25, Z+
    3130:	23 ff       	sbrs	r18, 3
    3132:	91 91       	ld	r25, Z+
    3134:	2f 01       	movw	r4, r30
    3136:	99 23       	and	r25, r25
    3138:	09 f0       	breq	.+2      	; 0x313c <vfprintf+0xfa>
    313a:	b8 cf       	rjmp	.-144    	; 0x30ac <vfprintf+0x6a>
    313c:	89 2f       	mov	r24, r25
    313e:	85 54       	subi	r24, 0x45	; 69
    3140:	83 30       	cpi	r24, 0x03	; 3
    3142:	18 f0       	brcs	.+6      	; 0x314a <vfprintf+0x108>
    3144:	80 52       	subi	r24, 0x20	; 32
    3146:	83 30       	cpi	r24, 0x03	; 3
    3148:	38 f4       	brcc	.+14     	; 0x3158 <vfprintf+0x116>
    314a:	44 e0       	ldi	r20, 0x04	; 4
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	a4 0e       	add	r10, r20
    3150:	b5 1e       	adc	r11, r21
    3152:	5f e3       	ldi	r21, 0x3F	; 63
    3154:	59 83       	std	Y+1, r21	; 0x01
    3156:	0f c0       	rjmp	.+30     	; 0x3176 <vfprintf+0x134>
    3158:	93 36       	cpi	r25, 0x63	; 99
    315a:	31 f0       	breq	.+12     	; 0x3168 <vfprintf+0x126>
    315c:	93 37       	cpi	r25, 0x73	; 115
    315e:	79 f0       	breq	.+30     	; 0x317e <vfprintf+0x13c>
    3160:	93 35       	cpi	r25, 0x53	; 83
    3162:	09 f0       	breq	.+2      	; 0x3166 <vfprintf+0x124>
    3164:	56 c0       	rjmp	.+172    	; 0x3212 <vfprintf+0x1d0>
    3166:	20 c0       	rjmp	.+64     	; 0x31a8 <vfprintf+0x166>
    3168:	f5 01       	movw	r30, r10
    316a:	80 81       	ld	r24, Z
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	42 e0       	ldi	r20, 0x02	; 2
    3170:	50 e0       	ldi	r21, 0x00	; 0
    3172:	a4 0e       	add	r10, r20
    3174:	b5 1e       	adc	r11, r21
    3176:	61 01       	movw	r12, r2
    3178:	01 e0       	ldi	r16, 0x01	; 1
    317a:	10 e0       	ldi	r17, 0x00	; 0
    317c:	12 c0       	rjmp	.+36     	; 0x31a2 <vfprintf+0x160>
    317e:	f5 01       	movw	r30, r10
    3180:	c0 80       	ld	r12, Z
    3182:	d1 80       	ldd	r13, Z+1	; 0x01
    3184:	f6 fc       	sbrc	r15, 6
    3186:	03 c0       	rjmp	.+6      	; 0x318e <vfprintf+0x14c>
    3188:	6f ef       	ldi	r22, 0xFF	; 255
    318a:	7f ef       	ldi	r23, 0xFF	; 255
    318c:	02 c0       	rjmp	.+4      	; 0x3192 <vfprintf+0x150>
    318e:	69 2d       	mov	r22, r9
    3190:	70 e0       	ldi	r23, 0x00	; 0
    3192:	42 e0       	ldi	r20, 0x02	; 2
    3194:	50 e0       	ldi	r21, 0x00	; 0
    3196:	a4 0e       	add	r10, r20
    3198:	b5 1e       	adc	r11, r21
    319a:	c6 01       	movw	r24, r12
    319c:	0e 94 09 1a 	call	0x3412	; 0x3412 <strnlen>
    31a0:	8c 01       	movw	r16, r24
    31a2:	5f e7       	ldi	r21, 0x7F	; 127
    31a4:	f5 22       	and	r15, r21
    31a6:	14 c0       	rjmp	.+40     	; 0x31d0 <vfprintf+0x18e>
    31a8:	f5 01       	movw	r30, r10
    31aa:	c0 80       	ld	r12, Z
    31ac:	d1 80       	ldd	r13, Z+1	; 0x01
    31ae:	f6 fc       	sbrc	r15, 6
    31b0:	03 c0       	rjmp	.+6      	; 0x31b8 <vfprintf+0x176>
    31b2:	6f ef       	ldi	r22, 0xFF	; 255
    31b4:	7f ef       	ldi	r23, 0xFF	; 255
    31b6:	02 c0       	rjmp	.+4      	; 0x31bc <vfprintf+0x17a>
    31b8:	69 2d       	mov	r22, r9
    31ba:	70 e0       	ldi	r23, 0x00	; 0
    31bc:	42 e0       	ldi	r20, 0x02	; 2
    31be:	50 e0       	ldi	r21, 0x00	; 0
    31c0:	a4 0e       	add	r10, r20
    31c2:	b5 1e       	adc	r11, r21
    31c4:	c6 01       	movw	r24, r12
    31c6:	0e 94 fe 19 	call	0x33fc	; 0x33fc <strnlen_P>
    31ca:	8c 01       	movw	r16, r24
    31cc:	50 e8       	ldi	r21, 0x80	; 128
    31ce:	f5 2a       	or	r15, r21
    31d0:	f3 fe       	sbrs	r15, 3
    31d2:	07 c0       	rjmp	.+14     	; 0x31e2 <vfprintf+0x1a0>
    31d4:	1a c0       	rjmp	.+52     	; 0x320a <vfprintf+0x1c8>
    31d6:	80 e2       	ldi	r24, 0x20	; 32
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	b3 01       	movw	r22, r6
    31dc:	0e 94 14 1a 	call	0x3428	; 0x3428 <fputc>
    31e0:	ea 94       	dec	r14
    31e2:	8e 2d       	mov	r24, r14
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	08 17       	cp	r16, r24
    31e8:	19 07       	cpc	r17, r25
    31ea:	a8 f3       	brcs	.-22     	; 0x31d6 <vfprintf+0x194>
    31ec:	0e c0       	rjmp	.+28     	; 0x320a <vfprintf+0x1c8>
    31ee:	f6 01       	movw	r30, r12
    31f0:	f7 fc       	sbrc	r15, 7
    31f2:	85 91       	lpm	r24, Z+
    31f4:	f7 fe       	sbrs	r15, 7
    31f6:	81 91       	ld	r24, Z+
    31f8:	6f 01       	movw	r12, r30
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	b3 01       	movw	r22, r6
    31fe:	0e 94 14 1a 	call	0x3428	; 0x3428 <fputc>
    3202:	e1 10       	cpse	r14, r1
    3204:	ea 94       	dec	r14
    3206:	01 50       	subi	r16, 0x01	; 1
    3208:	10 40       	sbci	r17, 0x00	; 0
    320a:	01 15       	cp	r16, r1
    320c:	11 05       	cpc	r17, r1
    320e:	79 f7       	brne	.-34     	; 0x31ee <vfprintf+0x1ac>
    3210:	ea c0       	rjmp	.+468    	; 0x33e6 <vfprintf+0x3a4>
    3212:	94 36       	cpi	r25, 0x64	; 100
    3214:	11 f0       	breq	.+4      	; 0x321a <vfprintf+0x1d8>
    3216:	99 36       	cpi	r25, 0x69	; 105
    3218:	69 f5       	brne	.+90     	; 0x3274 <vfprintf+0x232>
    321a:	f7 fe       	sbrs	r15, 7
    321c:	08 c0       	rjmp	.+16     	; 0x322e <vfprintf+0x1ec>
    321e:	f5 01       	movw	r30, r10
    3220:	20 81       	ld	r18, Z
    3222:	31 81       	ldd	r19, Z+1	; 0x01
    3224:	42 81       	ldd	r20, Z+2	; 0x02
    3226:	53 81       	ldd	r21, Z+3	; 0x03
    3228:	84 e0       	ldi	r24, 0x04	; 4
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	0a c0       	rjmp	.+20     	; 0x3242 <vfprintf+0x200>
    322e:	f5 01       	movw	r30, r10
    3230:	80 81       	ld	r24, Z
    3232:	91 81       	ldd	r25, Z+1	; 0x01
    3234:	9c 01       	movw	r18, r24
    3236:	44 27       	eor	r20, r20
    3238:	37 fd       	sbrc	r19, 7
    323a:	40 95       	com	r20
    323c:	54 2f       	mov	r21, r20
    323e:	82 e0       	ldi	r24, 0x02	; 2
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	a8 0e       	add	r10, r24
    3244:	b9 1e       	adc	r11, r25
    3246:	9f e6       	ldi	r25, 0x6F	; 111
    3248:	f9 22       	and	r15, r25
    324a:	57 ff       	sbrs	r21, 7
    324c:	09 c0       	rjmp	.+18     	; 0x3260 <vfprintf+0x21e>
    324e:	50 95       	com	r21
    3250:	40 95       	com	r20
    3252:	30 95       	com	r19
    3254:	21 95       	neg	r18
    3256:	3f 4f       	sbci	r19, 0xFF	; 255
    3258:	4f 4f       	sbci	r20, 0xFF	; 255
    325a:	5f 4f       	sbci	r21, 0xFF	; 255
    325c:	e0 e8       	ldi	r30, 0x80	; 128
    325e:	fe 2a       	or	r15, r30
    3260:	ca 01       	movw	r24, r20
    3262:	b9 01       	movw	r22, r18
    3264:	a1 01       	movw	r20, r2
    3266:	2a e0       	ldi	r18, 0x0A	; 10
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	0e 94 40 1a 	call	0x3480	; 0x3480 <__ultoa_invert>
    326e:	d8 2e       	mov	r13, r24
    3270:	d2 18       	sub	r13, r2
    3272:	40 c0       	rjmp	.+128    	; 0x32f4 <vfprintf+0x2b2>
    3274:	95 37       	cpi	r25, 0x75	; 117
    3276:	29 f4       	brne	.+10     	; 0x3282 <vfprintf+0x240>
    3278:	1f 2d       	mov	r17, r15
    327a:	1f 7e       	andi	r17, 0xEF	; 239
    327c:	2a e0       	ldi	r18, 0x0A	; 10
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	1d c0       	rjmp	.+58     	; 0x32bc <vfprintf+0x27a>
    3282:	1f 2d       	mov	r17, r15
    3284:	19 7f       	andi	r17, 0xF9	; 249
    3286:	9f 36       	cpi	r25, 0x6F	; 111
    3288:	61 f0       	breq	.+24     	; 0x32a2 <vfprintf+0x260>
    328a:	90 37       	cpi	r25, 0x70	; 112
    328c:	20 f4       	brcc	.+8      	; 0x3296 <vfprintf+0x254>
    328e:	98 35       	cpi	r25, 0x58	; 88
    3290:	09 f0       	breq	.+2      	; 0x3294 <vfprintf+0x252>
    3292:	ac c0       	rjmp	.+344    	; 0x33ec <vfprintf+0x3aa>
    3294:	0f c0       	rjmp	.+30     	; 0x32b4 <vfprintf+0x272>
    3296:	90 37       	cpi	r25, 0x70	; 112
    3298:	39 f0       	breq	.+14     	; 0x32a8 <vfprintf+0x266>
    329a:	98 37       	cpi	r25, 0x78	; 120
    329c:	09 f0       	breq	.+2      	; 0x32a0 <vfprintf+0x25e>
    329e:	a6 c0       	rjmp	.+332    	; 0x33ec <vfprintf+0x3aa>
    32a0:	04 c0       	rjmp	.+8      	; 0x32aa <vfprintf+0x268>
    32a2:	28 e0       	ldi	r18, 0x08	; 8
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	0a c0       	rjmp	.+20     	; 0x32bc <vfprintf+0x27a>
    32a8:	10 61       	ori	r17, 0x10	; 16
    32aa:	14 fd       	sbrc	r17, 4
    32ac:	14 60       	ori	r17, 0x04	; 4
    32ae:	20 e1       	ldi	r18, 0x10	; 16
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	04 c0       	rjmp	.+8      	; 0x32bc <vfprintf+0x27a>
    32b4:	14 fd       	sbrc	r17, 4
    32b6:	16 60       	ori	r17, 0x06	; 6
    32b8:	20 e1       	ldi	r18, 0x10	; 16
    32ba:	32 e0       	ldi	r19, 0x02	; 2
    32bc:	17 ff       	sbrs	r17, 7
    32be:	08 c0       	rjmp	.+16     	; 0x32d0 <vfprintf+0x28e>
    32c0:	f5 01       	movw	r30, r10
    32c2:	60 81       	ld	r22, Z
    32c4:	71 81       	ldd	r23, Z+1	; 0x01
    32c6:	82 81       	ldd	r24, Z+2	; 0x02
    32c8:	93 81       	ldd	r25, Z+3	; 0x03
    32ca:	44 e0       	ldi	r20, 0x04	; 4
    32cc:	50 e0       	ldi	r21, 0x00	; 0
    32ce:	08 c0       	rjmp	.+16     	; 0x32e0 <vfprintf+0x29e>
    32d0:	f5 01       	movw	r30, r10
    32d2:	80 81       	ld	r24, Z
    32d4:	91 81       	ldd	r25, Z+1	; 0x01
    32d6:	bc 01       	movw	r22, r24
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	42 e0       	ldi	r20, 0x02	; 2
    32de:	50 e0       	ldi	r21, 0x00	; 0
    32e0:	a4 0e       	add	r10, r20
    32e2:	b5 1e       	adc	r11, r21
    32e4:	a1 01       	movw	r20, r2
    32e6:	0e 94 40 1a 	call	0x3480	; 0x3480 <__ultoa_invert>
    32ea:	d8 2e       	mov	r13, r24
    32ec:	d2 18       	sub	r13, r2
    32ee:	8f e7       	ldi	r24, 0x7F	; 127
    32f0:	f8 2e       	mov	r15, r24
    32f2:	f1 22       	and	r15, r17
    32f4:	f6 fe       	sbrs	r15, 6
    32f6:	0b c0       	rjmp	.+22     	; 0x330e <vfprintf+0x2cc>
    32f8:	5e ef       	ldi	r21, 0xFE	; 254
    32fa:	f5 22       	and	r15, r21
    32fc:	d9 14       	cp	r13, r9
    32fe:	38 f4       	brcc	.+14     	; 0x330e <vfprintf+0x2cc>
    3300:	f4 fe       	sbrs	r15, 4
    3302:	07 c0       	rjmp	.+14     	; 0x3312 <vfprintf+0x2d0>
    3304:	f2 fc       	sbrc	r15, 2
    3306:	05 c0       	rjmp	.+10     	; 0x3312 <vfprintf+0x2d0>
    3308:	8f ee       	ldi	r24, 0xEF	; 239
    330a:	f8 22       	and	r15, r24
    330c:	02 c0       	rjmp	.+4      	; 0x3312 <vfprintf+0x2d0>
    330e:	1d 2d       	mov	r17, r13
    3310:	01 c0       	rjmp	.+2      	; 0x3314 <vfprintf+0x2d2>
    3312:	19 2d       	mov	r17, r9
    3314:	f4 fe       	sbrs	r15, 4
    3316:	0d c0       	rjmp	.+26     	; 0x3332 <vfprintf+0x2f0>
    3318:	fe 01       	movw	r30, r28
    331a:	ed 0d       	add	r30, r13
    331c:	f1 1d       	adc	r31, r1
    331e:	80 81       	ld	r24, Z
    3320:	80 33       	cpi	r24, 0x30	; 48
    3322:	19 f4       	brne	.+6      	; 0x332a <vfprintf+0x2e8>
    3324:	99 ee       	ldi	r25, 0xE9	; 233
    3326:	f9 22       	and	r15, r25
    3328:	08 c0       	rjmp	.+16     	; 0x333a <vfprintf+0x2f8>
    332a:	1f 5f       	subi	r17, 0xFF	; 255
    332c:	f2 fe       	sbrs	r15, 2
    332e:	05 c0       	rjmp	.+10     	; 0x333a <vfprintf+0x2f8>
    3330:	03 c0       	rjmp	.+6      	; 0x3338 <vfprintf+0x2f6>
    3332:	8f 2d       	mov	r24, r15
    3334:	86 78       	andi	r24, 0x86	; 134
    3336:	09 f0       	breq	.+2      	; 0x333a <vfprintf+0x2f8>
    3338:	1f 5f       	subi	r17, 0xFF	; 255
    333a:	0f 2d       	mov	r16, r15
    333c:	f3 fc       	sbrc	r15, 3
    333e:	14 c0       	rjmp	.+40     	; 0x3368 <vfprintf+0x326>
    3340:	f0 fe       	sbrs	r15, 0
    3342:	0f c0       	rjmp	.+30     	; 0x3362 <vfprintf+0x320>
    3344:	1e 15       	cp	r17, r14
    3346:	10 f0       	brcs	.+4      	; 0x334c <vfprintf+0x30a>
    3348:	9d 2c       	mov	r9, r13
    334a:	0b c0       	rjmp	.+22     	; 0x3362 <vfprintf+0x320>
    334c:	9d 2c       	mov	r9, r13
    334e:	9e 0c       	add	r9, r14
    3350:	91 1a       	sub	r9, r17
    3352:	1e 2d       	mov	r17, r14
    3354:	06 c0       	rjmp	.+12     	; 0x3362 <vfprintf+0x320>
    3356:	80 e2       	ldi	r24, 0x20	; 32
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	b3 01       	movw	r22, r6
    335c:	0e 94 14 1a 	call	0x3428	; 0x3428 <fputc>
    3360:	1f 5f       	subi	r17, 0xFF	; 255
    3362:	1e 15       	cp	r17, r14
    3364:	c0 f3       	brcs	.-16     	; 0x3356 <vfprintf+0x314>
    3366:	04 c0       	rjmp	.+8      	; 0x3370 <vfprintf+0x32e>
    3368:	1e 15       	cp	r17, r14
    336a:	10 f4       	brcc	.+4      	; 0x3370 <vfprintf+0x32e>
    336c:	e1 1a       	sub	r14, r17
    336e:	01 c0       	rjmp	.+2      	; 0x3372 <vfprintf+0x330>
    3370:	ee 24       	eor	r14, r14
    3372:	04 ff       	sbrs	r16, 4
    3374:	0f c0       	rjmp	.+30     	; 0x3394 <vfprintf+0x352>
    3376:	80 e3       	ldi	r24, 0x30	; 48
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	b3 01       	movw	r22, r6
    337c:	0e 94 14 1a 	call	0x3428	; 0x3428 <fputc>
    3380:	02 ff       	sbrs	r16, 2
    3382:	1d c0       	rjmp	.+58     	; 0x33be <vfprintf+0x37c>
    3384:	01 fd       	sbrc	r16, 1
    3386:	03 c0       	rjmp	.+6      	; 0x338e <vfprintf+0x34c>
    3388:	88 e7       	ldi	r24, 0x78	; 120
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e c0       	rjmp	.+28     	; 0x33aa <vfprintf+0x368>
    338e:	88 e5       	ldi	r24, 0x58	; 88
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	0b c0       	rjmp	.+22     	; 0x33aa <vfprintf+0x368>
    3394:	80 2f       	mov	r24, r16
    3396:	86 78       	andi	r24, 0x86	; 134
    3398:	91 f0       	breq	.+36     	; 0x33be <vfprintf+0x37c>
    339a:	01 ff       	sbrs	r16, 1
    339c:	02 c0       	rjmp	.+4      	; 0x33a2 <vfprintf+0x360>
    339e:	8b e2       	ldi	r24, 0x2B	; 43
    33a0:	01 c0       	rjmp	.+2      	; 0x33a4 <vfprintf+0x362>
    33a2:	80 e2       	ldi	r24, 0x20	; 32
    33a4:	f7 fc       	sbrc	r15, 7
    33a6:	8d e2       	ldi	r24, 0x2D	; 45
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	b3 01       	movw	r22, r6
    33ac:	0e 94 14 1a 	call	0x3428	; 0x3428 <fputc>
    33b0:	06 c0       	rjmp	.+12     	; 0x33be <vfprintf+0x37c>
    33b2:	80 e3       	ldi	r24, 0x30	; 48
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	b3 01       	movw	r22, r6
    33b8:	0e 94 14 1a 	call	0x3428	; 0x3428 <fputc>
    33bc:	9a 94       	dec	r9
    33be:	d9 14       	cp	r13, r9
    33c0:	c0 f3       	brcs	.-16     	; 0x33b2 <vfprintf+0x370>
    33c2:	da 94       	dec	r13
    33c4:	f1 01       	movw	r30, r2
    33c6:	ed 0d       	add	r30, r13
    33c8:	f1 1d       	adc	r31, r1
    33ca:	80 81       	ld	r24, Z
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	b3 01       	movw	r22, r6
    33d0:	0e 94 14 1a 	call	0x3428	; 0x3428 <fputc>
    33d4:	dd 20       	and	r13, r13
    33d6:	a9 f7       	brne	.-22     	; 0x33c2 <vfprintf+0x380>
    33d8:	06 c0       	rjmp	.+12     	; 0x33e6 <vfprintf+0x3a4>
    33da:	80 e2       	ldi	r24, 0x20	; 32
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	b3 01       	movw	r22, r6
    33e0:	0e 94 14 1a 	call	0x3428	; 0x3428 <fputc>
    33e4:	ea 94       	dec	r14
    33e6:	ee 20       	and	r14, r14
    33e8:	c1 f7       	brne	.-16     	; 0x33da <vfprintf+0x398>
    33ea:	43 ce       	rjmp	.-890    	; 0x3072 <vfprintf+0x30>
    33ec:	f3 01       	movw	r30, r6
    33ee:	66 81       	ldd	r22, Z+6	; 0x06
    33f0:	77 81       	ldd	r23, Z+7	; 0x07
    33f2:	cb 01       	movw	r24, r22
    33f4:	2b 96       	adiw	r28, 0x0b	; 11
    33f6:	e2 e1       	ldi	r30, 0x12	; 18
    33f8:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__epilogue_restores__>

000033fc <strnlen_P>:
    33fc:	fc 01       	movw	r30, r24
    33fe:	05 90       	lpm	r0, Z+
    3400:	61 50       	subi	r22, 0x01	; 1
    3402:	70 40       	sbci	r23, 0x00	; 0
    3404:	01 10       	cpse	r0, r1
    3406:	d8 f7       	brcc	.-10     	; 0x33fe <strnlen_P+0x2>
    3408:	80 95       	com	r24
    340a:	90 95       	com	r25
    340c:	8e 0f       	add	r24, r30
    340e:	9f 1f       	adc	r25, r31
    3410:	08 95       	ret

00003412 <strnlen>:
    3412:	fc 01       	movw	r30, r24
    3414:	61 50       	subi	r22, 0x01	; 1
    3416:	70 40       	sbci	r23, 0x00	; 0
    3418:	01 90       	ld	r0, Z+
    341a:	01 10       	cpse	r0, r1
    341c:	d8 f7       	brcc	.-10     	; 0x3414 <strnlen+0x2>
    341e:	80 95       	com	r24
    3420:	90 95       	com	r25
    3422:	8e 0f       	add	r24, r30
    3424:	9f 1f       	adc	r25, r31
    3426:	08 95       	ret

00003428 <fputc>:
    3428:	0f 93       	push	r16
    342a:	1f 93       	push	r17
    342c:	cf 93       	push	r28
    342e:	df 93       	push	r29
    3430:	8c 01       	movw	r16, r24
    3432:	eb 01       	movw	r28, r22
    3434:	8b 81       	ldd	r24, Y+3	; 0x03
    3436:	81 ff       	sbrs	r24, 1
    3438:	1b c0       	rjmp	.+54     	; 0x3470 <fputc+0x48>
    343a:	82 ff       	sbrs	r24, 2
    343c:	0d c0       	rjmp	.+26     	; 0x3458 <fputc+0x30>
    343e:	2e 81       	ldd	r18, Y+6	; 0x06
    3440:	3f 81       	ldd	r19, Y+7	; 0x07
    3442:	8c 81       	ldd	r24, Y+4	; 0x04
    3444:	9d 81       	ldd	r25, Y+5	; 0x05
    3446:	28 17       	cp	r18, r24
    3448:	39 07       	cpc	r19, r25
    344a:	64 f4       	brge	.+24     	; 0x3464 <fputc+0x3c>
    344c:	e8 81       	ld	r30, Y
    344e:	f9 81       	ldd	r31, Y+1	; 0x01
    3450:	01 93       	st	Z+, r16
    3452:	f9 83       	std	Y+1, r31	; 0x01
    3454:	e8 83       	st	Y, r30
    3456:	06 c0       	rjmp	.+12     	; 0x3464 <fputc+0x3c>
    3458:	e8 85       	ldd	r30, Y+8	; 0x08
    345a:	f9 85       	ldd	r31, Y+9	; 0x09
    345c:	80 2f       	mov	r24, r16
    345e:	09 95       	icall
    3460:	89 2b       	or	r24, r25
    3462:	31 f4       	brne	.+12     	; 0x3470 <fputc+0x48>
    3464:	8e 81       	ldd	r24, Y+6	; 0x06
    3466:	9f 81       	ldd	r25, Y+7	; 0x07
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	9f 83       	std	Y+7, r25	; 0x07
    346c:	8e 83       	std	Y+6, r24	; 0x06
    346e:	02 c0       	rjmp	.+4      	; 0x3474 <fputc+0x4c>
    3470:	0f ef       	ldi	r16, 0xFF	; 255
    3472:	1f ef       	ldi	r17, 0xFF	; 255
    3474:	c8 01       	movw	r24, r16
    3476:	df 91       	pop	r29
    3478:	cf 91       	pop	r28
    347a:	1f 91       	pop	r17
    347c:	0f 91       	pop	r16
    347e:	08 95       	ret

00003480 <__ultoa_invert>:
    3480:	fa 01       	movw	r30, r20
    3482:	aa 27       	eor	r26, r26
    3484:	28 30       	cpi	r18, 0x08	; 8
    3486:	51 f1       	breq	.+84     	; 0x34dc <__ultoa_invert+0x5c>
    3488:	20 31       	cpi	r18, 0x10	; 16
    348a:	81 f1       	breq	.+96     	; 0x34ec <__ultoa_invert+0x6c>
    348c:	e8 94       	clt
    348e:	6f 93       	push	r22
    3490:	6e 7f       	andi	r22, 0xFE	; 254
    3492:	6e 5f       	subi	r22, 0xFE	; 254
    3494:	7f 4f       	sbci	r23, 0xFF	; 255
    3496:	8f 4f       	sbci	r24, 0xFF	; 255
    3498:	9f 4f       	sbci	r25, 0xFF	; 255
    349a:	af 4f       	sbci	r26, 0xFF	; 255
    349c:	b1 e0       	ldi	r27, 0x01	; 1
    349e:	3e d0       	rcall	.+124    	; 0x351c <__ultoa_invert+0x9c>
    34a0:	b4 e0       	ldi	r27, 0x04	; 4
    34a2:	3c d0       	rcall	.+120    	; 0x351c <__ultoa_invert+0x9c>
    34a4:	67 0f       	add	r22, r23
    34a6:	78 1f       	adc	r23, r24
    34a8:	89 1f       	adc	r24, r25
    34aa:	9a 1f       	adc	r25, r26
    34ac:	a1 1d       	adc	r26, r1
    34ae:	68 0f       	add	r22, r24
    34b0:	79 1f       	adc	r23, r25
    34b2:	8a 1f       	adc	r24, r26
    34b4:	91 1d       	adc	r25, r1
    34b6:	a1 1d       	adc	r26, r1
    34b8:	6a 0f       	add	r22, r26
    34ba:	71 1d       	adc	r23, r1
    34bc:	81 1d       	adc	r24, r1
    34be:	91 1d       	adc	r25, r1
    34c0:	a1 1d       	adc	r26, r1
    34c2:	20 d0       	rcall	.+64     	; 0x3504 <__ultoa_invert+0x84>
    34c4:	09 f4       	brne	.+2      	; 0x34c8 <__ultoa_invert+0x48>
    34c6:	68 94       	set
    34c8:	3f 91       	pop	r19
    34ca:	2a e0       	ldi	r18, 0x0A	; 10
    34cc:	26 9f       	mul	r18, r22
    34ce:	11 24       	eor	r1, r1
    34d0:	30 19       	sub	r19, r0
    34d2:	30 5d       	subi	r19, 0xD0	; 208
    34d4:	31 93       	st	Z+, r19
    34d6:	de f6       	brtc	.-74     	; 0x348e <__ultoa_invert+0xe>
    34d8:	cf 01       	movw	r24, r30
    34da:	08 95       	ret
    34dc:	46 2f       	mov	r20, r22
    34de:	47 70       	andi	r20, 0x07	; 7
    34e0:	40 5d       	subi	r20, 0xD0	; 208
    34e2:	41 93       	st	Z+, r20
    34e4:	b3 e0       	ldi	r27, 0x03	; 3
    34e6:	0f d0       	rcall	.+30     	; 0x3506 <__ultoa_invert+0x86>
    34e8:	c9 f7       	brne	.-14     	; 0x34dc <__ultoa_invert+0x5c>
    34ea:	f6 cf       	rjmp	.-20     	; 0x34d8 <__ultoa_invert+0x58>
    34ec:	46 2f       	mov	r20, r22
    34ee:	4f 70       	andi	r20, 0x0F	; 15
    34f0:	40 5d       	subi	r20, 0xD0	; 208
    34f2:	4a 33       	cpi	r20, 0x3A	; 58
    34f4:	18 f0       	brcs	.+6      	; 0x34fc <__ultoa_invert+0x7c>
    34f6:	49 5d       	subi	r20, 0xD9	; 217
    34f8:	31 fd       	sbrc	r19, 1
    34fa:	40 52       	subi	r20, 0x20	; 32
    34fc:	41 93       	st	Z+, r20
    34fe:	02 d0       	rcall	.+4      	; 0x3504 <__ultoa_invert+0x84>
    3500:	a9 f7       	brne	.-22     	; 0x34ec <__ultoa_invert+0x6c>
    3502:	ea cf       	rjmp	.-44     	; 0x34d8 <__ultoa_invert+0x58>
    3504:	b4 e0       	ldi	r27, 0x04	; 4
    3506:	a6 95       	lsr	r26
    3508:	97 95       	ror	r25
    350a:	87 95       	ror	r24
    350c:	77 95       	ror	r23
    350e:	67 95       	ror	r22
    3510:	ba 95       	dec	r27
    3512:	c9 f7       	brne	.-14     	; 0x3506 <__ultoa_invert+0x86>
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	61 05       	cpc	r22, r1
    3518:	71 05       	cpc	r23, r1
    351a:	08 95       	ret
    351c:	9b 01       	movw	r18, r22
    351e:	ac 01       	movw	r20, r24
    3520:	0a 2e       	mov	r0, r26
    3522:	06 94       	lsr	r0
    3524:	57 95       	ror	r21
    3526:	47 95       	ror	r20
    3528:	37 95       	ror	r19
    352a:	27 95       	ror	r18
    352c:	ba 95       	dec	r27
    352e:	c9 f7       	brne	.-14     	; 0x3522 <__ultoa_invert+0xa2>
    3530:	62 0f       	add	r22, r18
    3532:	73 1f       	adc	r23, r19
    3534:	84 1f       	adc	r24, r20
    3536:	95 1f       	adc	r25, r21
    3538:	a0 1d       	adc	r26, r0
    353a:	08 95       	ret

0000353c <_exit>:
    353c:	f8 94       	cli

0000353e <__stop_program>:
    353e:	ff cf       	rjmp	.-2      	; 0x353e <__stop_program>
